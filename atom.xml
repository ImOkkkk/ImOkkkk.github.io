<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuwy1998 BLOG</title>
  <icon>https://www.gravatar.com/avatar/5503d12b09e32d800cc45af49aa8ef7c</icon>
  <subtitle>When they go low,we go high.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tonymua.top/"/>
  <updated>2021-05-23T14:36:45.692Z</updated>
  <id>http://tonymua.top/</id>
  
  <author>
    <name>liuwy1998</name>
    <email>547717253@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式(JDK Proxy与CGLIB Proxy)</title>
    <link href="http://tonymua.top/proxymode/"/>
    <id>http://tonymua.top/proxymode/</id>
    <published>2021-05-23T14:15:34.269Z</published>
    <updated>2021-05-23T14:36:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h3><ol><li><p>售卖香水接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义真实对象和代理对象的公共接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellPerfume</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sellPerfume</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义香水提供商，实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChanelFactory</span> <span class="keyword">implements</span> <span class="title">SellPerfume</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellPerfume</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"成功购买香奈儿品牌的香水，价格是："</span> + price + <span class="string">"元！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>定义代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoHongSellProxy</span> <span class="keyword">implements</span> <span class="title">SellPerfume</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 代理对象内部保存对真实目标对象的引用，控制其它对象对目标对象的访问。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ChanelFactory chanelFactory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XiaoHongSellProxy</span><span class="params">(ChanelFactory chanelFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chanelFactory = chanelFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellPerfume</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        doSomethingBeforeSell();</span><br><span class="line">        chanelFactory.sellPerfume(price);</span><br><span class="line">        doSomethingAfterSell();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingBeforeSell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小红代理购买香水前的额外操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingAfterSell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小红代理购买香水后的额外操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>购买香水</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 访问者仅能通过代理对象访问真实目标对象，不可直接访问目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChanelFactory chanelFactory = <span class="keyword">new</span> ChanelFactory();</span><br><span class="line">        XiaoHongSellProxy xiaoHongSellProxy = <span class="keyword">new</span> XiaoHongSellProxy(chanelFactory);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 代理对象并不是真正提供服务的对象，它只是替访问者访问目标对象的一个中间人，</span></span><br><span class="line"><span class="comment">         * 真正提供服务的还是目标对象，而代理对象的作用就是在目标对象提供服务之前或之后能够执行额外的逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        xiaoHongSellProxy.sellPerfume(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">小红代理购买香水前的额外操作...</span><br><span class="line">成功购买香奈儿品牌的香水，价格是：<span class="number">100.0</span>元！</span><br><span class="line">小红代理购买香水后的额外操作...</span><br></pre></td></tr></table></figure></li></ol><p><strong>代理模式的定义：</strong>给目标对象提供一个代理对象，代理对象包含该目标对象，并控制对该目标对象的访问。</p><p><strong>代理模式的目的：</strong>通过代理对象的隔离，可以在对目标对象的访问前后增加额外的业务逻辑，实现功能增强；通过代理对象访问目标对象，可以防止系统大量的直接对目标对象进行不正确的访问。</p><h3 id="2-静态代理与动态代理"><a href="#2-静态代理与动态代理" class="headerlink" title="2.静态代理与动态代理"></a>2.静态代理与动态代理</h3><p><strong>共同点：</strong>都能实现代理模式；代理对象和目标对象都需要实现一个公共接口。</p><p><strong>不同点：</strong></p><ul><li>动态代理产生代理对象的时机是<strong>运行时动态生成</strong>，它没有Java源文件，<strong>直接生成字节码文件实例化代理对象</strong>，而静态代理的代理对象，在<strong>程序编译时</strong>已经写好了Java文件，直接new一个代理对象即可。</li><li>动态代理比静态代理更加稳健，对程序的可维护性和扩展性更加友好。</li></ul><h3 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3.动态代理"></a>3.动态代理</h3><p>面对新的需求时，不需要修改代理对象的代码，只需要新增接口对象，在客户端调用即可完成新的代理。</p><h4 id="3-1-JDK-Proxy"><a href="#3-1-JDK-Proxy" class="headerlink" title="3.1 JDK Proxy"></a>3.1 JDK Proxy</h4><p>JDK提供的一个动态代理机制，涉及到Proxy和InvocationHandler两个核心类。</p><p><strong>代理对象是在程序运行过程中，有代理工厂动态生成，代理对象本身不存在Java源文件。</strong></p><p>代理工厂需要实现InvocationHanlder接口并实现invoke()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理的真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellProxyFactory</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行代理后的额外操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行代理前的额外操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 真正执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 调用第二个参数method时传入的参数列表值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        doSomethingBefore();</span><br><span class="line">        Object invokeObject = method.invoke(object, args);</span><br><span class="line">        doSomethingAfter();</span><br><span class="line">        <span class="keyword">return</span> invokeObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成代理对象需要用到Proxy类，里面的静态方法newProxyInstance可以生成任意一个代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loader 加载动态代理的类的类加载器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> method 代理类实现的接口，可以传入多个接口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args 指定代理类的调用处理程序，即调用接口中的方法时，会找到该代理工厂h，执行invoke()方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h)</span><br></pre></td></tr></table></figure><p><strong>新增红酒代理功能：</strong></p><ul><li><p>创建新的红酒供应商和售卖红酒接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红酒供应商</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedWineFactory</span> <span class="keyword">implements</span> <span class="title">SellWine</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SellWine</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"成功售卖一瓶红酒，价格："</span> + price + <span class="string">"元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 售卖红酒接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellWine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SellWine</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在客户端实例化一个代理对象，然后向该代理对象购买红酒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// buyChannel();</span></span><br><span class="line">        buyRedWine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buyChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ChanelFactory chanelFactory = <span class="keyword">new</span> ChanelFactory();</span><br><span class="line">        SellProxyFactory sellProxyFactory = <span class="keyword">new</span> SellProxyFactory(chanelFactory);</span><br><span class="line">        SellPerfume sellPerfume = (SellPerfume)Proxy.newProxyInstance(chanelFactory.getClass().getClassLoader(),</span><br><span class="line">            chanelFactory.getClass().getInterfaces(), sellProxyFactory);</span><br><span class="line">        sellPerfume.sellPerfume(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buyRedWine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化一个红酒供应商</span></span><br><span class="line">        RedWineFactory redWineFactory = <span class="keyword">new</span> RedWineFactory();</span><br><span class="line">        <span class="comment">// 实例化代理工厂，传入红酒供应商引用控制对其的访问</span></span><br><span class="line">        SellProxyFactory sellProxyFactory = <span class="keyword">new</span> SellProxyFactory(redWineFactory);</span><br><span class="line">        <span class="comment">// 实例化代理对象</span></span><br><span class="line">        SellWine sellWine = (SellWine)Proxy.newProxyInstance(redWineFactory.getClass().getClassLoader(),</span><br><span class="line">            redWineFactory.getClass().getInterfaces(), sellProxyFactory);</span><br><span class="line">        <span class="comment">// 代理售卖红酒</span></span><br><span class="line">        sellWine.SellWine(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>总结：</strong></p><ol><li>JDK动态代理的使用方法<ul><li>代理工厂需要实现InvocationHandle接口，调用代理方法会转向执行invoke()方法。</li><li>生成代理对象需要使用Proxy对象中的newProxyInsatnce()方法，返回对象可强转成传入的其中一个接口，然后调用接口方法即可实现代理。</li></ul></li><li>JDK动态代理的特点<ul><li>目标对象强制需要实现一个接口，否则无法使用JDK动态代理。</li></ul></li></ol><h4 id="3-2-CGLIB"><a href="#3-2-CGLIB" class="headerlink" title="3.2 CGLIB"></a>3.2 CGLIB</h4><p>CGLIB不是JDK自带的动态代理，它需要导入第三方依赖，它是一个字节码生成类库，能够在运行时动态生成代理类对Java类和Java接口扩展。CGLIB不仅能够为Java接口做代理，而且<strong>能够为普通的Java类做代理</strong>，而JDK Proxy只能为实现了接口的Java类做代理。</p><p><strong>CGLIB可以代理没有实现接口的Java类</strong></p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib-nodep<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CGLIB代理中有两个核心的类：MetondInterceptor接口和Enhancer类，前者是实现一个代理工厂的根接口，后者是创建动态代理对象的类。</p><p>定义代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关联真实对象，控制真实对象的访问</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从代理工厂获取一个代理对象实例，等价于创建小红代理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置需要增强类的类加载器</span></span><br><span class="line">        enhancer.setClassLoader(object.getClass().getClassLoader());</span><br><span class="line">        <span class="comment">// 设置被代理类，真实对象</span></span><br><span class="line">        enhancer.setSuperclass(object.getClass());</span><br><span class="line">        <span class="comment">// 设置方法拦截器，代理工厂</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行方法前额外的操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行方法后额外的操作..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 被拦截的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 被拦截方法的所有入参值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 方法代理，用于调用原始的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        doSomethingBefore();</span><br><span class="line">        Object invokeSuperObject = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        doSomethingAfter();</span><br><span class="line">        <span class="keyword">return</span> invokeSuperObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellProxyFactory sellProxyFactory = <span class="keyword">new</span> SellProxyFactory();</span><br><span class="line">        <span class="comment">//获取一个代理实例</span></span><br><span class="line">        ChanelFactory chanelFactoryInstance = (ChanelFactory) sellProxyFactory.getProxyInstance(<span class="keyword">new</span> ChanelFactory());</span><br><span class="line">        chanelFactoryInstance.sellPerfume(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>CGLIB的使用方法</p><ul><li>代理工厂需要<strong>实现MethodInterceptor接口</strong>，并重写方法，<strong>内部关联真实对象</strong>，控制第三者对真实对象的访问；代理工厂内部暴露getInstance(Object object)方法，<strong>用于从代理工厂中获取一个代理对象实例</strong>。</li><li>Enhancer类用于从代理工厂中实例化一个代理对象，给调用者提供代理服务。</li></ul></li><li><p>JDK Proxy和CGLIB的对比</p><table><thead><tr><th></th><th>JDK Proxy</th><th>CGLIB</th></tr></thead><tbody><tr><td>代理工厂实现接口</td><td>InvocationHandler</td><td>MethodInterceptor</td></tr><tr><td>构造代理对象给Client服务</td><td>Proxy</td><td>Enhancer</td></tr></tbody></table><p><strong>不同点：</strong></p><ul><li>CGLIB可以代理大部分类；而JDK Proxy仅能够代理实现了接口的类</li><li>CGLIB采用动态创建被代理类的子类实现方法拦截的方法，所以CGLIB不能代理被final关键字修饰的类和方法。</li></ul></li></ol></li></ol><h3 id="4-动态代理的实际运用"><a href="#4-动态代理的实际运用" class="headerlink" title="4.动态代理的实际运用"></a>4.动态代理的实际运用</h3><p>AOP允许我们<strong>将重复的代码逻辑抽取出来形成一个单独的覆盖层</strong>，在执行代码时可以将覆盖层嵌入到原代码逻辑里面去。</p><p>如下图，method1和method2都需要在方法执行前后记录日志，AOP可以将大量重复的Log.info代码包装到额外的一层，监听方法的执行，当方法被调用时，通用的日志记录层会拦截掉该方法，在该方法调用前后记录日志，这样可以让方法专注于自己的业务逻辑而无需关注其它不必要的信息。</p><p><img data-src="../../../../assets/img/640.gif" alt></p><p>Spring AOP有许多功能：提供缓存、提供日志环绕、事务处理……</p><p><strong>事务</strong></p><p>@Transactional</p><p>每个有关数据库的操作都有保证一个事务内的所有操作，要么全部执行成功，要么全部执行失败，传统的事务失败回滚和成功提交是使用try…catch代码块完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    session = getSqlSessionFactory().openSession(<span class="keyword">false</span>);</span><br><span class="line">    session.update(<span class="string">"..."</span>, <span class="keyword">new</span> Object());</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    session.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">// 事务回滚</span></span><br><span class="line">    session.rollback();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 关闭事务</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果多个方法都需要写这一段逻辑非常冗余，所以Spring封装了一个注解@Transactional，使用它后，调用方法时会监视方法，如果方法上含有该注解，就会自动把数据库相关操作的代码包裹起来，类似上面一段代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-静态代理&quot;&gt;&lt;a href=&quot;#1-静态代理&quot; class=&quot;headerlink&quot; title=&quot;1.静态代理&quot;&gt;&lt;/a&gt;1.静态代理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;售卖香水接口&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 定义真实对象和代理对象的公共接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SellPerfume&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sellPerfume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义香水提供商，实现接口&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChanelFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SellPerfume&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sellPerfume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;成功购买香奈儿品牌的香水，价格是：&quot;&lt;/span&gt; + price + &lt;span class=&quot;string&quot;&gt;&quot;元！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://tonymua.top/categories/Spring/"/>
    
    
      <category term="代理模式" scheme="http://tonymua.top/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>通用Mapper入门</title>
    <link href="http://tonymua.top/2400/"/>
    <id>http://tonymua.top/2400/</id>
    <published>2021-05-08T13:19:59.251Z</published>
    <updated>2020-04-29T02:44:38.016Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-为什么使用通用mapper"><a href="#1-为什么使用通用mapper" class="headerlink" title="1.为什么使用通用mapper"></a>1.为什么使用通用mapper</h3><p>​    通用 Mapper4 是一个可以实现任意 MyBatis 通用方法的框架，项目提供了常规的增删改查操作以及<code>Example</code> 相关的单表操作。通用 Mapper 是为了解决 MyBatis 使用中 90% 的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间。</p><h3 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h3><a id="more"></a><h4 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-创建实体类"><a href="#2-2-创建实体类" class="headerlink" title="2.2 创建实体类"></a>2.2 创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"employee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-创建相关数据表"><a href="#2-3-创建相关数据表" class="headerlink" title="2.3 创建相关数据表"></a>2.3 创建相关数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">4</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'许威威'</span>, <span class="string">'男'</span>, <span class="string">'xuweiwei@qq.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'孙夏萍'</span>, <span class="string">'女'</span>, <span class="string">'sunxiaping@qq,com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'杜国庆'</span>, <span class="string">'男'</span>, <span class="string">'duguoqing@qq.com'</span>);</span><br></pre></td></tr></table></figure><h4 id="2-4-创建Mapper接口"><a href="#2-4-创建Mapper接口" class="headerlink" title="2.4 创建Mapper接口"></a>2.4 创建Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展:自定义通用Mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RegisterMapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">IdListMapper</span>&lt;<span class="title">T</span>,<span class="title">Long</span>&gt;, <span class="title">InsertListMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-配置通用Mapper"><a href="#2-5-配置通用Mapper" class="headerlink" title="2.5 配置通用Mapper"></a>2.5 配置通用Mapper</h4><p>为了让上述方法可以直接使用，还需要配置通用 Mapper，让项目在启动的时候，把上述方法都自动生成好，这样在运行时就可以使用上面所有的方法。</p><p>根据不同的开发环境，需要不同的配置方式，完整的内容可以 集成通用 Mapper，我们这里以最常见的 Spring 和 MyBatis 集成为例。</p><p>在集成 Spring 的环境中使用 MyBatis 接口方式时，需要配置 MapperScannerConfigurer，在这种情况下使用通用 Mapper，只需要修改配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"扫描包名"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-简单使用"><a href="#2-6-简单使用" class="headerlink" title="2.6 简单使用"></a>2.6 简单使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath*:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper emloyeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = emloyeeMapper.selectAll();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-相关方法"><a href="#3-相关方法" class="headerlink" title="3.相关方法"></a>3.相关方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据实体类不为null的字段进行查询,条件全部使用=号and条件</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">select</span><span class="params">(T record)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据实体类不为null的字段查询总数,条件全部使用=号and条件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectCount</span><span class="params">(T record)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据主键进行查询,必须保证结果唯一</span></span><br><span class="line"><span class="comment">//单个字段做主键时,可以直接写主键的值</span></span><br><span class="line"><span class="comment">//联合主键时,key可以是实体类,也可以是Map</span></span><br><span class="line"><span class="function">T <span class="title">selectByPrimaryKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//插入一条数据</span></span><br><span class="line"><span class="comment">//支持Oracle序列,UUID,类似Mysql的INDENTITY自动增长(自动回写)</span></span><br><span class="line"><span class="comment">//优先使用传入的参数值,参数值空时,才会使用序列、UUID,自动增长</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T record)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//插入一条数据,只插入不为null的字段,不会影响有默认值的字段</span></span><br><span class="line"><span class="comment">//支持Oracle序列,UUID,类似Mysql的INDENTITY自动增长(自动回写)</span></span><br><span class="line"><span class="comment">//优先使用传入的参数值,参数值空时,才会使用序列、UUID,自动增长</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(T record)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据实体类中字段不为null的条件进行删除,条件全部使用=号and条件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(T key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过主键进行删除,这里最多只会删除一条数据</span></span><br><span class="line"><span class="comment">//单个字段做主键时,可以直接写主键的值</span></span><br><span class="line"><span class="comment">//联合主键时,key可以是实体类,也可以是Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据主键进行更新,这里最多只会更新一条数据</span></span><br><span class="line"><span class="comment">//参数为实体类</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(T record)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据主键进行更新</span></span><br><span class="line"><span class="comment">//只会更新不是null的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(T record)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>Example方法</strong></p><p>方法：<code>List&lt;T&gt; selectByExample(Object example)</code><br>说明：根据Example条件进行查询<br>重点：这个查询支持通过Example类指定查询列，通过selectProperties方法指定查询列</p><p>方法：<code>int selectCountByExample(Object example)</code><br>说明：根据Example条件进行查询总数</p><p>方法：<code>int updateByExample(T record,Object example)</code><br>说明：根据Example条件更新实体record包含的全部属性，null值会被更新</p><p>方法：<code>int updateByExampleSelective(T record, Object example)</code><br>说明：根据Example条件更新实体record包含的不是null的属性值</p><p>方法：<code>int deleteByExample(Object example)</code><br>说明：根据Example条件删除数据</p><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath*:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper emloyeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = emloyeeMapper.selectAll();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*Employee employee=new Employee();</span></span><br><span class="line"><span class="comment">        employee.setId(2);</span></span><br><span class="line"><span class="comment">        List&lt;Employee&gt; select = emloyeeMapper.select(employee);*/</span></span><br><span class="line">        Employee employee=<span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setGender(<span class="string">"男"</span>);</span><br><span class="line">        <span class="keyword">int</span> count = emloyeeMapper.selectCount(employee);</span><br><span class="line">        Employee select = emloyeeMapper.selectByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(select);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee=<span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setGender(<span class="string">"男"</span>);</span><br><span class="line">        employee.setName(<span class="string">"小王"</span>);</span><br><span class="line">        employee.setEmail(<span class="string">"111@qq.com"</span>);</span><br><span class="line">        <span class="keyword">int</span> count = emloyeeMapper.insert(employee);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*Employee employee=new Employee();</span></span><br><span class="line"><span class="comment">        employee.setGender("男");</span></span><br><span class="line"><span class="comment">        int count = emloyeeMapper.delete(employee);*/</span></span><br><span class="line">        <span class="keyword">int</span> count = emloyeeMapper.deleteByPrimaryKey(<span class="number">2</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee=<span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setId(<span class="number">6</span>);</span><br><span class="line">        employee.setEmail(<span class="string">"333.@qq.com"</span>);</span><br><span class="line">        employee.setGender(<span class="string">"女"</span>);</span><br><span class="line">        <span class="keyword">int</span> count = emloyeeMapper.updateByPrimaryKeySelective(employee);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-为什么使用通用mapper&quot;&gt;&lt;a href=&quot;#1-为什么使用通用mapper&quot; class=&quot;headerlink&quot; title=&quot;1.为什么使用通用mapper&quot;&gt;&lt;/a&gt;1.为什么使用通用mapper&lt;/h3&gt;&lt;p&gt;​    通用 Mapper4 是一个可以实现任意 MyBatis 通用方法的框架，项目提供了常规的增删改查操作以及&lt;code&gt;Example&lt;/code&gt; 相关的单表操作。通用 Mapper 是为了解决 MyBatis 使用中 90% 的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间。&lt;/p&gt;
&lt;h3 id=&quot;2-快速入门&quot;&gt;&lt;a href=&quot;#2-快速入门&quot; class=&quot;headerlink&quot; title=&quot;2.快速入门&quot;&gt;&lt;/a&gt;2.快速入门&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="javaee" scheme="http://tonymua.top/tags/javaee/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络与网络编程</title>
    <link href="http://tonymua.top/65346/"/>
    <id>http://tonymua.top/65346/</id>
    <published>2021-05-08T13:19:59.249Z</published>
    <updated>2020-04-29T02:44:38.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-软件结构"><a href="#1-软件结构" class="headerlink" title="1.软件结构"></a>1.软件结构</h3><h4 id="1-1-C-S结构"><a href="#1-1-C-S结构" class="headerlink" title="1.1 C/S结构"></a>1.1 C/S结构</h4><p>全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。<br><img data-src="../../../../assets/img/1_cs.jpg" alt></p><h4 id="1-2-B-S结构"><a href="#1-2-B-S结构" class="headerlink" title="1.2 B/S结构"></a>1.2 B/S结构</h4><p>全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><a id="more"></a><p><img data-src="../../../../assets/img/2_bs.jpg" alt><br>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h3><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。<br><img data-src="../../../../assets/img/3_tcp_ip.jpg" alt><br>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</li><li><strong>OSI七层模型:</strong><br>  应用层    负责对软件提供接口时程序能使用网络服务<br>  表示层    应用程序和网络之间的翻译官<br>  会话层    负责在网络中的两节点之间建立和维持通信<br>  传输层    建立端到端之间的连接，数据的分段和重组<br>  网络层    将网络地址翻译成对应的mac地址，指导数据包的转发<br>  数据链路层    将网络层接收到的数据包封装为特定的数据帧，使其在不可靠的物理链路上进行可靠的数据传递<br>  物理层    建立、维护、断开物理连接。（由底层网络定义协议）</li></ul><h3 id="3-UDP与TCP协议"><a href="#3-UDP与TCP协议" class="headerlink" title="3.UDP与TCP协议"></a>3.UDP与TCP协议</h3><h4 id="3-1-UDP协议"><a href="#3-1-UDP协议" class="headerlink" title="3.1 UDP协议"></a>3.1 UDP协议</h4><p>​    UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。<br><img data-src="../../../../assets/img/106209.png" alt></p><h4 id="3-2-TCP协议"><a href="#3-2-TCP协议" class="headerlink" title="3.2 TCP协议"></a>3.2 TCP协议</h4><p>​    TCP协议是<strong>面向连接</strong>的通信协议，即在传输数据前先在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。每次连接的创建都需要经过“三次握手”。</p><ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认 </li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求 </li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示<br><img data-src="../../../../assets/img/403168.png" alt><br>由于TCP协议的面向连接特性，它可以保证传输数据的安全性，所以是一个被广泛采用的协议，例如在下载文件时，如果数据接收不完整，将会导致文件数据丢失而不能被打开，因此，下载文件时必须采用TCP协议。</li></ul><h3 id="4-相关面试题"><a href="#4-相关面试题" class="headerlink" title="4.相关面试题"></a>4.相关面试题</h3><ol><li>TCP断开连接的四次挥手<br>第一次挥手：客户端发送一个FIN包（seq=x），进入FIN_WAIT（结束等待）状态<br>第二次挥手：服务器收到FIN包，发回一个ACK包(ack=x+1)，进入CLOSE_WAIT（关闭等待）状态<br>第三次挥手：服务器关闭客户端的连接，并发送一个FIN包(seq=y)，进入LAST_ACK（最后确认）状态<br>第四次挥手：客户端发回ACK(ack=y+1)包确认，发送完毕后，连接断开<br><img data-src="../../../../assets/img/70830403.png" alt></li><li>需要三次握手的原因<br><strong>为了防止失效的连接请求报文突然又传送到服务器产生错误</strong>。假如不三次握手，客户端发送连接确认给服务端就立即建立连接，如果有个连接请求阻塞了很久才到服务端，而此时本来已经关闭了连接的又重新建立了连接，然而等了很久都没有数据发送，这就会白白浪费资源</li><li>Http协议与Https协议</li></ol><ul><li>Http协议即<strong>超文本传输协议</strong>，是一种<strong>基于TCP的应用层协议</strong>，还是一种<strong>无状态协议</strong>。用于服务器和客户端的<strong>数据传输</strong>，客户端和服务器使用<strong>URL</strong>来建立连接和传输数据。客户端发送Http请求给服务器，服务器根据请求返回Html、文本或多媒体文件给客户端</li><li>Https协议是一种安全的Http协议。Http协议是一种明文传输的协议，存在被窃听，信息篡改等安全隐患，在Http协议的基础上加入了SSL或TLS协议，实现了数据的加密传输。因为加上了加密的协议，所以Https的响应速度会比Http慢很多。并不是所有情况下都需要使用Https协议，对于隐私的，重要的信息最好用Https协议，不重要的或者可以公开的信息就没有必要用Https协议</li></ul><ol start="4"><li>Http请求报文和响应报文</li></ol><ul><li>请求报文包括请求行，请求头，空行和请求体（GET请求没有请求体）</li><li>响应报文包括状态行，响应头，空行和响应体</li></ul><ol start="5"><li>Http请求常见状态码</li></ol><ul><li>200 OK，请求成功</li><li>404 Not Found，对应的URL上不存在资源</li><li>405 Method Not Allowed，请求不被允许，即请求方式错误</li><li>500 Internal Server Error，服务器内部错误，发现严重BUG，要及时修复</li></ul><ol start="6"><li>GET请求与POST请求的区别</li></ol><ul><li>GET请求一般用于<strong>获取</strong>服务器上的资源，是<strong>幂等</strong>的。POST请求一般用于对服务器上资源进行<strong>更新</strong>，<strong>非幂等</strong>的（幂等即每次请求返回结果一样）</li><li>GET请求没有请求体，<strong>请求参数跟是在URL后面</strong>的，所以使用GET请求时请求参数用户是可以直接看到的。POST请求有请求体，<strong>请求参数放在请求体</strong>，对用户是不可见的。相对来说POST请求比GET请求更安全</li><li>GET请求的参数<strong>长度有限制</strong>，这是因为URL长度有限导致的。POST请求的参数长度可以认为是<strong>无限制</strong>的</li></ul><ol start="7"><li>TCP 和 UDP的区别</li></ol><ul><li>TCP是一种<strong>面向连接的可靠</strong>传输协议，UDP是<strong>面向无连接的不可靠</strong>传输协议</li><li>TCP支持报文传输，还支持<strong>字节流</strong>的传输。而UDP协议只支持传输报文</li><li>TCP<strong>数据报格式比较复杂</strong>，传输过程数据不容易丢失和出错，而UDP<strong>数据报格式较为简单</strong>，容易丢失</li><li>TCP传输在接收端会进行重排，所以是<strong>有序</strong>的，UDP则<strong>不保证有序</strong></li><li>TCP<strong>速度慢</strong>，UDP<strong>速度快</strong></li><li>TCP有<strong>流量控制和拥塞控制</strong>，而UDP没有</li></ul><ol start="8"><li>应用层协议有哪些</li></ol><ul><li>DNS协议，域名解析系统。基于TCP和UDP的协议，通过DNS可以将域名转换成IP地址</li><li>SMTP协议，电子邮件协议。基于TCP的协议，通过SMTP协议可以发送电子邮件，SMTP通信的过程建立连接、邮件传送、连接释放</li><li>Telnet协议，远程终端协议。基于TCP的协议，通过Telnet协议可以对远程的终端进行控制</li><li>Http协议，超文本传输协议。基于TCP的协议，通过Http协议实现客户端和服务端的数据传输</li><li>FTP协议，文件传输协议。基于TCP的协议，通过FTP协议达到相互传输文件的效果</li></ul><ol start="9"><li>OSI参考模型与TCP/IP参考模型<br>(1) OSI参考模型由7层组成：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br>(2) TCP/IP参考模型由4层组成：主机-网络层、网际层、传输层、应用层<br>(3) 对应关系中，OSI参考模型的物理层、数据链路层对应TCP/IP的主机-网络层，网络层对应网际层，传输层对应传输层，会话层、表示层、应用层对应应用层</li><li>cookie 和 session的区别<br>(1) cookie由于把信息保存在客户端中。session把信息保存在服务器中<br>(2) cookie性能更高一点，速度较快，用户的信息存在各自的浏览器中，可以分担服务器的一部分存储工作。session速度较慢，所有用户的信息都存在服务器中，在高并发时必然影响服务器性能<br>(3) cookie有限制大小，在4K以内。session没有限制<br>(4) cookie对用户是透明的，安全性低，不重要的或者可以公开的信息保存在cookie。session对用户是不可见的，安全性高，重要信息应该保存在session</li><li>forward 和 redirect的区别<br>(1) forward为转发，进行forward操作后，请求URL不发生变化，并且会把请求的数据携带到下一个请求中。redirect是重定向，进行redirect操作后，请求URL是发生变化的<br>(2) forward是服务器内部请求转发，不可以请求到其它站点，redirect是服务器通知客户端重新请求，可以请求到其它站点<br>(3) forward速度快，redirect速度慢</li><li>DNS劫持和DNS污染<br>(1) DNS劫持：指用户访问一个域名时，DNS服务器故意将此地址指向一个错误的IP地址的行为。比如进入一个网站显示的却是另外一个网站的内容<br>(2) DNS污染：指用户访问一个域名时，国内的服务器(非DNS)监控到用户访问的已经被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址的行为。比如国内不能访问Google、YouTube等</li></ol><h3 id="5-TCP通信程序"><a href="#5-TCP通信程序" class="headerlink" title="5.TCP通信程序"></a>5.TCP通信程序</h3><h4 id="5-1-简单的TCP网络程序"><a href="#5-1-简单的TCP网络程序" class="headerlink" title="5.1 简单的TCP网络程序"></a>5.1 简单的TCP网络程序</h4><p><strong>TCP通信分析图解</strong></p><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。<blockquote><p>到此，客户端向服务端发送数据成功。<br><img data-src="../../../../assets/img/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt><br>自此，服务端向客户端回写数据。</p></blockquote></li><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">      <span class="comment">// =================回写数据=======================</span></span><br><span class="line">      <span class="comment">// 5. 通过 socket 获取输出流</span></span><br><span class="line">       OutputStream out = server.getOutputStream();</span><br><span class="line">      <span class="comment">// 6. 回写数据</span></span><br><span class="line">       out.write(<span class="string">"我很好,谢谢你"</span>.getBytes());</span><br><span class="line">      <span class="comment">// 7.关闭资源.</span></span><br><span class="line">      out.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.通过Scoket,获取输出流对象 </span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line">      <span class="comment">// ==============解析回写=========================</span></span><br><span class="line">      <span class="comment">// 4. 通过Scoket,获取 输入流对象</span></span><br><span class="line">      InputStream in = client.getInputStream();</span><br><span class="line">      <span class="comment">// 5. 读取数据数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> len = in.read(b);</span><br><span class="line">      System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 6. 关闭资源 .</span></span><br><span class="line">      in.close();</span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-文件上传"><a href="#5-2-文件上传" class="headerlink" title="5.2 文件上传"></a>5.2 文件上传</h4><p><strong>文件上传分析图解</strong></p><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li><li>【服务端】获取输出流，回写数据。</li><li>【客户端】获取输入流，解析回写数据。<br><img data-src="../../../../assets/img/6_upload2.jpg" alt></li></ol><p><strong>服务端实现:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4.=======信息回写===========================</span></span><br><span class="line">                    System.out.println(<span class="string">"back ........"</span>);</span><br><span class="line">                    OutputStream out = accept.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="comment">//================================</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭输出流,通知服务端,写出数据完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3. =====解析回写============</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        in.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">// ============================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-软件结构&quot;&gt;&lt;a href=&quot;#1-软件结构&quot; class=&quot;headerlink&quot; title=&quot;1.软件结构&quot;&gt;&lt;/a&gt;1.软件结构&lt;/h3&gt;&lt;h4 id=&quot;1-1-C-S结构&quot;&gt;&lt;a href=&quot;#1-1-C-S结构&quot; class=&quot;headerlink&quot; title=&quot;1.1 C/S结构&quot;&gt;&lt;/a&gt;1.1 C/S结构&lt;/h4&gt;&lt;p&gt;全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。&lt;br&gt;&lt;img data-src=&quot;../../../../assets/img/1_cs.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-B-S结构&quot;&gt;&lt;a href=&quot;#1-2-B-S结构&quot; class=&quot;headerlink&quot; title=&quot;1.2 B/S结构&quot;&gt;&lt;/a&gt;1.2 B/S结构&lt;/h4&gt;&lt;p&gt;全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javase" scheme="http://tonymua.top/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>网上商城项目总结(四.后台)</title>
    <link href="http://tonymua.top/36372/"/>
    <id>http://tonymua.top/36372/</id>
    <published>2021-05-08T13:19:59.248Z</published>
    <updated>2020-04-29T02:44:38.097Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-权限过滤器"><a href="#1-权限过滤器" class="headerlink" title="1.权限过滤器"></a>1.权限过滤器</h4><p>  项目运行过程,希望某些资源不能被未登录用户直接访问到,只有登录后才可以访问.例如:购物车页面,订单详情等资源.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriviledgeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest myRequest = (HttpServletRequest) request;</span><br><span class="line"><span class="comment">// 判断当前session中是否存在已经登录的用户</span></span><br><span class="line">User user = (User) myRequest.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</span><br><span class="line"><span class="comment">// 如果存在,放行</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果不存在,进入提示页面</span></span><br><span class="line">myRequest.setAttribute(<span class="string">"msg"</span>, <span class="string">"请先登录"</span>);</span><br><span class="line"><span class="comment">// 转入到提示页面</span></span><br><span class="line">myRequest.getRequestDispatcher(<span class="string">"/jsp/info.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>PS:一个过滤器可以配置多个不同的路径</strong></p><h4 id="2-后台查看所有分类"><a href="#2-后台查看所有分类" class="headerlink" title="2.后台查看所有分类"></a>2.后台查看所有分类</h4><h5 id="步骤实现"><a href="#步骤实现" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作  </p><p> 创建AdminCategoryServlet    修改链接  left.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.add(<span class="string">'010201'</span>,<span class="string">'0102'</span>,<span class="string">'分类管理'</span>,    <span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminCategoryServlet?method=findAllCats'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br></pre></td></tr></table></figure><p>2.AdminCategoryServlet___&gt;findAllCats</p><p>获取全部分类信息   全部分类信息放入request   转发到/admin/category/list.jsp</p><p>3.service_dao</p><p>4.在/admin/category/list.jsp获取分类信息,完成响应</p><h6 id="AdminCategoryServlet"><a href="#AdminCategoryServlet" class="headerlink" title="AdminCategoryServlet:"></a>AdminCategoryServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCats</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取全部分类信息</span></span><br><span class="line">CategoryServsice categoryServsice = <span class="keyword">new</span> CategoryServiceImpl();</span><br><span class="line">List&lt;Category&gt; list = categoryServsice.getAllCats();</span><br><span class="line"><span class="comment">// 全部分类信息放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"allCats"</span>, list);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/admin/category/list.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CategoryServiceImpl"><a href="#CategoryServiceImpl" class="headerlink" title="CategoryServiceImpl:"></a>CategoryServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCats</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> categoryDao.getAllCats();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CategoryDaoImpl"><a href="#CategoryDaoImpl" class="headerlink" title="CategoryDaoImpl:"></a>CategoryDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCats</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from category"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Category&gt;(Category<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-后台添加分类信息"><a href="#3-后台添加分类信息" class="headerlink" title="3.后台添加分类信息:"></a>3.后台添加分类信息:</h4><h5 id="步骤实现-1"><a href="#步骤实现-1" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1./admin/category/add.jsp</p><p>设置form __&gt;method ,action     设置form表单下各种input标签的name属性</p><p>2.AdminCategoryServlet__&gt;addCategory</p><p>获取分类名称    创建分类ID    调用业务层添加分类功能    重定向到查询全部分类信息</p><p>3.CategoryService___&gt;CategoryDaoImp</p><p><strong>PS:要在CategoryService及时更新redis中缓存的信息</strong></p><p>总结: 虽然使用redis可以提升项目性能,但是带来开发量.  开发中,如果对redis缓存中的数据发生了更新操作,及时更新redis缓存信息,否则会造成数据不统一问题.</p><h6 id="AdminCategoryServlet-1"><a href="#AdminCategoryServlet-1" class="headerlink" title="AdminCategoryServlet:"></a>AdminCategoryServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addCategory</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取分类名称</span></span><br><span class="line">String cname = request.getParameter(<span class="string">"cname"</span>);</span><br><span class="line"><span class="comment">//创建分类ID</span></span><br><span class="line">String cid = UUIDUtils.getCode();</span><br><span class="line">Category category=<span class="keyword">new</span> Category();</span><br><span class="line">category.setCname(cname);</span><br><span class="line">category.setCid(cid);</span><br><span class="line"><span class="comment">//调用业务层添加分类功能</span></span><br><span class="line">CategoryServsice categoryServsice=<span class="keyword">new</span> CategoryServiceImpl();</span><br><span class="line">categoryServsice.addCategory(category);</span><br><span class="line"><span class="comment">//重定向到查询分类信息</span></span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/AdminCategoryServlet?method=findAllCats"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CategoryServiceImpl-1"><a href="#CategoryServiceImpl-1" class="headerlink" title="CategoryServiceImpl:"></a>CategoryServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCategory</span><span class="params">(Category category)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//本质是向MySQL插入一条数据</span></span><br><span class="line">categoryDao.addCategory(category);</span><br><span class="line"><span class="comment">//更新redis缓存</span></span><br><span class="line">Jedis jedis=JedisUtils.getJedis();</span><br><span class="line">jedis.del(<span class="string">"allCats"</span>);</span><br><span class="line">JedisUtils.closeJedis(jedis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CategoryDaoImpl-1"><a href="#CategoryDaoImpl-1" class="headerlink" title="CategoryDaoImpl:"></a>CategoryDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCategory</span><span class="params">(Category category)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"insert into category values(?,?)"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">queryRunner.update(sql,category.getCid(),category.getCname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-后台分页查看所有商品"><a href="#4-后台分页查看所有商品" class="headerlink" title="4.后台分页查看所有商品"></a>4.后台分页查看所有商品</h4><h5 id="步骤实现-2"><a href="#步骤实现-2" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.修改连接  left.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.add(<span class="string">'010401'</span>,<span class="string">'0104'</span>,<span class="string">'商品管理'</span>,</span><br><span class="line"><span class="string">'/store_v5/AdminProductServletmethod=findAllProductsWithPage&amp;num=1'</span>,<span class="string">'提示信息'</span>,<span class="string">'mainFrame'</span>);</span><br></pre></td></tr></table></figure><p>2AdminProductServlet___&gt;findAllProductsWithPage</p><p>获取当前页    调用业务层查全部商品信息返回PageModel    将PageModel放入request    转发到/admin/product/list.jsp</p><p>3.ProductService</p><p>创建PageModel对象    关联集合    关联URL</p><p>4./admin/product/list.jsp获取商品信息和分页数据</p><h6 id="AdminProductServlet"><a href="#AdminProductServlet" class="headerlink" title="AdminProductServlet:"></a>AdminProductServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllProductsWithPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取当前页</span></span><br><span class="line"><span class="keyword">int</span> curNum = Integer.parseInt(request.getParameter(<span class="string">"num"</span>));</span><br><span class="line"><span class="comment">// 调用业务层查询全部商品信息返回PageModel</span></span><br><span class="line">ProductService productService = <span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line">PageModel pm = productService.findAllProductsWithPage(curNum);</span><br><span class="line"><span class="comment">// 将PageModel放入Request</span></span><br><span class="line">request.setAttribute(<span class="string">"page"</span>, pm);</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/admin/product/list.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl"><a href="#ProductServiceImpl" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageModel <span class="title">findAllProductsWithPage</span><span class="params">(<span class="keyword">int</span> curNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="keyword">int</span> totalRecords=productDao.findTotalRecords();</span><br><span class="line">PageModel pm=<span class="keyword">new</span> PageModel(curNum, totalRecords, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//2.关联集合</span></span><br><span class="line">List&lt;Product&gt; list=productDao.findAllProductsWithPage(pm.getStartIndex(),pm.getPageSize());</span><br><span class="line">pm.setList(list);</span><br><span class="line"><span class="comment">//3.关联url</span></span><br><span class="line">pm.setUrl(<span class="string">"AdminProductServlet?method=findAllProductsWithPage"</span>);</span><br><span class="line"><span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl"><a href="#ProductDaoImpl" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotalRecords</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select count(*) from product"</span>;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Long num = (Long) qr.query(sql, <span class="keyword">new</span> ScalarHandler());</span><br><span class="line"><span class="keyword">return</span> num.intValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findAllProductsWithPage</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product order by pdate desc limit ? , ?"</span>;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>), <span class="title">startIndex</span>, <span class="title">pageSize</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;page.list&#125;"</span> <span class="keyword">var</span>=<span class="string">"p"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr onmouseover=<span class="string">"this.style.backgroundColor = 'white'"</span></span><br><span class="line">onmouseout=<span class="string">"this.style.backgroundColor = '#F5FAFE';"</span>&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"18%"</span>&gt;</span><br><span class="line">$&#123; status.count &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"17%"</span>&gt;</span><br><span class="line">&lt;img width=<span class="string">"40"</span> height=<span class="string">"45"</span> src=<span class="string">"$&#123; pageContext.request.contextPath &#125;/$&#123;p.pimage&#125;"</span>&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"17%"</span>&gt;</span><br><span class="line">$&#123; p.pname &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"17%"</span>&gt;</span><br><span class="line">$&#123; p.shop_price &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"17%"</span>&gt;</span><br><span class="line">是(<span class="number">1</span>)/否(<span class="number">0</span>)</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span> style=<span class="string">"HEIGHT: 22px"</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"$&#123;pageContext.request.contextPath&#125;/img/admin/i_edit.gif"</span> border=<span class="string">"0"</span> style=<span class="string">"CURSOR: hand"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;td align=<span class="string">"center"</span> style=<span class="string">"HEIGHT: 22px"</span>&gt;</span><br><span class="line">&lt;%--下架 pushdown --%&gt;</span><br><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"$&#123;pageContext.request.contextPath&#125;/img/admin/i_del.gif"</span> width=<span class="string">"16"</span> height=<span class="string">"16"</span> border=<span class="string">"0"</span> style=<span class="string">"CURSOR: hand"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h4 id="5-后台添加商品"><a href="#5-后台添加商品" class="headerlink" title="5.后台添加商品"></a>5.后台添加商品</h4><h5 id="步骤实现-3"><a href="#步骤实现-3" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Form method=”post”   </span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"file"</span>/&gt;</span><br><span class="line"></span><br><span class="line">Form enctype=”multiprt/form-data”</span><br></pre></td></tr></table></figure><p> /admin/product/list.jsp ,修改了 addProduct() 函数中的链接</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href = <span class="string">"$&#123;pageContext.request.contextPath&#125;/AdminProductServlet?method=addProductUI"</span>;</span><br></pre></td></tr></table></figure><p>2.导入commons-fileupload-1.2.1.rar之后</p><p>3.执行很简单的3行语句</p><p>4.获取到一个集合(<fileitem>对象)   将每对分割线中间的内容封装在FileItem对象上.</fileitem></p><p>5.遍历集合</p><p>6.如果当前的FileItem对象是普通项  将普通项上name属性的值作为键,将获取到的内容作为值,放入MAP中</p><p>7.如果当前的FileItem对象是上传项</p><p>  通过FileItem获取到输入流对象,通过输入流可以获取到图片二进制数据</p><p>  在服务端创建一个空文件(后缀必须和上传到服务端的文件名后缀一致)</p><p>  建立和空文件对应的输出流</p><p>  将输入流中的数据刷到输出流中</p><p>  释放资源</p><p>  向map中存入一个键值对的数据</p><p>8.利用BeanUtils将MAP中的数据填充到user对象上</p><p>9.调用servcie_dao将user上携带的数据存入数据仓库,重定向到查询全部商品信息路径</p><p>PS:1.如果文件重名发生覆盖问题    UUID</p><p>​     2.同目录下文件/目录过多,性能问题   在images下最多创建16个目录,任意一个目录进入之后最多创建16个目录,</p><p>   最多创建8层目录.</p><h6 id="AdminProductServlet-1"><a href="#AdminProductServlet-1" class="headerlink" title="AdminProductServlet:"></a>AdminProductServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addProduct</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 存储表单中数据</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="comment">//携带表单中的数据向servcie,dao</span></span><br><span class="line">Product product=<span class="keyword">new</span> Product();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 利用request.getInputStream();获取到请求体中全部数据,进行拆分和封装</span></span><br><span class="line">DiskFileItemFactory fac = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(fac);</span><br><span class="line">List&lt;FileItem&gt; list = upload.parseRequest(request);</span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line"><span class="keyword">for</span> (FileItem item : list) &#123;</span><br><span class="line"><span class="keyword">if</span> (item.isFormField()) &#123;</span><br><span class="line"><span class="comment">// 如果当前的FileItem对象是普通项</span></span><br><span class="line"><span class="comment">// 将普通项上name属性的值作为键,将获取到的内容作为值,放入MAP中</span></span><br><span class="line"><span class="comment">// &#123;username&lt;==&gt;tom,password&lt;==&gt;1234&#125;</span></span><br><span class="line">map.put(item.getFieldName(), item.getString(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前的FileItem对象是上传项</span></span><br><span class="line"><span class="comment">// 获取到原始的文件名称</span></span><br><span class="line">String oldFileName = item.getName();</span><br><span class="line"><span class="comment">//获取到要保存文件的名称 </span></span><br><span class="line">String newFileName = UploadUtils.getUUIDName(oldFileName);</span><br><span class="line"><span class="comment">//通过FileItem获取到输入流对象,通过输入流可以获取到图片二进制数据</span></span><br><span class="line">InputStream is = item.getInputStream();</span><br><span class="line"><span class="comment">//获取到当前项目下products/3下的真实路径</span></span><br><span class="line">String realPath = getServletContext().getRealPath(<span class="string">"/products/3/"</span>);</span><br><span class="line">String dir = UploadUtils.getDir(newFileName);</span><br><span class="line">String path=realPath+dir;</span><br><span class="line"><span class="comment">//内存中声明一个目录</span></span><br><span class="line">File newDir=<span class="keyword">new</span> File(path);</span><br><span class="line"><span class="keyword">if</span> (!newDir.exists()) &#123;</span><br><span class="line">newDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在服务端创建一个空文件(后缀必须和上传到服务端的文件名后缀一致)</span></span><br><span class="line">File finalFile=<span class="keyword">new</span> File(newDir,newFileName);</span><br><span class="line"><span class="keyword">if</span> (!finalFile.exists()) &#123;</span><br><span class="line">finalFile.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建立和空文件对应的输出流</span></span><br><span class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(finalFile);</span><br><span class="line"><span class="comment">//将输入流中的数据刷到输出流中</span></span><br><span class="line">IOUtils.copy(is, os);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">IOUtils.closeQuietly(is);</span><br><span class="line">IOUtils.closeQuietly(os);</span><br><span class="line"><span class="comment">//向map中存入一个键值对的数据 userhead&lt;===&gt; /image/11.bmp</span></span><br><span class="line">map.put(<span class="string">"pimage"</span>,<span class="string">"/products/3/"</span>+dir+<span class="string">"/"</span> +newFileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用BeanUtils将MAP中的数据填充到Product对象上</span></span><br><span class="line">BeanUtils.populate(product, map);</span><br><span class="line">product.setPid(UUIDUtils.getId());</span><br><span class="line">product.setPdate(<span class="keyword">new</span> Date());</span><br><span class="line">product.setPflag(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//调用servcie_dao将user上携带的数据存入数据仓库,重定向到查询全部商品信息路径</span></span><br><span class="line">ProductService productService=<span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line">productService.saveProduct(product);</span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/AdminProductServlet?method=findAllProductsWithPage&amp;num=1"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl-1"><a href="#ProductServiceImpl-1" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveProduct</span><span class="params">(Product product)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">productDao.saveProduct(product);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl-1"><a href="#ProductDaoImpl-1" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveProduct</span><span class="params">(Product product)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"INSERT INTO product VALUES(?,?,?,?,?,?,?,?,?,?)"</span>;</span><br><span class="line">QueryRunner qr=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Object[] params=&#123;product.getPid(),product.getPname(),product.getMarket_price(),product.getShop_price(),product.getPimage(),product.getPdate(),product.getIs_hot(),product.getPdesc(),product.getPflag(),product.getCid()&#125;;</span><br><span class="line">qr.update(sql, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-工厂模式解耦"><a href="#6-工厂模式解耦" class="headerlink" title="6.工厂模式解耦"></a>6.工厂模式解耦</h4><p>​    我们当前的开发末实现,service层对DAO层有依赖,例如在UserServcieImp中出现了 UserDao userDao=new UserDaoImp(); 这条语句.  </p><p>​    假如我们做了一个产品OA,但是我们没有办法确定客户采用什么样的数据库,此时我们需要为当前项目开发不同的数据库的版本,例如为oracle,sqlserver,mysql分别开发不同的DAO的实现,但是在项目具体的运行时,我们由无法确定到底执行那种版本. 此时我们可以通过配置文件来配置dao层的各个具体的实现.</p><h6 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml:"></a>application.xml:</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CategoryDao"</span> <span class="attr">class</span>=<span class="string">"dao.daoimpl.CategoryDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserDao"</span> <span class="attr">class</span>=<span class="string">"dao.daoimpl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ProductDao"</span> <span class="attr">class</span>=<span class="string">"dao.daoimpl.ProductDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory:"></a>BeanFactory:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">creatObject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 通过传递来的name获取application.xml中name对应的class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到Document对象</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="comment">// 获取application.xml文件的输入流 (application.xml必须位于src下)</span></span><br><span class="line">InputStream is = BeanFactory.class.getClassLoader().getResourceAsStream("application.xml");</span><br><span class="line">Document document = reader.read(is);</span><br><span class="line"><span class="comment">// 通过Document对象获取根节点beans</span></span><br><span class="line">Element rootElement = document.getRootElement();</span><br><span class="line"><span class="comment">// 通过根节点获取到根节点下所有的子节点 bean,返回集合</span></span><br><span class="line">List&lt;Element&gt; list = rootElement.elements();</span><br><span class="line"><span class="comment">// 遍历集合,判断每个元素上的id的值是否和当前的name一致</span></span><br><span class="line"><span class="keyword">for</span> (Element ele : list) &#123;</span><br><span class="line"><span class="comment">// ele相当于beans节点下的每个bean</span></span><br><span class="line"><span class="comment">// 获取到当前节点的id属性值</span></span><br><span class="line"><span class="comment">// 如果一致,获取到当前元素上class属性值</span></span><br><span class="line">String id = ele.attributeValue(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">if</span> (id.equals(name)) &#123;</span><br><span class="line">String str = ele.attributeValue(<span class="string">"class"</span>);</span><br><span class="line"><span class="comment">// 通过反射创建对象并且返回</span></span><br><span class="line">Class clazz = Class.forName(str);</span><br><span class="line"><span class="comment">// 利用class值通过反射创建对象返回</span></span><br><span class="line"><span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运用"><a href="#运用" class="headerlink" title="运用:"></a>运用:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CategoryDao categoryDao = (CategoryDao) BeanFactory.creatObject(<span class="string">"CategoryDao"</span>);</span><br></pre></td></tr></table></figure><h4 id="7-后台分页查看所有商品"><a href="#7-后台分页查看所有商品" class="headerlink" title="7.后台分页查看所有商品"></a>7.后台分页查看所有商品</h4><h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h6><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d.add(<span class="string">'010501'</span>,<span class="string">'0105'</span>,<span class="string">'订单管理'</span>,<span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=findOrdersWithPage&amp;num=1'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br><span class="line">d.add(<span class="string">'010502'</span>,<span class="string">'0105'</span>,<span class="string">'未付款的订单'</span>,<span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=findOrdersWithPage&amp;num=1&amp;state=1'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br><span class="line">d.add(<span class="string">'010503'</span>,<span class="string">'0105'</span>,<span class="string">'已付款订单'</span>,<span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=findOrdersWithPage&amp;num=1&amp;state=2'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br><span class="line">d.add(<span class="string">'010504'</span>,<span class="string">'0105'</span>,<span class="string">'已发货的订单'</span>,<span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=findOrdersWithPage&amp;num=1&amp;state=3'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br><span class="line">d.add(<span class="string">'010505'</span>,<span class="string">'0105'</span>,<span class="string">'已完成的订单'</span>,<span class="string">'$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=findOrdersWithPage&amp;num=1&amp;state=4'</span>,<span class="string">''</span>,<span class="string">'mainFrame'</span>);</span><br></pre></td></tr></table></figure><h6 id="AdminOrderServlet"><a href="#AdminOrderServlet" class="headerlink" title="AdminOrderServlet:"></a>AdminOrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findOrdersWithPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 接收状态</span></span><br><span class="line">String str = request.getParameter(<span class="string">"state"</span>);</span><br><span class="line"><span class="comment">// 获取当前页</span></span><br><span class="line"><span class="keyword">int</span> curNum = Integer.parseInt(request.getParameter(<span class="string">"num"</span>));</span><br><span class="line"><span class="comment">// 调用业务层查询全部订单信息返回PageModel</span></span><br><span class="line">OrderService orderService = <span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == str || <span class="string">""</span>.equals(str)) &#123;</span><br><span class="line">PageModel pm = orderService.findOrdersWithPage(curNum);</span><br><span class="line"><span class="comment">// 将PageModel放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"page"</span>, pm);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PageModel pm = orderService.findOrdersWithPage(curNum, str);</span><br><span class="line"><span class="comment">// 将PageModel放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"page"</span>, pm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/admin/order/list.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderServiceImpl"><a href="#OrderServiceImpl" class="headerlink" title="OrderServiceImpl:"></a>OrderServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageModel <span class="title">findOrdersWithPage</span><span class="params">(<span class="keyword">int</span> curNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="keyword">int</span> totalRecords = orderDao.findTotalRecords();</span><br><span class="line">PageModel pm = <span class="keyword">new</span> PageModel(curNum, totalRecords, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 2.关联集合</span></span><br><span class="line">List&lt;Order&gt; list = orderDao.findOrdersWithPage(pm.getStartIndex(), pm.getPageSize());</span><br><span class="line">pm.setList(list);</span><br><span class="line"><span class="comment">// 3.关联url</span></span><br><span class="line">pm.setUrl(<span class="string">"AdminOrderServlet?method=findOrdersWithPage"</span>);</span><br><span class="line"><span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageModel <span class="title">findOrdersWithPage</span><span class="params">(<span class="keyword">int</span> curNum, String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="keyword">int</span> totalRecords = orderDao.findTotalRecords();</span><br><span class="line">PageModel pm = <span class="keyword">new</span> PageModel(curNum, totalRecords, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 2.关联集合</span></span><br><span class="line">List&lt;Order&gt; list = orderDao.findOrdersWithPage(pm.getStartIndex(), pm.getPageSize(), str);</span><br><span class="line">pm.setList(list);</span><br><span class="line"><span class="comment">// 3.关联url</span></span><br><span class="line">pm.setUrl(<span class="string">"AdminOrderServlet?method=findOrdersWithPage"</span> + <span class="string">"&amp;state="</span> + str);</span><br><span class="line"><span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderDaoImpl"><a href="#OrderDaoImpl" class="headerlink" title="OrderDaoImpl:"></a>OrderDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrdersWithPage</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from orders order by ordertime desc limit ?,?"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Order&gt;(Order<span class="class">.<span class="keyword">class</span>),<span class="title">startIndex</span>,<span class="title">pageSize</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrdersWithPage</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> pageSize, String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from orders where state=? order by ordertime desc limit ?,? "</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Order&gt;(Order<span class="class">.<span class="keyword">class</span>),<span class="title">str</span>,<span class="title">startIndex</span>,<span class="title">pageSize</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSP-1"><a href="#JSP-1" class="headerlink" title="JSP:"></a>JSP:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;page.list &#125;"</span> <span class="keyword">var</span>=<span class="string">"o"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;tr onmouseover=<span class="string">"this.style.backgroundColor = 'white'"</span></span><br><span class="line">onmouseout=<span class="string">"this.style.backgroundColor = '#F5FAFE';"</span>&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"18%"</span>&gt;</span><br><span class="line">$&#123;status.count &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"20%"</span>&gt;</span><br><span class="line">$&#123;o.oid &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"5%"</span>&gt;</span><br><span class="line">$&#123;o.total &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"5%"</span>&gt;</span><br><span class="line">$&#123;o.name &#125;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">"CURSOR: hand; HEIGHT: 22px"</span> align=<span class="string">"center"</span></span><br><span class="line">width=<span class="string">"5%"</span>&gt;</span><br><span class="line">&lt;c:if test="$&#123;o.state==1 &#125;"&gt;未付款&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;o.state==2 &#125;"&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/AdminOrderServlet?method=updateOrderByOid&amp;oid=$&#123;o.oid&#125;"&gt;去发货&lt;/a&gt;&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;o.state==3&#125;"&gt;已发货&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;o.state==4 &#125;"&gt;订单完成&lt;/c:if&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span> style=<span class="string">"HEIGHT: 22px"</span> width=<span class="string">"60%"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"订单详情"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"myClass"</span> id=<span class="string">"$&#123;o.oid &#125;"</span>/&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h4 id="8-异步显示订单详情"><a href="#8-异步显示订单详情" class="headerlink" title="8.异步显示订单详情"></a>8.异步显示订单详情</h4><h5 id="步骤实现-4"><a href="#步骤实现-4" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.将当前功能要实现最终效果先实现(静态效果)</p><p>2.用户点击订单详情按钮,向服务端发起ajax请求,向服务端传递订单id</p><p>3.服务端获取到订单ID,查询这个订单下所有的订单项以及订单项对应的商品信息,返回集合</p><p>4.将返回的集合转换为JSON格式字符串,响应到客户端</p><p>5.调试,排除2端错误</p><p>6.在客户端获取到服务端想回会的JSON格式的数据,将这些数据绑定在页面上</p><h6 id="AdminOrderServlet-1"><a href="#AdminOrderServlet-1" class="headerlink" title="AdminOrderServlet:"></a>AdminOrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findOrderByOidWithAjax</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//服务端获取到订单ID</span></span><br><span class="line">String oid = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">//查询这个订单下所有的订单项以及订单项对应的商品信息,返回集合</span></span><br><span class="line">OrderService orderService=<span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line">Order order = orderService.findOrderByOid(oid);</span><br><span class="line"><span class="comment">//将返回的集合转换为JSON格式字符串,响应到客户端</span></span><br><span class="line">String jsonStr=JSONArray.fromObject(order.getList()).toString();</span><br><span class="line"><span class="comment">//响应到客户端</span></span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().println(jsonStr);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript:"></a>Javascript:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//页面加载完毕之后,获取样式名称为myClass一批元素,为期绑定点击事件</span></span><br><span class="line">$(<span class="string">".myClass"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取当前订单id</span></span><br><span class="line"><span class="keyword">var</span> id=<span class="keyword">this</span>.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前按钮文字</span></span><br><span class="line"><span class="keyword">var</span> txt=<span class="keyword">this</span>.value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PS:获取到当前元素的下一个对象table</span></span><br><span class="line"><span class="keyword">var</span> $tb=$(<span class="keyword">this</span>).next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(txt==<span class="string">"订单详情"</span>)&#123;</span><br><span class="line"><span class="comment">//向服务端发送Ajax请求,将当前的订单id传递到服务端</span></span><br><span class="line"><span class="keyword">var</span> url=<span class="string">"/store_v5/AdminOrderServlet"</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="string">"method"</span>:<span class="string">"findOrderByOidWithAjax"</span>,<span class="string">"id"</span>:id&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.post(url,obj,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var $tb=$(this).next();  //此处坑爹,错误的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//alert(data);</span></span><br><span class="line"><span class="comment">//清除内容</span></span><br><span class="line">$tb.html(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">var</span> th=<span class="string">"&lt;tr&gt;&lt;th&gt;商品&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;单价&lt;/th&gt;&lt;th&gt;数量&lt;/th&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">$tb.append(th);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用JQUERY遍历响应到客户端的数据</span></span><br><span class="line">$.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">i,obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> td=<span class="string">"&lt;tr&gt;&lt;td&gt;&lt;img src='/store_v5/"</span>+obj.product.pimage+<span class="string">"' width='50px'/&gt;&lt;/td&gt;&lt;td&gt;"</span>+obj.product.pname+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+obj.product.shop_price+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+obj.quantity+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">$tb.append(td);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,<span class="string">"json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.value=<span class="string">"关闭"</span>;</span><br><span class="line"><span class="comment">//$(this).val("关闭");</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value=<span class="string">"订单详情"</span>;</span><br><span class="line"><span class="comment">//清空表格内容</span></span><br><span class="line">$tb.html(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-更新订单状态"><a href="#9-更新订单状态" class="headerlink" title="9.更新订单状态"></a>9.更新订单状态</h4><h5 id="步骤实现-5"><a href="#步骤实现-5" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作  admin/order/list.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="/store_v5/AdminOrderServlet?method=updateOrderByOid&amp;oid=$&#123;o.oid&#125;"&gt;发货&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.AdminOrderServlet___&gt;updateOrderByOid</p><p>获取订单ID    根据订单ID查询订单    设置订单状态    修改订单信息    重新定向到查询已发货订单</p><p>3.service__&gt;dao</p><h6 id="AdminOrderServlet-2"><a href="#AdminOrderServlet-2" class="headerlink" title="AdminOrderServlet:"></a>AdminOrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateOrderByOid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取订单id</span></span><br><span class="line">String oid = request.getParameter(<span class="string">"oid"</span>);</span><br><span class="line"><span class="comment">//根据订单id查询订单</span></span><br><span class="line">OrderService orderService=<span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line">Order order = orderService.findOrderByOid(oid);</span><br><span class="line"><span class="comment">//设置订单状态</span></span><br><span class="line">order.setState(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//修改订单信息</span></span><br><span class="line">orderService.updateOrder(order);</span><br><span class="line"><span class="comment">//重新定向到查询已发货订单</span></span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/AdminOrderServlet?method=findOrdersWithPage&amp;num=1&amp;state=3"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-权限过滤器&quot;&gt;&lt;a href=&quot;#1-权限过滤器&quot; class=&quot;headerlink&quot; title=&quot;1.权限过滤器&quot;&gt;&lt;/a&gt;1.权限过滤器&lt;/h4&gt;&lt;p&gt;  项目运行过程,希望某些资源不能被未登录用户直接访问到,只有登录后才可以访问.例如:购物车页面,订单详情等资源.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PriviledgeFilter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Filter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ServletRequest request, ServletResponse response, FilterChain chain)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		HttpServletRequest myRequest = (HttpServletRequest) request;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 判断当前session中是否存在已经登录的用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		User user = (User) myRequest.getSession().getAttribute(&lt;span class=&quot;string&quot;&gt;&quot;loginUser&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; != user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果存在,放行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			chain.doFilter(request, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果不存在,进入提示页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myRequest.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;请先登录&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 转入到提示页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myRequest.getRequestDispatcher(&lt;span class=&quot;string&quot;&gt;&quot;/jsp/info.jsp&quot;&lt;/span&gt;).forward(request, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(FilterConfig fConfig)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>网上商城项目总结(二.商品分类和详情)</title>
    <link href="http://tonymua.top/48295/"/>
    <id>http://tonymua.top/48295/</id>
    <published>2021-05-08T13:19:59.246Z</published>
    <updated>2020-04-29T02:44:38.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-获取首页分类信息"><a href="#1-获取首页分类信息" class="headerlink" title="1.获取首页分类信息"></a>1.获取首页分类信息</h4><h5 id="步骤实现"><a href="#步骤实现" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.导入jar包</p><p>2.导入JedisUtils工具类(修改参数127.0.0.1)</p><p>3.启动windows版本的redis</p><p>4.实现CategoryServlet__&gt;findAllCats   </p><p>在redis中获取全部分类信息  </p><p>如果无法获取分类信息,   查询DB中的分类,转换为JSON格式字符串,  将JSON格式字符串向redis缓存一份,之后将JSON格式数据响应到客户端</p><p>如果可以获取到分类信息</p><p>直接响应即可</p><h6 id="CategoryServlet"><a href="#CategoryServlet" class="headerlink" title="CategoryServlet:"></a>CategoryServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//findAllCats</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCats</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//在redis中获取全部分类信息</span></span><br><span class="line">Jedis jedis=JedisUtils.getJedis();</span><br><span class="line">String jsonStr=jedis.get(<span class="string">"allCats"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>==jsonStr||<span class="string">""</span>.equals(jsonStr))&#123;</span><br><span class="line"><span class="comment">//调用业务层获取全部分类</span></span><br><span class="line">CategoryService categoryService=<span class="keyword">new</span> CategoryServiceImp();</span><br><span class="line">List&lt;Category&gt; list = categoryService.getAllCats();</span><br><span class="line"><span class="comment">//将全部分类转换为JSON格式的数据</span></span><br><span class="line">jsonStr=JSONArray.fromObject(list).toString();</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"><span class="comment">//将获取到的JSON格式的数据存入redis</span></span><br><span class="line">jedis.set(<span class="string">"allCats"</span>, jsonStr);</span><br><span class="line">System.out.println(<span class="string">"redis缓存中没有数据"</span>);</span><br><span class="line"><span class="comment">//将全部分类信息响应到客户端</span></span><br><span class="line"><span class="comment">//告诉浏览器本次响应的数据是JSON格式的字符串</span></span><br><span class="line">resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">resp.getWriter().print(jsonStr);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"redis缓存中有数据"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将全部分类信息响应到客户端</span></span><br><span class="line"><span class="comment">//告诉浏览器本次响应的数据是JSON格式的字符串</span></span><br><span class="line">resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">resp.getWriter().print(jsonStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JedisUtils.closeJedis(jedis);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="CategoryServiceImpl"><a href="#CategoryServiceImpl" class="headerlink" title="CategoryServiceImpl:"></a>CategoryServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCats</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">CategoryDao categoryDao=<span class="keyword">new</span> CategoryDaoImpl();</span><br><span class="line"><span class="keyword">return</span> categoryDao.getAllCats();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CategoryDaoImpl"><a href="#CategoryDaoImpl" class="headerlink" title="CategoryDaoImpl:"></a>CategoryDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCats</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from category"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Category&gt;(Category<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JedisUtils"><a href="#JedisUtils" class="headerlink" title="JedisUtils:"></a>JedisUtils:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建连接池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisPoolConfig config;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisPool pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">config=<span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">30</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">pool=<span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pool.getResource();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeJedis</span><span class="params">(Jedis j)</span></span>&#123;</span><br><span class="line">j.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="javascript"><a href="#javascript" class="headerlink" title="javascript:"></a>javascript:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//向服务端CategoryServlet_getAllCats发起ajax请求,服务端经过处理</span></span><br><span class="line"><span class="comment">//将所有分类信息以JSON格式的数据返回,获取到返回的所有分类绑定在页面的显示分类区域</span></span><br><span class="line"><span class="keyword">var</span> url=<span class="string">"/store_v5/CategoryServlet"</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="string">"method"</span>:<span class="string">"findAllCats"</span>&#125;;</span><br><span class="line">$.post(url,obj,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(data);</span></span><br><span class="line"><span class="comment">//获取到服务端响应回的数据 遍历data中的JSON数组,动态的显示分类区域</span></span><br><span class="line">$.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">i,obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> li=<span class="string">"&lt;li&gt;&lt;a href='/store_v5/ProductServlet?method=findProductsByCidWithPage&amp;num=1&amp;cid="</span>+obj.cid+<span class="string">"'&gt;"</span>+obj.cname+<span class="string">"&lt;/a&gt;&lt;/li&gt;"</span>;</span><br><span class="line">$(<span class="string">"#myUL"</span>).append(li);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,<span class="string">"json"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-首页热门商品和最新商品显示"><a href="#2-首页热门商品和最新商品显示" class="headerlink" title="2.首页热门商品和最新商品显示"></a>2.首页热门商品和最新商品显示</h4><h5 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句:"></a>SQL语句:</h5><p>#查询商品表中最新的9件商品信息</p><p>SELECT * FROM product WHERE pflag=0 ORDER BY pdate DESC LIMIT 0 ,9 </p><p>#查询商品表中最热,最新的9件商品信息</p><p>SELECT * FROM product WHERE pflag=0 AND is_hot=1 ORDER BY pdate DESC LIMIT 0 ,9 </p><h5 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析:"></a>步骤分析:</h5><p>1.IndexServlet___&gt;execute    //调用业务层查询最新商品,查询最热商品,返回2个集合    //将2个集合放入到request      //转发到真实的首页</p><p>2.建立商品模块相关程序  ProductServlet  ProductService ProductServiceImp ProductDao ProductDaoImp Product</p><p>3.调用service,dao   </p><p>4./jsp/index.jsp  获取最新/最热9件商品信息</p><h6 id="IndexServlet"><a href="#IndexServlet" class="headerlink" title="IndexServlet:"></a>IndexServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 调用业务层查询最新商品,最热商品</span></span><br><span class="line">ProductService productService = <span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line">List&lt;Product&gt; list01 = productService.findHots();</span><br><span class="line">List&lt;Product&gt; list02 = productService.findNews();</span><br><span class="line"><span class="comment">// 将2个集合放入到request</span></span><br><span class="line">request.setAttribute(<span class="string">"hots"</span>, list01);</span><br><span class="line">request.setAttribute(<span class="string">"news"</span>, list02);</span><br><span class="line"><span class="comment">// 转发到真实的首页</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/index.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl"><a href="#ProductServiceImpl" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findHots</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> productDao.findHots();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findNews</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> productDao.findNews();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl"><a href="#ProductDaoImpl" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findHots</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product where pflag=0 and is_hot=1 ORDER BY pdate DESC LIMIT 0,9"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findNews</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product where pflag=0 ORDER BY pdate DESC LIMIT 0,9"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;hots &#125;"</span> <span class="keyword">var</span>=<span class="string">"p"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-2"</span> style=<span class="string">"text-align:center;height:200px;padding:10px 0px;"</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/ProductServlet?method=findProductByPid&amp;pid=$&#123;p.pid&#125;"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"$&#123;pageContext.request.contextPath&#125;/$&#123;p.pimage&#125;"</span> width=<span class="string">"130"</span> height=<span class="string">"130"</span> style=<span class="string">"display: inline-block;"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;p&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/ProductServlet?method=findProductByPid&amp;pid=$&#123;p.pid&#125;" style='color:#666'&gt;$&#123;p.pname&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;font color="#E4393C" style="font-size:16px"&gt;&amp;yen;$&#123;p.shop_price&#125;&lt;/font&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h4 id="3-商品详情显示"><a href="#3-商品详情显示" class="headerlink" title="3.商品详情显示"></a>3.商品详情显示</h4><h5 id="步骤实现-1"><a href="#步骤实现-1" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作   /jsp/index.jsp修改连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/ProductServlet?method=findProductByPid&amp;pid=$&#123;p.pid&#125;"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"$&#123;pageContext.request.contextPath&#125;/$&#123;p.pimage&#125;"</span> width=<span class="string">"130"</span> height=<span class="string">"130"</span> style=<span class="string">"display: inline-block;"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.ProductServlet___&gt;findProductByPid  获取商品pid  根据商品pid查询商品信息</p><p>将获取到的商品放入request  转发到/jsp/product_info.jsp</p><p>3.ProductServiceImpl___&gt;ProductDaoImpl</p><p>4./jsp/product_info.jsp</p><h6 id="ProductServlet"><a href="#ProductServlet" class="headerlink" title="ProductServlet:"></a>ProductServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findProductByPid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取商品pid</span></span><br><span class="line">String pid = request.getParameter(<span class="string">"pid"</span>);</span><br><span class="line"><span class="comment">// 根据商品pid查询商品信息</span></span><br><span class="line">ProductService productService = <span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line">Product product = productService.findProductByPid(pid);</span><br><span class="line"><span class="comment">// 将获取到的商品放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"product"</span>, product);</span><br><span class="line"><span class="comment">// 转发到/jsp/product_info.jsp</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/product_info.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl-1"><a href="#ProductServiceImpl-1" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findProductByPid</span><span class="params">(String pid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> productDao.findProductByPid(pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl-1"><a href="#ProductDaoImpl-1" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findProductByPid</span><span class="params">(String pid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product where pid=?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>), <span class="title">pid</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-分页查看下分类下的商品信息"><a href="#4-分页查看下分类下的商品信息" class="headerlink" title="4.分页查看下分类下的商品信息"></a>4.分页查看下分类下的商品信息</h4><h5 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句:"></a>SQL语句:</h5><p>#查看类别cid为1的商品的信息带有分页</p><p>SELECT * FROM product WHERE cid =  1 LIMIT ? ,?</p><p>#统计类别为1的商品的数量</p><p>SELECT COUNT(*) FROM product WHERE cid =  1</p><h5 id="步骤实现-2"><a href="#步骤实现-2" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作   /jsp/header.jsp </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">'/store_v5/ProductServlet?method=findProductsByCidWithPage&amp;num=1&amp;cid="</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">+obj.cid+"'&gt;"+obj.cname+"&lt;/a&gt;&lt;/li&gt;";</span><br></pre></td></tr></table></figure><p>2.ProductServlet_____&gt;findProductsByCidWithPage  获取cid,num   调用业务层功能:以分页形式查询当前类别下商品信息         返回PageModel对象(1.当前页商品信息2.分页3.url)将PageModel对象放入request     转发到/jsp/product_list.jsp</p><p>3.ProductService   创建PageModel对象   目的:计算分页参数   关联集合   关联url</p><p>4.ProductDao    1.统计当前类别下商品个数    2.统计当前类别的当前页中的商品信息</p><p>5./jsp/product_list.jsp    获取了当前类别下的当前页中的分类数据和分页参数 </p><p>约定: 1.当前页: num   2.向request放入PageModel属性名称page</p><h6 id="ProductServlet-1"><a href="#ProductServlet-1" class="headerlink" title="ProductServlet:"></a>ProductServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findProductsByCidWithPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取cid,num</span></span><br><span class="line"></span><br><span class="line">String cid = request.getParameter(<span class="string">"cid"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> curNum = Integer.parseInt(request.getParameter(<span class="string">"num"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用业务层功能:以分页形式查询当前类别下商品信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回PageModel对象(1_当前页商品信息2_分页3_url)</span></span><br><span class="line"></span><br><span class="line">ProductService productService = <span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line"></span><br><span class="line">PageModel pm = productService.findProductsByCidWithPage(cid, curNum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将PageModel对象放入request</span></span><br><span class="line"></span><br><span class="line">request.setAttribute(<span class="string">"page"</span>, pm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发到/jsp/product_list.jsp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/product_list.jsp"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl-2"><a href="#ProductServiceImpl-2" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageModel <span class="title">findProductsByCidWithPage</span><span class="params">(String cid, <span class="keyword">int</span> curNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1_创建PageModel对象 目的:计算分页参数</span></span><br><span class="line"><span class="comment">// 统计当前分类下商品个数 select count(*) from product where cid=?</span></span><br><span class="line"><span class="keyword">int</span> totalRecords = productDao.findTotalRecords(cid);</span><br><span class="line">PageModel pm = <span class="keyword">new</span> PageModel(curNum, totalRecords, <span class="number">12</span>);</span><br><span class="line"><span class="comment">// 2_关联集合 select * from product where cid =? limit ? ,?</span></span><br><span class="line">List list = productDao.findProductsByCidWithPage(cid, pm.getStartIndex(), pm.getPageSize());</span><br><span class="line">pm.setList(list);</span><br><span class="line"><span class="comment">// 3_关联url</span></span><br><span class="line">pm.setUrl(<span class="string">"ProductServlet?method=findProductsByCidWithPage&amp;cid="</span> + cid);</span><br><span class="line"><span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl-2"><a href="#ProductDaoImpl-2" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">findProductsByCidWithPage</span><span class="params">(String cid, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product where cid=? limit ? , ?"</span>;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>), <span class="title">cid</span>, <span class="title">startIndex</span>, <span class="title">pageSize</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotalRecords</span><span class="params">(String cid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select count(*) from product where cid =?"</span>;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Long num = (Long) qr.query(sql, <span class="keyword">new</span> ScalarHandler(), cid);</span><br><span class="line"><span class="keyword">return</span> num.intValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-获取首页分类信息&quot;&gt;&lt;a href=&quot;#1-获取首页分类信息&quot; class=&quot;headerlink&quot; title=&quot;1.获取首页分类信息&quot;&gt;&lt;/a&gt;1.获取首页分类信息&lt;/h4&gt;&lt;h5 id=&quot;步骤实现&quot;&gt;&lt;a href=&quot;#步骤实现&quot; class=&quot;headerlink&quot; title=&quot;步骤实现:&quot;&gt;&lt;/a&gt;步骤实现:&lt;/h5&gt;&lt;p&gt;1.导入jar包&lt;/p&gt;
&lt;p&gt;2.导入JedisUtils工具类(修改参数127.0.0.1)&lt;/p&gt;
&lt;p&gt;3.启动windows版本的redis&lt;/p&gt;
&lt;p&gt;4.实现CategoryServlet__&amp;gt;findAllCats   &lt;/p&gt;
&lt;p&gt;在redis中获取全部分类信息  &lt;/p&gt;
&lt;p&gt;如果无法获取分类信息,   查询DB中的分类,转换为JSON格式字符串,  将JSON格式字符串向redis缓存一份,之后将JSON格式数据响应到客户端&lt;/p&gt;
&lt;p&gt;如果可以获取到分类信息&lt;/p&gt;
&lt;p&gt;直接响应即可&lt;/p&gt;
&lt;h6 id=&quot;CategoryServlet&quot;&gt;&lt;a href=&quot;#CategoryServlet&quot; class=&quot;headerlink&quot; title=&quot;CategoryServlet:&quot;&gt;&lt;/a&gt;CategoryServlet:&lt;/h6&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CategoryServlet&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseServlet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//findAllCats&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;findAllCats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest req, HttpServletResponse resp)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//在redis中获取全部分类信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Jedis jedis=JedisUtils.getJedis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String jsonStr=jedis.get(&lt;span class=&quot;string&quot;&gt;&quot;allCats&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;==jsonStr||&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(jsonStr))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//调用业务层获取全部分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			CategoryService categoryService=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CategoryServiceImp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			List&amp;lt;Category&amp;gt; list = categoryService.getAllCats();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//将全部分类转换为JSON格式的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			jsonStr=JSONArray.fromObject(list).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(jsonStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//将获取到的JSON格式的数据存入redis&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			jedis.set(&lt;span class=&quot;string&quot;&gt;&quot;allCats&quot;&lt;/span&gt;, jsonStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;redis缓存中没有数据&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//将全部分类信息响应到客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//告诉浏览器本次响应的数据是JSON格式的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			resp.setContentType(&lt;span class=&quot;string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			resp.getWriter().print(jsonStr);			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;redis缓存中有数据&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//将全部分类信息响应到客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//告诉浏览器本次响应的数据是JSON格式的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			resp.setContentType(&lt;span class=&quot;string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			resp.getWriter().print(jsonStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		JedisUtils.closeJedis(jedis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>网上商城项目总结(三.购物车与订单)</title>
    <link href="http://tonymua.top/21309/"/>
    <id>http://tonymua.top/21309/</id>
    <published>2021-05-08T13:19:59.245Z</published>
    <updated>2020-04-29T02:44:38.096Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-购物车"><a href="#1-购物车" class="headerlink" title="1.购物车"></a>1.购物车</h4><h5 id="1-1抽取购物车模型"><a href="#1-1抽取购物车模型" class="headerlink" title="1.1抽取购物车模型"></a>1.1抽取购物车模型</h5><h6 id="步骤实现"><a href="#步骤实现" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p><strong>购物项</strong>:(图片路径,商品名称,商品价格,这类商品购买的数量,这类商品总价小计)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartItem</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> subTotal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CartItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CartItem</span><span class="params">(Product product, <span class="keyword">int</span> num, <span class="keyword">double</span> subTotal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.product = product;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line"><span class="keyword">this</span>.subTotal = subTotal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.product = product;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSubTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> product.getShop_price() * num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubTotal</span><span class="params">(<span class="keyword">double</span> subTotal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subTotal = subTotal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>购物车</strong>(个数不确定的购物项)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line"><span class="comment">// 总计/积分</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 个数不确定的购物项 商品pid&lt;===&gt;CartItem</span></span><br><span class="line">Map&lt;String, CartItem&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加购物项到购物车</span></span><br><span class="line"><span class="comment">// 当用户点击加入购物车按钮,可以将当前要购买的商品id,商品数量发送到服务端,服务端根据商品id查询到商品信息</span></span><br><span class="line"><span class="comment">// 有了商品信息Product对象,有了要购买商品数量,当前的购物项也就可以获取到了</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCartItemToCart</span><span class="params">(CartItem cartItem)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取到正在想购物车中添加的商品pid</span></span><br><span class="line">String pid = cartItem.getProduct().getPid();</span><br><span class="line"><span class="comment">// 将当前的购物项加入购物车之前,判断之前是否买过这类商品</span></span><br><span class="line"><span class="comment">// 如果没有买过 list.add(cartItem);</span></span><br><span class="line"><span class="comment">// 如果买过: 获取到原先的数量,获取到本次的数量,相加之后设置到原先购物项上</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(pid)) &#123;</span><br><span class="line"><span class="comment">// 获取到原先的购物项</span></span><br><span class="line">CartItem oldItem = map.get(pid);</span><br><span class="line">oldItem.setNum(oldItem.getNum() + cartItem.getNum());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(pid, cartItem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;CartItem&gt; <span class="title">getCartItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.values();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除购物项</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCartItem</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">map.remove(pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空购物车</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总计是可以经过计算获取到</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 总计是可以经过计算获取到</span></span><br><span class="line">total = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 获取到Map中所有的购物项</span></span><br><span class="line">Collection&lt;CartItem&gt; values = map.values();</span><br><span class="line"><span class="comment">// 遍历所有的购物项,将购物项上的小计相加</span></span><br><span class="line"><span class="keyword">for</span> (CartItem cartItem : values) &#123;</span><br><span class="line">total += cartItem.getSubTotal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">double</span> total)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.total = total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, CartItem&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, CartItem&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2添加商品到购物车"><a href="#1-2添加商品到购物车" class="headerlink" title="1.2添加商品到购物车"></a>1.2添加商品到购物车</h5><h6 id="步骤实现-1"><a href="#步骤实现-1" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p>1_准备工作   /jsp/product_list.jsp  修改连接</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/ProductServlet?method=findProductByPid&amp;pid=$&#123;p.pid&#125;"</span>&gt;</span><br></pre></td></tr></table></figure><p>  /jsp/product_info.jsp   自己设置form表单,设置form method,action   设置隐藏域向服务端传递商品pid</p><p>  PS:如果一个表单中有多个按钮,点击不同的按钮提交到不同路径</p><p> var form= document.getElementById(“formId”);</p><p> form.submit();</p><p>2.CartServlet____&gt;addCartgItemToCart</p><p>  从session获取购物车: 如果获取不到,创建购物车对象,放在session中  如果获取到,使用即可 获取到商品id,数量  通过商品id查询都商品对象     获取到待购买的购物项   调用购物车上的方法   重定向到/jsp/cart.jsp</p><p>3_./jsp/cart.jsp 获取购物车上商品信息 </p><h6 id="CartServlet"><a href="#CartServlet" class="headerlink" title="CartServlet:"></a>CartServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addCartItemToCart</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 从session获取购物车</span></span><br><span class="line">Cart cart = (Cart) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == cart) &#123;</span><br><span class="line">cart = <span class="keyword">new</span> Cart();</span><br><span class="line">request.getSession().setAttribute(<span class="string">"cart"</span>, cart);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果获取到,使用即可</span></span><br><span class="line"><span class="comment">// 获取到商品id,数量</span></span><br><span class="line">String pid = request.getParameter(<span class="string">"pid"</span>);</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(request.getParameter(<span class="string">"quantity"</span>));</span><br><span class="line"><span class="comment">// 通过商品id查询都商品对象</span></span><br><span class="line">ProductService productService = <span class="keyword">new</span> ProductServiceImpl();</span><br><span class="line">Product product = productService.findProductByPid(pid);</span><br><span class="line"><span class="comment">// 获取到待购买的购物项</span></span><br><span class="line">CartItem cartItem = <span class="keyword">new</span> CartItem();</span><br><span class="line">cartItem.setNum(num);</span><br><span class="line">cartItem.setProduct(product);</span><br><span class="line"><span class="comment">// 调用购物车上的方法</span></span><br><span class="line">cart.addCartItemToCart(cartItem);</span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/jsp/cart.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductServiceImpl"><a href="#ProductServiceImpl" class="headerlink" title="ProductServiceImpl:"></a>ProductServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findProductByPid</span><span class="params">(String pid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> productDao.findProductByPid(pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ProductDaoImpl"><a href="#ProductDaoImpl" class="headerlink" title="ProductDaoImpl:"></a>ProductDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findProductByPid</span><span class="params">(String pid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from product where pid=?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;Product&gt;(Product<span class="class">.<span class="keyword">class</span>), <span class="title">pid</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;cart.cartItems&#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">&lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;</span><br><span class="line">&lt;td width=<span class="string">"60"</span> width=<span class="string">"40%"</span>&gt;&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"id"</span> value=<span class="string">"22"</span>&gt; &lt;img</span><br><span class="line">src="$&#123;pageContext.request.contextPath&#125;/$&#123;item.product.pimage&#125;" width="70" height="60"&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width="30%"&gt;&lt;a target="_blank"&gt;$&#123;item.product.pname&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width="20%"&gt;￥$&#123;item.product.shop_price&#125;&lt;/td&gt;</span><br><span class="line">&lt;td width="10%"&gt;&lt;input type="text" name="quantity" value="$&#123;item.num&#125;" maxlength="4" size="10"&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width="15%"&gt;&lt;span class="subtotal"&gt;￥$&#123;item.subTotal&#125;&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href="javascript:;" id="$&#123;item.product.pid&#125;" class="delete"&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h5 id="1-3移除购物项"><a href="#1-3移除购物项" class="headerlink" title="1.3移除购物项"></a>1.3移除购物项</h5><h6 id="步骤实现-2"><a href="#步骤实现-2" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p>1.准备工作  为购物车上的删除链接绑定了点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//页面加载完毕之后获取到class的值为delete元素,为其绑定点击事件</span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">".delete"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span>(confirm(<span class="string">"确认删除?"</span>))&#123;</span><br><span class="line"></span><br><span class="line">                     <span class="comment">//获取到被删除商品pid</span></span><br><span class="line"></span><br><span class="line">                     <span class="keyword">var</span> pid=<span class="keyword">this</span>.id;</span><br><span class="line"></span><br><span class="line">                     <span class="built_in">window</span>.loaction.href=<span class="string">"/store_v5/CartServlet?method=removeCartItem&amp;id="</span>+pid;</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.CartServlet___&gt;removeCartItem     获取待删除商品pid    获取到购物车    调用购物车删除购物项方法       重定向到/jsp/cart.jsp</p><h6 id="CartServlet-1"><a href="#CartServlet-1" class="headerlink" title="CartServlet:"></a>CartServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeCartItem</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取待删除商品pid</span></span><br><span class="line">String pid=req.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">//获取到购物车</span></span><br><span class="line">Cart cart=(Cart)req.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="comment">//调用购物车删除购物项方法</span></span><br><span class="line">cart.removeCartItem(pid);</span><br><span class="line"><span class="comment">//重定向到/jsp/cart.jsp</span></span><br><span class="line">resp.sendRedirect(<span class="string">"/store_v5/jsp/cart.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4清空购物车"><a href="#1-4清空购物车" class="headerlink" title="1.4清空购物车"></a>1.4清空购物车</h5><h6 id="步骤实现-3"><a href="#步骤实现-3" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p>1.准备工作  /jsp/cart.jsp   修改连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/CartServlet?method=clearCart"</span></span><br><span class="line">id="clear" class="clear"&gt;清空购物车&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.CartServlet___&gt;clearCart  获取购物车  调用购物车的清空方法  重定向到/jsp/cart.jsp页面</p><h6 id="CartServlet-2"><a href="#CartServlet-2" class="headerlink" title="CartServlet:"></a>CartServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">clearCart</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取购物车</span></span><br><span class="line">Cart cart=(Cart)req.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="comment">//调用购物车上的清空购物车方法</span></span><br><span class="line">cart.clearCart();</span><br><span class="line"><span class="comment">//重新定向到/jsp/cart.jsp</span></span><br><span class="line">resp.sendRedirect(<span class="string">"/store_v5/jsp/cart.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-订单"><a href="#2-订单" class="headerlink" title="2.订单"></a>2.订单</h4><h5 id="2-1订单模型抽取"><a href="#2-1订单模型抽取" class="headerlink" title="2.1订单模型抽取"></a>2.1订单模型抽取</h5><p><strong>OrderItem:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String itemid; <span class="comment">//id</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> quantity; <span class="comment">//数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//小计</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.对象对应对象</span></span><br><span class="line"><span class="comment">//2.product,order携带更多的数据</span></span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"><span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getItemid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> itemid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemid</span><span class="params">(String itemid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.itemid = itemid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> quantity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuantity</span><span class="params">(<span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.quantity = quantity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">double</span> total)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.total = total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.product = product;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.order = order;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Order:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String oid; <span class="comment">//订单编号</span></span><br><span class="line"><span class="keyword">private</span> Date ordertime; <span class="comment">//下单时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//总计</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state; <span class="comment">//状态</span></span><br><span class="line"><span class="keyword">private</span> String address; <span class="comment">//收货人地址</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">//收货人姓名</span></span><br><span class="line"><span class="keyword">private</span> String telephone; <span class="comment">//收货人电话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// private String uid;</span></span><br><span class="line"><span class="comment">// 1.程序对象和对象发生关系,而不是对象和对象的属性发生关系</span></span><br><span class="line"><span class="comment">// 2.设计Order目的:让order携带订单上的数据向service,dao传递,user对象是可以携带更多的数据</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 程序中体现订单对象和订单项之间关系,我们再项目中的部分功能中有类似的需求:查询订单的同时还需要获取订单下所有的订单项</span></span><br><span class="line"><span class="keyword">private</span> List&lt;OrderItem&gt; list = <span class="keyword">new</span> ArrayList&lt;OrderItem&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> oid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOid</span><span class="params">(String oid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.oid = oid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getOrdertime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ordertime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrdertime</span><span class="params">(Date ordertime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ordertime = ordertime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">double</span> total)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.total = total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTelephone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> telephone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTelephone</span><span class="params">(String telephone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.telephone = telephone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;OrderItem&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2提交订单"><a href="#2-2提交订单" class="headerlink" title="2.2提交订单"></a>2.2提交订单</h5><h6 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析:"></a>原理分析:</h6><p><strong>保存订单:</strong></p><p>为订单表中插入一行数据,描述本次交易,这行数据部分数据是通过程序赋予,部分数据来自购物车的,部分数据来自session中的用户</p><p>oid:UUIDUtils     orderTime:new Date();     total: 从购物车获取</p><p>state:1   address: null     name:null     telephone:null  uid:从session中的用户获取</p><p><strong>保存订单项:</strong></p><p>向订单项表中插入数据,描述当前订单的详细的购买信息,部分数据来自于购物车,部分数据需要通过程序赋予</p><p>itemid: UUIDUtils     quantity:来自于购物车中的购物项</p><p>total:来自于购物车中的购物项   pid:来自于购物车上的购物项下商品对象pid</p><p>oid:来自于当前订单id  </p><p><strong>提交订单时,订单以及订单项必须同时成功(事务)</strong></p><h6 id="步骤实现-4"><a href="#步骤实现-4" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p>1.准备工作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &lt;a</span><br><span class="line">href="$&#123;pageContext.request.contextPath&#125;/OrderServlet?method=saveOrder"&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.OrderServlet__&gt;saveOrder    //确认用户登录状态       //创建订单对象,为订单对象赋值    //遍历购物项的同时,创建订单项      //调用业务层功能:保存订单    //清空购物车     //将订单放入request      //转发/jsp/order_info.jsp</p><p>return “/jsp/order_info.jsp”;</p><p>3.OrderService</p><p>利用事务保存订单,订单项</p><p>4.OrderDao</p><p>5./jsp/order_info.jsp  获取到订单信息</p><h6 id="OrderServlet"><a href="#OrderServlet" class="headerlink" title="OrderServlet:"></a>OrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// saveOrder  将购物车中的信息以订单的形式保存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveOrder</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//确认用户登录状态</span></span><br><span class="line">User user=(User)req.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>==user)&#123;</span><br><span class="line">req.setAttribute(<span class="string">"msg"</span>, <span class="string">"请登录之后在下单"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/info.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取购物车</span></span><br><span class="line">Cart cart=(Cart)req.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="comment">//创建订单对象,为订单对象赋值</span></span><br><span class="line">Order order=<span class="keyword">new</span> Order();</span><br><span class="line">order.setOid(UUIDUtils.getCode());</span><br><span class="line">order.setOrdertime(<span class="keyword">new</span> Date());</span><br><span class="line">order.setTotal(cart.getTotal());</span><br><span class="line">order.setState(<span class="number">1</span>);</span><br><span class="line">order.setUser(user);</span><br><span class="line"><span class="comment">//遍历购物项的同时,创建订单项,为订单项赋值</span></span><br><span class="line"><span class="keyword">for</span> (CartItem item : cart.getCartItems()) &#123;</span><br><span class="line">OrderItem orderItem=<span class="keyword">new</span> OrderItem();</span><br><span class="line">orderItem.setItemid(UUIDUtils.getCode());</span><br><span class="line">orderItem.setQuantity(item.getNum());</span><br><span class="line">orderItem.setTotal(item.getSubTotal());</span><br><span class="line">orderItem.setProduct(item.getProduct());</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置当前的订单项属于哪个订单:程序的角度体检订单项和订单对应关系</span></span><br><span class="line">orderItem.setOrder(order);</span><br><span class="line">order.getList().add(orderItem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用业务层功能:保存订单</span></span><br><span class="line">OrderService orderService=<span class="keyword">new</span> OrderServiceImp();</span><br><span class="line"><span class="comment">//将订单数据,用户的数据,订单下所有的订单项都传递到了service层</span></span><br><span class="line">orderService.saveOrder(order);</span><br><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line">cart.clearCart();</span><br><span class="line"><span class="comment">//将订单放入request</span></span><br><span class="line">req.setAttribute(<span class="string">"order"</span>, order);</span><br><span class="line"><span class="comment">//转发/jsp/order_info.jsp</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/order_info.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderServiceImpl"><a href="#OrderServiceImpl" class="headerlink" title="OrderServiceImpl:"></a>OrderServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">(Order order)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * try &#123; JDBCUtils.startTransaction(); OrderDao orderDao = new OrderDaoImpl();</span></span><br><span class="line"><span class="comment"> * orderDao.saveOrder(order); for (OrderItem item : order.getList()) &#123;</span></span><br><span class="line"><span class="comment"> * orderDao.saveOrderItem(item); &#125; JDBCUtils.commitAndClose(); &#125; catch</span></span><br><span class="line"><span class="comment"> * (Exception e) &#123; JDBCUtils.rollbackAndClose(); &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">connection = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 保存订单</span></span><br><span class="line">orderDao.saveOrder(connection, order);</span><br><span class="line"><span class="comment">// 保存订单项</span></span><br><span class="line"><span class="keyword">for</span> (OrderItem item : order.getList()) &#123;</span><br><span class="line">orderDao.saveOrderItem(connection, item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提交</span></span><br><span class="line">connection.commit();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">connection.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderDaoImpl"><a href="#OrderDaoImpl" class="headerlink" title="OrderDaoImpl:"></a>OrderDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">(Connection connection, Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into orders values(?,?,?,?,?,?,?,?)"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Object[] params = &#123; order.getOid(), order.getOrdertime(), order.getTotal(), order.getState(),</span><br><span class="line">order.getAddress(), order.getName(), order.getTelephone(), order.getUser().getUid() &#125;;</span><br><span class="line">queryRunner.update(connection, sql, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrderItem</span><span class="params">(Connection connection, OrderItem item)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into orderitem values(?,?,?,?,?)"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Object[] params = &#123; item.getItemid(), item.getQuantity(), item.getTotal(), item.getProduct().getPid(),</span><br><span class="line">item.getOrder().getOid() &#125;;</span><br><span class="line">queryRunner.update(connection, sql, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3我的订单"><a href="#2-3我的订单" class="headerlink" title="2.3我的订单"></a>2.3我的订单</h5><h6 id="步骤实现-5"><a href="#步骤实现-5" class="headerlink" title="步骤实现:"></a>步骤实现:</h6><p>1.准备工作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/OrderServlet?method=findMyOrdersWithPage&amp;num=1"&gt;我的订单&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.OrderServlet__&gt;findMyOrdersWithPage      获取用户信息     获取当前页     调用业务层功能:查询当前用户订单信息,返回PageModel    将PageModel放入request     转发到/jsp/order_list.jsp</p><p>3.OrderServiceImpl     //1.创建PageModel对象,目的:计算并且携带分页参数      //2.关联集合     //3.关联url</p><p>4.OrderDaoImpl    利用MapListHandler封装多表查询结果    多表查询语句    BeanUtils自动填充数据</p><p>5.实现/jsp/order_list.jsp 获取订单信息,完成响应</p><p> PS: 遍历数据时,2个循环,大循环遍历订单,小循环遍历的是订单上的订单项</p><h6 id="OrderServlet-1"><a href="#OrderServlet-1" class="headerlink" title="OrderServlet:"></a>OrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findMyOrdersWithPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line">User user = (User) request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line"><span class="comment">// 获取当前页</span></span><br><span class="line"><span class="keyword">int</span> curNum = Integer.parseInt(request.getParameter(<span class="string">"num"</span>));</span><br><span class="line"><span class="comment">// 调用业务层功能:查询当前用户订单信息,返回PageModel</span></span><br><span class="line">OrderService orderService = <span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line"><span class="comment">// select * from orders where uid=? limit ?,?</span></span><br><span class="line"><span class="comment">// PageModel:1.分页参数 2.url 3.当前用户的当前页的订单(集合),每笔订单上对应的订单项,以及订单项对应的商品信息</span></span><br><span class="line">PageModel pm = orderService.findMyOrdersWithPage(user, curNum);</span><br><span class="line"><span class="comment">// 将PageMpdel放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"page"</span>, pm);</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"jsp/order_list.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderServiceImpl-1"><a href="#OrderServiceImpl-1" class="headerlink" title="OrderServiceImpl:"></a>OrderServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageModel <span class="title">findMyOrdersWithPage</span><span class="params">(User user, <span class="keyword">int</span> curNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建PageModel对象 目的:计算并携带分页参数</span></span><br><span class="line"><span class="comment">//select count(*) from orders where uid=?</span></span><br><span class="line"><span class="keyword">int</span> totalRecords=orderDao.getTotalRecords(user);</span><br><span class="line">PageModel pm = <span class="keyword">new</span> PageModel(curNum, totalRecords, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 关联集合  select* from orders where uid=? limit ?,?</span></span><br><span class="line">List list=orderDao.findMyOrdersWithPage(user,pm.getStartIndex(),pm.getPageSize());</span><br><span class="line">pm.setList(list);</span><br><span class="line"><span class="comment">// 关联url</span></span><br><span class="line">pm.setUrl(<span class="string">"OrderServlet?method=findMyOrdersWithPage"</span>);</span><br><span class="line"><span class="keyword">return</span> pm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderDaoImpl-1"><a href="#OrderDaoImpl-1" class="headerlink" title="OrderDaoImpl:"></a>OrderDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">findMyOrdersWithPage</span><span class="params">(User user, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from orders where uid=? limit ?,?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">List&lt;Order&gt; list = queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Order&gt;(Order<span class="class">.<span class="keyword">class</span>), <span class="title">user</span>.<span class="title">getUid</span>(), <span class="title">startIndex</span>,</span></span><br><span class="line"><span class="class"><span class="title">pageSize</span>)</span>;</span><br><span class="line"><span class="comment">// 遍历所有订单</span></span><br><span class="line"><span class="keyword">for</span> (Order order : list) &#123;</span><br><span class="line"><span class="comment">// 获取每笔订单oid</span></span><br><span class="line">String oid = order.getOid();</span><br><span class="line">sql = <span class="string">"select * from orderitem o,product p where o.pid=p.pid and oid=?"</span>;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list2 = queryRunner.query(sql, <span class="keyword">new</span> MapListHandler(), oid);</span><br><span class="line"><span class="comment">// 遍历list</span></span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : list2) &#123;</span><br><span class="line">OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line"><span class="comment">// 由于BeanUtils将字符串"1922-2-2"向user对象的setBirthday();方法传递参数有问题,手动向BeanUtils注册一个时间</span></span><br><span class="line"><span class="comment">// 创建时间类型转换器</span></span><br><span class="line">DateConverter dt = <span class="keyword">new</span> DateConverter();</span><br><span class="line"><span class="comment">// 设置转换格式</span></span><br><span class="line">dt.setPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">// 注册转换器</span></span><br><span class="line">ConvertUtils.register(dt, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 将map中属于oderItem的数据自动填充到orderItem对象上</span></span><br><span class="line">BeanUtils.populate(orderItem, map);</span><br><span class="line"><span class="comment">// 将map中属于product的数据自动填充到product对象上</span></span><br><span class="line">BeanUtils.populate(product, map);</span><br><span class="line"><span class="comment">// 每个订单项和商品发生关联关系</span></span><br><span class="line">orderItem.setProduct(product);</span><br><span class="line"><span class="comment">// 每个订单项存入订单下的集合中</span></span><br><span class="line">order.getList().add(orderItem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalRecords</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select count(*) from orders where uid=?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Long num = (Long) queryRunner.query(sql, <span class="keyword">new</span> ScalarHandler(), user.getUid());</span><br><span class="line"><span class="keyword">return</span> num.intValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSP-1"><a href="#JSP-1" class="headerlink" title="JSP:"></a>JSP:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;page.list &#125;"</span> <span class="keyword">var</span>=<span class="string">"order"</span>&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"success"</span>&gt;</span><br><span class="line">&lt;th colspan=<span class="string">"5"</span>&gt;</span><br><span class="line">订单编号:$&#123;order.oid &#125;</span><br><span class="line">订单总金额:$&#123;order.total &#125;</span><br><span class="line">&lt;c:if test="$&#123;order.state==1 &#125;"&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/OrderServlet?method=findOrderByOid&amp;oid=$&#123;order.oid&#125;"&gt;付款&lt;/a&gt;&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;order.state==2 &#125;"&gt;等待发货&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;order.state==3 &#125;"&gt;&lt;a href="#"&gt;确认收货&lt;/a&gt;&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;order.state==4 &#125;"&gt;&lt;a href="#"&gt;评价&lt;/a&gt;&lt;/c:if&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"warning"</span>&gt;</span><br><span class="line">&lt;th&gt;图片&lt;/th&gt;</span><br><span class="line">&lt;th&gt;商品&lt;/th&gt;</span><br><span class="line">&lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">&lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">&lt;th&gt;小计&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;order.list &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">&lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;</span><br><span class="line">&lt;td width=<span class="string">"60"</span> width=<span class="string">"40%"</span>&gt;&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"id"</span> value=<span class="string">"22"</span>&gt; &lt;img</span><br><span class="line">src="$&#123;pageContext.request.contextPath&#125;/$&#123;item.product.pimage&#125;" width="70" height="60"&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width="30%"&gt;&lt;a target="_blank"&gt;$&#123;item.product.pname&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width="20%"&gt;￥$&#123;item.product.shop_price&#125;&lt;/td&gt;</span><br><span class="line">&lt;td width="10%"&gt;$&#123;item.quantity &#125;&lt;/td&gt;</span><br><span class="line">&lt;td width="15%"&gt;&lt;span class="subtotal"&gt;￥$&#123;item.total &#125;&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h5 id="2-4订单详情"><a href="#2-4订单详情" class="headerlink" title="2.4订单详情"></a>2.4订单详情</h5><p>1.准备工作  order_list.jsp 修改连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/OrderServlet?method=findOrderByOid&amp;oid=$&#123;o.oid&#125;"&gt;付款&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.OrderServlet___&gt;findOrderByOid      获取到订单oid    调用业务层功能:根据订单编号查询订单信息   将订单放入request  转发到/jsp/order_info.jsp</p><p>3.OrderService</p><p>4.OrderDaoImpl   根据订单oid查询当前订单    根据订单oid查询订单下所有的订单项以及订单项关联的商品</p><p>5./jsp/order_info.jsp   开发中:多个功能对应同一个JSP页面,为了提高代码复用率,所有的功能在向同一个   JSP页面转发的时候,向request存入相同的数据(属性名一致)     request.setAttribute(name,obj);</p><h6 id="OrderServlet-2"><a href="#OrderServlet-2" class="headerlink" title="OrderServlet:"></a>OrderServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findOrderByOid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取订单编号oid</span></span><br><span class="line">String oid = request.getParameter(<span class="string">"oid"</span>);</span><br><span class="line"><span class="comment">// 调用业务层功能:根据订单编号查询订单信息</span></span><br><span class="line">OrderService orderService = <span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line">Order order = orderService.findOrderByOid(oid);</span><br><span class="line"><span class="comment">// 将订单放入request</span></span><br><span class="line">request.setAttribute(<span class="string">"order"</span>, order);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/order_info.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderServiceImpl-2"><a href="#OrderServiceImpl-2" class="headerlink" title="OrderServiceImpl:"></a>OrderServiceImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">findOrderByOid</span><span class="params">(String oid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderDao.findOrderByOid(oid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OrderDaoImpl-2"><a href="#OrderDaoImpl-2" class="headerlink" title="OrderDaoImpl:"></a>OrderDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">findOrderByOid</span><span class="params">(String oid)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from orders where oid=?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Order order = queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;Order&gt;(Order<span class="class">.<span class="keyword">class</span>), <span class="title">oid</span>)</span>;</span><br><span class="line">sql=<span class="string">"select * from orderitem o,product p where o.pid=p.pid and oid=?"</span>;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list2 = queryRunner.query(sql, <span class="keyword">new</span> MapListHandler(), oid);</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : list2) &#123;</span><br><span class="line">OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line"><span class="comment">// 由于BeanUtils将字符串"1922-2-2"向user对象的setBirthday();方法传递参数有问题,手动向BeanUtils注册一个时间</span></span><br><span class="line"><span class="comment">// 创建时间类型转换器</span></span><br><span class="line">DateConverter dt = <span class="keyword">new</span> DateConverter();</span><br><span class="line"><span class="comment">// 设置转换格式</span></span><br><span class="line">dt.setPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">// 注册转换器</span></span><br><span class="line">ConvertUtils.register(dt, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 将map中属于oderItem的数据自动填充到orderItem对象上</span></span><br><span class="line">BeanUtils.populate(orderItem, map);</span><br><span class="line"><span class="comment">// 将map中属于product的数据自动填充到product对象上</span></span><br><span class="line">BeanUtils.populate(product, map);</span><br><span class="line"><span class="comment">// 每个订单项和商品发生关联关系</span></span><br><span class="line">orderItem.setProduct(product);</span><br><span class="line"><span class="comment">// 每个订单项存入订单下的集合中</span></span><br><span class="line">order.getList().add(orderItem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-购物车&quot;&gt;&lt;a href=&quot;#1-购物车&quot; class=&quot;headerlink&quot; title=&quot;1.购物车&quot;&gt;&lt;/a&gt;1.购物车&lt;/h4&gt;&lt;h5 id=&quot;1-1抽取购物车模型&quot;&gt;&lt;a href=&quot;#1-1抽取购物车模型&quot; class=&quot;headerlink&quot; title=&quot;1.1抽取购物车模型&quot;&gt;&lt;/a&gt;1.1抽取购物车模型&lt;/h5&gt;&lt;h6 id=&quot;步骤实现&quot;&gt;&lt;a href=&quot;#步骤实现&quot; class=&quot;headerlink&quot; title=&quot;步骤实现:&quot;&gt;&lt;/a&gt;步骤实现:&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;购物项&lt;/strong&gt;:(图片路径,商品名称,商品价格,这类商品购买的数量,这类商品总价小计)&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CartItem&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Product product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; subTotal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CartItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CartItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Product product, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; subTotal)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.product = product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subTotal = subTotal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Product &lt;span class=&quot;title&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setProduct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Product product)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.product = product;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setNum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSubTotal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; product.getShop_price() * num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSubTotal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; subTotal)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subTotal = subTotal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>网上商城项目总结(一.用户模块)</title>
    <link href="http://tonymua.top/38014/"/>
    <id>http://tonymua.top/38014/</id>
    <published>2021-05-08T13:19:59.244Z</published>
    <updated>2020-04-29T02:44:38.064Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h3><h4 id="1-1用户注册-通用servlet"><a href="#1-1用户注册-通用servlet" class="headerlink" title="1.1用户注册(通用servlet)"></a>1.1用户注册(通用servlet)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/UserServlet?method=userRegister"&gt;注册&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="通用servlet"><a href="#通用servlet" class="headerlink" title="通用servlet:"></a>通用servlet:</h5><h6 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h6><p>   从客户端向服务端发起请求,每次都要传递额外的键值对的数据method=””, 服务端获取到method对应的内容之后,通过判断不同的内容调用不同的功能.</p><h6 id="从客户端向服务端发起请求-调用功能方式"><a href="#从客户端向服务端发起请求-调用功能方式" class="headerlink" title="从客户端向服务端发起请求,调用功能方式:"></a>从客户端向服务端发起请求,调用功能方式:</h6><p>1.通过表单向服务端发起请求     2.通过链接向服务端发起请     3.Ajax向服务端发起请求</p><h5 id="步骤实现"><a href="#步骤实现" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作   /jsp/regist.jsp 设置表单各种属性 action method </p><p>2.UserServlet__&gt;userRegist  接收表单参数  调用业务层注册功能   注册成功,向用户邮箱发送信息,跳转到提示页面   注册失败,跳转到提示页面</p><a id="more"></a><p>3.依次实现service,dao</p><p>4./jsp/info.jsp获取提示信息</p><h6 id="UserServlet"><a href="#UserServlet" class="headerlink" title="UserServlet:"></a>UserServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">MyBeanUtils.populate(user, request.getParameterMap());</span><br><span class="line"></span><br><span class="line">user.setUid(UUIDUtils.getId());</span><br><span class="line"></span><br><span class="line">user.setState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">user.setCode(UUIDUtils.getCode());</span><br><span class="line"></span><br><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">userService.userRegister(user);</span><br><span class="line"></span><br><span class="line">MailUtils.sendMail(user.getEmail(), user.getCode());</span><br><span class="line"></span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"注册成功,请激活!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/info.jsp"</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"注册失败!"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/info.jsp"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl:"></a>UserDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userRegister</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into user values(?,?,?,?,?,?,?,?,?,?)"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Object[] params = &#123; user.getUid(), user.getUsername(), user.getPassword(), user.getName(), user.getEmail(),</span><br><span class="line">user.getTelephone(), user.getBirthday(), user.getSex(), user.getState(), user.getCode() &#125;;</span><br><span class="line">queryRunner.update(sql, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserServicempl"><a href="#UserServicempl" class="headerlink" title="UserServicempl:"></a>UserServicempl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userRegister</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">userDao.userRegister(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2注册校验用户户名是否存在"><a href="#1-2注册校验用户户名是否存在" class="headerlink" title="1.2注册校验用户户名是否存在"></a>1.2注册校验用户户名是否存在</h4><h5 id="步骤实现-1"><a href="#步骤实现-1" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.用户注册时通过用户离开用户名输入框事件调用功能onblur=”checkUserName()”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"username"</span> placeholder=<span class="string">"请输入用户名"</span> onblur=<span class="string">"checkUserName()"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span01"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.UserServlet&gt;checkUser 调用UserServletimpl&gt;checkUserName校验用户名是否存在 </p><h6 id="UserServlet-1"><a href="#UserServlet-1" class="headerlink" title="UserServlet:"></a>UserServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"><span class="keyword">boolean</span> flag = userService.checkUserName(username);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="keyword">true</span>) &#123;</span><br><span class="line">response.getWriter().println(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserDaoImpl-1"><a href="#UserDaoImpl-1" class="headerlink" title="UserDaoImpl:"></a>UserDaoImpl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">checkUserName</span><span class="params">(String username)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from user where username=?"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span>  queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),<span class="title">username</span>)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserServicempl-1"><a href="#UserServicempl-1" class="headerlink" title="UserServicempl:"></a>UserServicempl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String username)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">User user = userDao.checkUserName(username);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span>!=user) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3注册后邮箱激活"><a href="#1-3注册后邮箱激活" class="headerlink" title="1.3注册后邮箱激活"></a>1.3注册后邮箱激活</h4><h5 id="步骤实现-2"><a href="#步骤实现-2" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.用户点击激活链接 UserServlet__&gt;active  调用业务层用户激活功能   调用dao层Active方法</p><p>2.UserServletimpl__&gt;UserActive  用户激活,如果激活成功,激活码置空,更改用户状态(state=1)</p><p>3.UserServlet__&gt;active   UserServletimpl返回true的话代表用户激活成功 /jsp/info.jsp获取提示信息激活成功  反之,提示激活失败</p><h6 id="UserServlet-2"><a href="#UserServlet-2" class="headerlink" title="UserServlet:"></a>UserServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">active</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取激活码</span></span><br><span class="line">String code=request.getParameter(<span class="string">"code"</span>);</span><br><span class="line"><span class="comment">//调用业务层激活功能</span></span><br><span class="line">UserService userService=<span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="keyword">boolean</span> flag=userService.userActive(code);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行激活信息提示</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//用户激活成功,向request放入提示信息,转发到登录页面</span></span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户激活成功,请登录!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/login.jsp"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//用户激活失败,向request放入提示信息,转发到提示页面</span></span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户激活失败,请重新激活!"</span>);</span><br><span class="line"><span class="keyword">return</span>  <span class="string">"/jsp/info.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserDaompl"><a href="#UserDaompl" class="headerlink" title="UserDaompl:"></a>UserDaompl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">Active</span><span class="params">(String code)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from user where code=?"</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),<span class="title">code</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql=<span class="string">"update user set username=? , password=? ,name =? ,email=?, telephone =? ,birthday =? ,sex=? ,state=? ,code= ? where uid=?"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line">Object[] params=&#123;user.getUsername(),user.getPassword(),user.getName(),user.getEmail(),user.getTelephone(),user.getBirthday(),user.getSex(),user.getState(),user.getCode(),user.getUid()&#125;;</span><br><span class="line">queryRunner.update(sql,params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserServicempl-2"><a href="#UserServicempl-2" class="headerlink" title="UserServicempl:"></a>UserServicempl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">userActive</span><span class="params">(String code)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">User user = userDao.Active(code);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</span><br><span class="line">user.setState(<span class="number">1</span>);</span><br><span class="line">user.setCode(<span class="keyword">null</span>);</span><br><span class="line">userDao.updateUser(user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h3><h4 id="2-1自动登录与记住用户名"><a href="#2-1自动登录与记住用户名" class="headerlink" title="2.1自动登录与记住用户名"></a>2.1自动登录与记住用户名</h4><h5 id="步骤实现-3"><a href="#步骤实现-3" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作  /jsp/login.jsp  设置form标签action,method  设置表单下input标签的name属性 设置用户自动登录复选框name=”auto_login” 记住用户名复选框name=”remember”</p><p>2.UserServlet_userLogin 获取数据  调用业务层功能<br>   成功,判断auto_login remember是否on 添加cookie:auto_login remember (1).自动登录:调用过滤器AutoLoginFilter  (2)记住用户名:login.jsp页面 用户名输入框设置value=”${ cookie.remember.value }”                                                                session存放用户信息,重定向到首页<br>失败request放入失败信息,转发到登录页面<br>3.service_dao<br>service:自定义异常向servlet传递2种数据(密码不存在,用户未激活)</p><p>4./jsp/index.jsp 获取到了用户信息</p><h6 id="UserServlet-3"><a href="#UserServlet-3" class="headerlink" title="UserServlet:"></a>UserServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">MyBeanUtils.populate(user, request.getParameterMap());</span><br><span class="line">String auto_login = request.getParameter(<span class="string">"auto_login"</span>);</span><br><span class="line">String remember = request.getParameter(<span class="string">"remember"</span>);</span><br><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">User loginUser = userService.userLogin(user);</span><br><span class="line"><span class="keyword">if</span> (loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"on"</span>.equals(auto_login)) &#123;</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"auto_login"</span>, loginUser.getUsername() + <span class="string">"#"</span> + loginUser.getPassword());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"on"</span>.equals(remember)) &#123;</span><br><span class="line">CookieUtil.addCookie(response, <span class="string">"remember"</span>, loginUser.getUsername(), <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">CookieUtil.removeCookie(response, <span class="string">"remember"</span>);</span><br><span class="line">&#125;</span><br><span class="line">request.getSession().setAttribute(<span class="string">"loginUser"</span>, loginUser);</span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/index.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">String msg = e.getMessage();</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, msg);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/jsp/login.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserDaompl-1"><a href="#UserDaompl-1" class="headerlink" title="UserDaompl:"></a>UserDaompl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql=<span class="string">"select * from user where username=? and password=?"</span>;</span><br><span class="line">QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(JDBCUtils.getDataSource());</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),<span class="title">user</span>.<span class="title">getUsername</span>(),<span class="title">user</span>.<span class="title">getPassword</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserServicempl-3"><a href="#UserServicempl-3" class="headerlink" title="UserServicempl:"></a>UserServicempl:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">User uu = userDao.userLogin(user);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == uu) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"密码错误"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (uu.getState() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户未激活"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> uu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CookieUtil"><a href="#CookieUtil" class="headerlink" title="CookieUtil:"></a>CookieUtil:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">findCookie</span><span class="params">(Cookie[] cookies, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line"><span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line"><span class="keyword">return</span> cookie;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCookie</span><span class="params">(HttpServletResponse response, String name, String value)</span> </span>&#123;</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(name, value);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCookie</span><span class="params">(HttpServletResponse response, String name, String value, <span class="keyword">int</span> maxAge)</span> </span>&#123;</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(name, value);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">if</span> (maxAge &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cookie.setMaxAge(maxAge);</span><br><span class="line">&#125;</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeCookie</span><span class="params">(HttpServletResponse response, String name)</span> </span>&#123;</span><br><span class="line">Cookie uid = <span class="keyword">new</span> Cookie(name, <span class="keyword">null</span>);</span><br><span class="line">uid.setPath(<span class="string">"/"</span>);</span><br><span class="line">uid.setMaxAge(<span class="number">0</span>);</span><br><span class="line">response.addCookie(uid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="AutoLoginFilter"><a href="#AutoLoginFilter" class="headerlink" title="AutoLoginFilter:"></a>AutoLoginFilter:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoLoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest request2 = (HttpServletRequest) request;</span><br><span class="line">User loginUser = (User) request2.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line"><span class="keyword">if</span> (loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">chain.doFilter(request2, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Cookie[] cookies = request2.getCookies();</span><br><span class="line">Cookie cookie = CookieUtil.findCookie(cookies, <span class="string">"auto_login"</span>);</span><br><span class="line"><span class="keyword">if</span> (cookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">chain.doFilter(request2, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String value = cookie.getValue();</span><br><span class="line">String username = value.split(<span class="string">"#"</span>)[<span class="number">0</span>];</span><br><span class="line">String password = value.split(<span class="string">"#"</span>)[<span class="number">1</span>];</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(username);</span><br><span class="line">user.setPassword(password);</span><br><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">loginUser = userService.userLogin(user);</span><br><span class="line">request2.getSession().setAttribute(<span class="string">"loginUser"</span>, loginUser);</span><br><span class="line">chain.doFilter(request2, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-退出"><a href="#3-退出" class="headerlink" title="3.退出"></a>3.退出</h3><h4 id="3-1用户退出"><a href="#3-1用户退出" class="headerlink" title="3.1用户退出"></a>3.1用户退出</h4><h5 id="步骤实现-4"><a href="#步骤实现-4" class="headerlink" title="步骤实现:"></a>步骤实现:</h5><p>1.准备工作   /jsp/index.jsp 修改连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/UserServlet?method=logOut"&gt;退出&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.UserServlet___&gt;logOut  清除session  重新定向到首页  return null;</p><h6 id="UserServlet-4"><a href="#UserServlet-4" class="headerlink" title="UserServlet:"></a>UserServlet:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logOut</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.getSession().invalidate();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Cookie cookie = new Cookie("auto_login", ""); </span></span><br><span class="line"><span class="comment"> * cookie.setMaxAge(0);</span></span><br><span class="line"><span class="comment"> * cookie.setPath("/"); </span></span><br><span class="line"><span class="comment"> * response.addCookie(cookie);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CookieUtil.removeCookie(response, <span class="string">"auto_login"</span>);</span><br><span class="line">response.sendRedirect(<span class="string">"/store_v5/index.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-注册&quot;&gt;&lt;a href=&quot;#1-注册&quot; class=&quot;headerlink&quot; title=&quot;1.注册&quot;&gt;&lt;/a&gt;1.注册&lt;/h3&gt;&lt;h4 id=&quot;1-1用户注册-通用servlet&quot;&gt;&lt;a href=&quot;#1-1用户注册-通用servlet&quot; class=&quot;headerlink&quot; title=&quot;1.1用户注册(通用servlet)&quot;&gt;&lt;/a&gt;1.1用户注册(通用servlet)&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&quot;$&amp;#123;pageContext.request.contextPath&amp;#125;/UserServlet?method=userRegister&quot;&amp;gt;注册&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;通用servlet&quot;&gt;&lt;a href=&quot;#通用servlet&quot; class=&quot;headerlink&quot; title=&quot;通用servlet:&quot;&gt;&lt;/a&gt;通用servlet:&lt;/h5&gt;&lt;h6 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理:&quot;&gt;&lt;/a&gt;原理:&lt;/h6&gt;&lt;p&gt;   从客户端向服务端发起请求,每次都要传递额外的键值对的数据method=””, 服务端获取到method对应的内容之后,通过判断不同的内容调用不同的功能.&lt;/p&gt;
&lt;h6 id=&quot;从客户端向服务端发起请求-调用功能方式&quot;&gt;&lt;a href=&quot;#从客户端向服务端发起请求-调用功能方式&quot; class=&quot;headerlink&quot; title=&quot;从客户端向服务端发起请求,调用功能方式:&quot;&gt;&lt;/a&gt;从客户端向服务端发起请求,调用功能方式:&lt;/h6&gt;&lt;p&gt;1.通过表单向服务端发起请求     2.通过链接向服务端发起请     3.Ajax向服务端发起请求&lt;/p&gt;
&lt;h5 id=&quot;步骤实现&quot;&gt;&lt;a href=&quot;#步骤实现&quot; class=&quot;headerlink&quot; title=&quot;步骤实现:&quot;&gt;&lt;/a&gt;步骤实现:&lt;/h5&gt;&lt;p&gt;1.准备工作   /jsp/regist.jsp 设置表单各种属性 action method &lt;/p&gt;
&lt;p&gt;2.UserServlet__&amp;gt;userRegist  接收表单参数  调用业务层注册功能   注册成功,向用户邮箱发送信息,跳转到提示页面   注册失败,跳转到提示页面&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://tonymua.top/ThreadPool/"/>
    <id>http://tonymua.top/ThreadPool/</id>
    <published>2021-05-08T13:19:59.242Z</published>
    <updated>2020-11-03T12:25:05.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p><img data-src="../../../../assets/img/11183270.jpg" alt></p><a id="more"></a><p><strong>原理：</strong><br>当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；如果当前线程数为 corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果阻塞队列满了，那就创建新的线程执行当前任务；直到线程池中的线程数达到 maxPoolSize，这时再有任务来，只能执行 reject() 处理该任务。<br><strong>优点：</strong></p><ol><li>降低资源消耗；</li><li>提高响应速度；</li><li>提高线程的可管理性。</li></ol><p><strong>缺点：</strong>TODO<br><img data-src="../../../../assets/img/184834.jpg" alt></p><h5 id="1-1-四种常用ExecutorService特性"><a href="#1-1-四种常用ExecutorService特性" class="headerlink" title="1.1 四种常用ExecutorService特性"></a>1.1 四种常用ExecutorService特性</h5><table><thead><tr><th>类型</th><th>核心线程数</th><th>最大线程数</th><th>KeepAlive时间(存活时间)</th><th align="center">任务队列</th><th>拒绝策略</th></tr></thead><tbody><tr><td>newCachedThreadPool(可缓存线程池)</td><td>0</td><td>Integer.MAX_VALUE</td><td>60s</td><td align="center">SynchronousQueue</td><td>线程池无限大，当执行第二个任务已经完成，会复用执行第一个任务的线程。</td></tr><tr><td>newFixedThreadPool(定长线程池)</td><td>指定大小</td><td>指定大小(与核心线程数相同)</td><td>0</td><td align="center">LinkedBlockingQueue</td><td>线程池大小固定，没有可用的线程的时候，任务会放在队列等待，队列的长度无限制。</td></tr><tr><td>newSingleThreadExexutor</td><td>1</td><td>1</td><td>0</td><td align="center">LinkedBlockingQueue</td><td>单线程化的线程池，适用于业务逻辑上只允许1个线程进行处理的场景，保证所有任务按照指定顺序FIFO(先进先出)，LIFO(后进先出)，优先级执行。</td></tr><tr><td>newScheduledThreadPool</td><td>指定大小</td><td>Integer.MAX_VALUE</td><td>0</td><td align="center">DelayedWordQueue</td><td>定长线程池，支持定时及周期性任务执行。</td></tr></tbody></table><h5 id="1-2-ThreadPoolExecutor"><a href="#1-2-ThreadPoolExecutor" class="headerlink" title="1.2 ThreadPoolExecutor"></a>1.2 ThreadPoolExecutor</h5><p>《阿里巴巴 Java 开发手册》中规定线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。线程池的好处是<strong>减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题</strong>。如果不使用线程池，有可能<strong>造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题</strong>。而且线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式。这样的处理方式能够<strong>更加明确线程池的运行规则，规避资源耗尽的风险</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                              <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                              <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong><br><strong>corePoolSize：</strong>核心线程数，指定了线程池中的线程池数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到workQueue任务队列中；</p><p><strong>maximumPoolSize：</strong>指定了线程池中的最大线程数量，这个参数会根据使用的workQueue任务队列的类型，决定线程池会开辟的最大线程数量。</p><p>核心和最大线程数大小仅在构建时设置，但也可以使用 <code>setCorePoolSize()</code> 和 <code>setMaximumPoolSize()</code> 进行动态更改。<br><strong>keepAliveTime：</strong>当线程池中的空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁。如果线程池在以后会变得更加活跃，则应构建线程或者使用<code>setKeepAliveTime(long, TimeUnit)</code>方法。</p><p><strong>unit：</strong>keepAliveTime的单位</p><p><strong>workQueue：</strong>阻塞队列(用来保存等待被执行的任务)</p><ol><li>ArrayBlockingQueue：基于数组结构的<strong>有界任务队列</strong>，按照FIFO排序任务。若有新的任务需要执行时，线程会创建新的线程，直到创建的线程数量达到corePoolSize时，则会将新的任务加入到等待队列中。若等待队列已满，即超过ArrayBlockingQueue初始化的容量，则继续创建线程数量达到maximumPoolSize，则执行拒绝策略。这种情况下，线程数量的上限与有界任务队列的状态有直接关系，如果有界任务队列的初始容量比较大或者没有达到超负荷状态，线程数将会一直维持在corePoolSize以下，反之，则会以maximumPoolSize为最大线程数上限。</li><li><strong>没有预定义容量</strong>的LinkedBlockingQueue：基于链表结构的<strong>无界任务队列</strong>，按照FIFO排序任务。使用无界任务队列，线程池的任务队列可以无限制的添加新的任务，当线程数达到corePoolSize后就不会再增加了。使用无界任务队列将导致新任务在队列中等待，从而导致maximumPoolSize的值没有任何作用。当使用这种任务队列模式时，一定要注意任务提交与处理之间的协调与控制，不然会出现队列中的任务由于无法及时处理导致一直增长，直到最后资源耗尽的问题。这种队列方式可以用于平滑瞬时大量请求。</li><li>SynchronousQueue：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于ArrayBlockingQueue。<strong>直接握手队列</strong>：它将任务交给线程而不需要保留，如果没有线程立即可用来运行它，那么排队任务的尝试将失败，因此构建新的线程，如果达到maximumPoolSize设置的最大值，则根据设置的handler执行拒绝策略。在这种情况下，需要对程序的并发量有个准确的评估，才能设置合适的maximumPoolSize数量避免执行拒绝策略。应注意，当任务持续以平均提交速度大于平均处理速度时，会导致线程数量会无限增长问题。</li><li>PriorityBlockingQueue：具有优先级的无界任务队列。<strong>优先任务队列</strong>：特殊的无界任务队列，无论添加了多少个任务，线程数量都不会超过corePoolSize。其它队列一般是按照FIFO(先进先出)的规则处理任务，而PriorityBlockingQueue队列可以自定义规则根据任务的优先级顺序先后执行。</li></ol><p><strong>threadFactory：</strong>线程工程，用于创建线程。如果未另行指定，则使用Executors.<strong>defaultThreadFactory</strong>默认工厂，使其全部位于同一个ThreadGroup中，并具有相同的NORM_PRIORITY优先级和非守护进程状态。通过不同的ThreadFactory可以更改线程的名称，线程组，优先级，守护进程状态等。privilegedThreadFactory：继承自defaultThreadFactory，主要添加了访问权限校验。</p><p><strong>handler：</strong>拒绝策略，创建线程池时，为防止资源被耗尽，任务队列都会选择创建有界任务队列，但如果出现任务队列已满且线程池创建的线程数达到maximumPoolSize时，这时就需要指定ThreadPoolExecutor的RejectedExecutionHandler参数即合理的拒绝策略，来处理线程池”超载”的情况。ThreadPoolExecutor自带的拒绝策略如下：</p><ol><li>AbortPolicy：默认策略，丢掉任务直接抛出RejectedExecutionException异常，阻止系统正常工作。</li><li>CallerRunsPolicy：如果线程池的线程池的线程数量达到上限，该策略会把拒绝的任务放在调用者线程当中运行，如果执行程序已关闭，则会丢弃该任务。</li><li>DiscardPolicy：该策略会默默丢弃无法处理的任务，不会抛出任何异常，使用此策略，业务场景中需允许任务的丢失。</li><li>DiscardOldestPolicy：该策略会丢弃任务队列中最老的一个任务，也就是当前任务队列中最先被添加进去的。即每次移除队头元素后再尝试入队。</li></ol><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">8</span>, <span class="number">16</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">100</span>), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">testTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testTask testTask = <span class="keyword">new</span> testTask();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(testTask);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h3&gt;&lt;h4 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&quot;../../../../assets/img/11183270.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://tonymua.top/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://tonymua.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="http://tonymua.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(四.Spring Data Elasticsearch)</title>
    <link href="http://tonymua.top/20904/"/>
    <id>http://tonymua.top/20904/</id>
    <published>2021-05-08T13:19:59.240Z</published>
    <updated>2020-04-29T02:44:38.093Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Spring-Data-Elasticsearch"><a href="#Spring-Data-Elasticsearch" class="headerlink" title="Spring Data Elasticsearch"></a>Spring Data Elasticsearch</h3><p>Elasticsearch提供的Java客户端有一些不太方便的地方：</p><ul><li>很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的</li><li>需要自己把对象序列化为json存储</li><li>查询到结果也需要自己反序列化为对象</li></ul><p>Spring提供的套件：Spring Data Elasticsearch。</p><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h4><p>Spring Data Elasticsearch是Spring Data项目下的一个子模块。</p><p>查看 Spring Data的官网：<span class="exturl" data-url="aHR0cDovL3Byb2plY3RzLnNwcmluZy5pby9zcHJpbmctZGF0YS8=">http://projects.spring.io/spring-data/<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><p>Spring Data 的使命是给各种数据访问提供统一的编程接口，不管是关系型数据库（如MySQL），还是非关系数据库（如Redis），或者类似Elasticsearch这样的索引数据库。从而简化开发人员的代码，提高开发效率。</p><p>特征：</p><ul><li>支持Spring的基于<code>@Configuration</code>的java配置方式，或者XML配置方式</li><li>提供了用于操作ES的便捷工具类<strong><code>ElasticsearchTemplate</code></strong>。包括实现文档到POJO之间的自动智能映射。</li><li>利用Spring的数据转换服务实现的功能丰富的对象映射</li><li>基于注解的元数据映射方式，而且可扩展以支持更多不同的数据格式</li><li>根据持久层接口自动生成对应实现方法，无需人工编写基本操作代码（类似mybatis，根据接口自动得到实现）。当然，也支持人工定制查询</li></ul><h4 id="2-创建Demo工程"><a href="#2-创建Demo工程" class="headerlink" title="2 创建Demo工程"></a>2 创建Demo工程</h4><p><strong>pom依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lwy.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>es_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml文件配置：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure><p><strong>启动类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EsApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-实体类及注解"><a href="#3-实体类及注解" class="headerlink" title="3 实体类及注解"></a>3 实体类及注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"heima3"</span>, type = <span class="string">"item"</span>, shards = <span class="number">1</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Long)</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_smart"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">// 分类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Double)</span><br><span class="line">    <span class="keyword">private</span> Double price; <span class="comment">// 价格</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword, index = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String images; <span class="comment">// 图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>映射</p></blockquote><p>Spring Data通过注解来声明字段的映射属性，有下面的三个注解：</p><ul><li><code>@Document</code> 作用在类，标记实体类为文档对象，一般有两个属性<ul><li>indexName：对应索引库名称</li><li>type：对应在索引库中的类型</li><li>shards：分片数量，默认5</li><li>replicas：副本数量，默认1</li></ul></li><li><code>@Id</code> 作用在成员变量，标记一个字段作为id主键</li><li><code>@Field</code> 作用在成员变量，标记为文档的字段，并指定字段映射属性：<ul><li>type：字段类型，取值是枚举：FieldType</li><li>index：是否索引，布尔类型，默认是true</li><li>store：是否存储，布尔类型，默认是false</li><li>analyzer：分词器名称</li></ul></li></ul><h4 id="4-Template索引操作"><a href="#4-Template索引操作" class="headerlink" title="4 Template索引操作"></a>4 Template索引操作</h4><h5 id="4-1-创建索引和映射"><a href="#4-1-创建索引和映射" class="headerlink" title="4.1 创建索引和映射"></a>4.1 创建索引和映射</h5><blockquote><p>创建索引</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= EsApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ElasticsearchTemplate template;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引库，会根据Item类的@Document注解信息来创建</span></span><br><span class="line">        template.createIndex(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//配置映射，会根据Item类中的id、Field等字段来自动完成映射</span></span><br><span class="line">        template.putMapping(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-删除索引"><a href="#4-2-删除索引" class="headerlink" title="4.2 删除索引"></a>4.2 删除索引</h5><p>删除索引的API：</p><p>可以根据类名或索引名删除。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    esTemplate.deleteIndex(<span class="string">"heima"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Repository文档操作"><a href="#5-Repository文档操作" class="headerlink" title="5 Repository文档操作"></a>5 Repository文档操作</h4><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p><p>我们只需要定义接口，然后继承它就OK了。</p><h5 id="5-1-批量新增"><a href="#5-1-批量新增" class="headerlink" title="5.1 批量新增"></a>5.1 批量新增</h5><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">" 手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">" 手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/3.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-修改文档"><a href="#5-2-修改文档" class="headerlink" title="5.2 修改文档"></a>5.2 修改文档</h5><p>修改和新增是同一个接口，区分的依据就是id，这一点跟我们在页面发起PUT请求是类似的。</p><h5 id="5-3-基本查询"><a href="#5-3-基本查询" class="headerlink" title="5.3 基本查询"></a>5.3 基本查询</h5><p>ElasticsearchRepository提供了一些基本的查询方法：</p><p>查询所有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询全部，并安装价格降序排序</span></span><br><span class="line">    Iterable&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">"price"</span>));</span><br><span class="line">    items.forEach(item-&gt; System.out.println(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-自定义方法"><a href="#5-4-自定义方法" class="headerlink" title="5.4 自定义方法"></a>5.4 自定义方法</h5><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p><p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p><p>当然，方法名称要符合一定的约定：</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>{&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByPriceLessThan</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByPriceGreaterThan</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByNameEndingWith</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>Contains/Containing</code></td><td><code>findByNameContaining</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}}</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td><code>findByAvailableTrue</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td></tr><tr><td><code>False</code></td><td><code>findByAvailableFalse</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}}</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAvailableTrueOrderByNameDesc</code></td><td><code>{&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td></tr></tbody></table><p>例如，我们来按照价格区间查询，定义这样的一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">findByPriceBetween</span><span class="params">(Double begin,Double end)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加一些测试数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">"小米手机7"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">3299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">"手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">4L</span>, <span class="string">"小米Mix2S"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">4299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">5L</span>, <span class="string">"荣耀V10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">2799.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要写实现类，然后我们直接去运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">this</span>.itemRepository.findByPriceBetween(<span class="number">2000.00</span>, <span class="number">3500.00</span>);</span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">"item = "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-高级查询"><a href="#6-高级查询" class="headerlink" title="6 高级查询"></a>6 高级查询</h4><h5 id="6-1-自定义查询"><a href="#6-1-自定义查询" class="headerlink" title="6.1 自定义查询"></a>6.1 自定义查询</h5><p>先来看最基本的match query：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"小米"</span>));</span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p><p><code>Page&lt;item&gt;</code>：默认是分页查询，因此返回的是一个分页的结果对象，包含属性：</p><ul><li>totalElements：总条数</li><li>totalPages：总页数</li><li>Iterator：迭代器，本身实现了Iterator接口，因此可直接迭代得到当前页的数据</li></ul><h5 id="6-2-分页查询"><a href="#6-2-分页查询" class="headerlink" title="6.2 分页查询"></a>6.2 分页查询</h5><p>利用<code>NativeSearchQueryBuilder</code>可以方便的实现分页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">//结果过滤</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"title"</span>,<span class="string">"price"</span>&#125;,<span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">//添加查询条件</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"title"</span>,<span class="string">"小米"</span>));</span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">"price"</span>).order(SortOrder.DESC));</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    Page&lt;Item&gt; items = repository.search(queryBuilder.build());</span><br><span class="line">    <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    System.out.println(items.getSize());</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    System.out.println(items.getNumber());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-排序"><a href="#6-3-排序" class="headerlink" title="6.3 排序"></a>6.3 排序</h5><p>排序也通用通过<code>NativeSearchQueryBuilder</code>完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">"category"</span>, <span class="string">"手机"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">"price"</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-聚合"><a href="#7-聚合" class="headerlink" title="7 聚合"></a>7 聚合</h4><h5 id="7-1-聚合为桶"><a href="#7-1-聚合为桶" class="headerlink" title="7.1 聚合为桶"></a>7.1 聚合为桶</h5><p>桶就是分组，比如这里我们按照品牌brand进行分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    String aggName=<span class="string">"popularBrand"</span>;</span><br><span class="line">    <span class="comment">//聚合</span></span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(aggName).field(<span class="string">"brand"</span>));</span><br><span class="line">    <span class="comment">//查询并返回</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; items = template.queryForPage(queryBuilder.build(), Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//解析聚合</span></span><br><span class="line">    Aggregations aggs = items.getAggregations();</span><br><span class="line">    <span class="comment">//获取指定名称的聚合</span></span><br><span class="line">    StringTerms terms = aggs.get(aggName);</span><br><span class="line">    <span class="comment">//获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = terms.getBuckets();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        System.out.println(bucket.getKeyAsString()+bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键API：</p><ul><li><p><code>AggregationBuilders</code>：聚合的构建工厂类。所有聚合都由这个类来构建</p></li><li><p><code>AggregatedPage</code>：聚合查询的结果类。它是<code>Page&lt;T&gt;</code>的子接口：</p><p><code>AggregatedPage</code>在<code>Page</code>功能的基础上，拓展了与聚合相关的功能，它其实就是对聚合结果的一种封装，而返回的结果都是Aggregation类型对象，不过根据字段类型不同，又有不同的子类表示</p></li></ul><h5 id="7-2-嵌套聚合，求平均值"><a href="#7-2-嵌套聚合，求平均值" class="headerlink" title="7.2 嵌套聚合，求平均值"></a>7.2 嵌套聚合，求平均值</h5><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">""</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"brands"</span>).field(<span class="string">"brand"</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.avg(<span class="string">"priceAvg"</span>).field(<span class="string">"price"</span>)) <span class="comment">// 在品牌聚合桶内进行嵌套聚合，求平均值</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">"brands"</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString() + <span class="string">"，共"</span> + bucket.getDocCount() + <span class="string">"台"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.6.获取子聚合结果：</span></span><br><span class="line">        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(<span class="string">"priceAvg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"平均售价："</span> + avg.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Data-Elasticsearch&quot;&gt;&lt;a href=&quot;#Spring-Data-Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;Spring Data Elasticsearch&quot;&gt;&lt;/a&gt;Spring Data Elasticsearch&lt;/h3&gt;&lt;p&gt;Elasticsearch提供的Java客户端有一些不太方便的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的&lt;/li&gt;
&lt;li&gt;需要自己把对象序列化为json存储&lt;/li&gt;
&lt;li&gt;查询到结果也需要自己反序列化为对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring提供的套件：Spring Data Elasticsearch。&lt;/p&gt;
&lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1 简介&quot;&gt;&lt;/a&gt;1 简介&lt;/h4&gt;&lt;p&gt;Spring Data Elasticsearch是Spring Data项目下的一个子模块。&lt;/p&gt;
&lt;p&gt;查看 Spring Data的官网：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL3Byb2plY3RzLnNwcmluZy5pby9zcHJpbmctZGF0YS8=&quot;&gt;http://projects.spring.io/spring-data/&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(十一.购物车)</title>
    <link href="http://tonymua.top/15426/"/>
    <id>http://tonymua.top/15426/</id>
    <published>2021-05-08T13:19:59.239Z</published>
    <updated>2020-04-29T02:44:38.095Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-搭建购物车服务"><a href="#1-搭建购物车服务" class="headerlink" title="1.搭建购物车服务"></a>1.搭建购物车服务</h3><h4 id="1-1-创建module"><a href="#1-1-创建module" class="headerlink" title="1.1 创建module"></a>1.1 创建module</h4><h4 id="1-2-pom依赖"><a href="#1-2-pom依赖" class="headerlink" title="1.2 pom依赖"></a>1.2 pom依赖</h4><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-cart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-配置文件"><a href="#1-3-配置文件" class="headerlink" title="1.3 配置文件"></a>1.3 配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cart-service</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8090/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span></span><br></pre></td></tr></table></figure><h3 id="2-购物车功能分析"><a href="#2-购物车功能分析" class="headerlink" title="2.购物车功能分析"></a>2.购物车功能分析</h3><h4 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h4><p>需求描述：</p><ul><li>用户可以在登录状态下将商品添加到购物车<ul><li>放入数据库</li><li>mongodb</li><li>放入redis（采用）</li></ul></li><li>用户可以在未登录状态下将商品添加到购物车<ul><li>放入localstorage</li><li>cookie</li><li>webSQL</li></ul></li><li>用户可以使用购物车一起结算下单</li><li>用户可以查询自己的购物车</li><li>用户可以在购物车中修改购买商品的数量。</li><li>用户可以在购物车中删除商品。</li><li>在购物车中展示商品优惠信息</li><li>提示购物车商品价格变化</li></ul><h4 id="2-2-流程图"><a href="#2-2-流程图" class="headerlink" title="2.2 流程图"></a>2.2 流程图</h4><p><img data-src="../../../../assets/img/1527585343248.png" alt></p><p>这幅图主要描述了两个功能：新增商品到购物车、查询购物车。</p><p>新增商品：</p><ul><li>判断是否登录<ul><li>是：则添加商品到后台Redis中</li><li>否：则添加商品到本地的Localstorage</li></ul></li></ul><p>无论哪种新增，完成后都需要查询购物车列表：</p><ul><li>判断是否登录<ul><li>否：直接查询localstorage中数据并展示</li><li>是：已登录，则需要先看本地是否有数据，<ul><li>有：需要提交到后台添加到redis，合并数据，而后查询</li><li>否：直接去后台查询redis，而后返回</li></ul></li></ul></li></ul><h3 id="3-未登录购物车"><a href="#3-未登录购物车" class="headerlink" title="3.未登录购物车"></a>3.未登录购物车</h3><h4 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3.1 准备"></a>3.1 准备</h4><h5 id="3-1-1-购物车的数据结构"><a href="#3-1-1-购物车的数据结构" class="headerlink" title="3.1.1 购物车的数据结构"></a>3.1.1 购物车的数据结构</h5><p>首先分析一下未登录购物车的数据结构。</p><p>每一个购物车信息，都是一个对象，包含：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    skuId:<span class="number">2131241</span>,</span><br><span class="line">    title:<span class="string">"小米6"</span>,</span><br><span class="line">    image:<span class="string">""</span>,</span><br><span class="line">    price:<span class="number">190000</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    ownSpec:<span class="string">"&#123;"</span>机身颜色<span class="string">":"</span>陶瓷黑尊享版<span class="string">","</span>内存<span class="string">":"</span><span class="number">6</span>GB<span class="string">","</span>机身存储<span class="string">":"</span><span class="number">128</span>GB<span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，购物车中不止一条数据，因此最终会是对象的数组。即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;...&#125;,&#123;...&#125;,&#123;...&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="3-1-2-web本地存储"><a href="#3-1-2-web本地存储" class="headerlink" title="3.1.2 web本地存储"></a>3.1.2 web本地存储</h5><p>知道了数据结构，下一个问题，就是如何保存购物车数据。前面我们分析过，可以使用Localstorage来实现。Localstorage是web本地存储的一种，那么，什么是web本地存储呢？</p><p><strong>什么是web本地存储？</strong></p><p><img data-src="../../../../assets/img/1527587496457.png" alt></p><p>web本地存储主要有两种方式：</p><ul><li>LocalStorage：localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。 </li><li>SessionStorage：sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。 </li></ul><p><strong>LocalStorage的用法</strong></p><p>语法非常简单：</p><p><img data-src="../../../../assets/img/1533739711101.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>); <span class="comment">// 存储数据</span></span><br><span class="line">localStorage.getItem(<span class="string">"key"</span>); <span class="comment">// 获取数据</span></span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>); <span class="comment">// 删除数据</span></span><br></pre></td></tr></table></figure><p>注意：<strong>localStorage和SessionStorage都只能保存字符串</strong>。</p><p>不过，在我们的common.js中，已经对localStorage进行了简单的封装：</p><p><img data-src="../../../../assets/img/1533739810927.png" alt></p><p>示例：</p><p><img data-src="../../../../assets/img/1533739929733.png" alt></p><h4 id="3-2-添加购物车"><a href="#3-2-添加购物车" class="headerlink" title="3.2 添加购物车"></a>3.2 添加购物车</h4><h5 id="3-2-1-点击事件"><a href="#3-2-1-点击事件" class="headerlink" title="3.2.1 点击事件"></a>3.2.1 点击事件</h5><p>现在点击加入购物车会跳转到购物车成功页面。</p><p>不过我们不这么做，我们绑定点击事件，然后实现添加购物车功能。</p><p>addCart方法中判断用户的登录状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addCart()&#123;</span><br><span class="line">   ly.http.get(<span class="string">"/auth/verify"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="comment">// 已登录发送信息到后台，保存到redis中</span></span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="comment">// 未登录保存在浏览器本地的localStorage中</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-获取数量，添加购物车"><a href="#3-2-2-获取数量，添加购物车" class="headerlink" title="3.2.2 获取数量，添加购物车"></a>3.2.2 获取数量，添加购物车</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">addCart()&#123;</span><br><span class="line">    ly.verifyUser().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 已登录发送信息到后台，保存到redis中</span></span><br><span class="line"></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 未登录保存在浏览器本地的localStorage中</span></span><br><span class="line">        <span class="comment">// 1、查询本地购物车</span></span><br><span class="line">        <span class="keyword">let</span> carts = ly.store.get(<span class="string">"carts"</span>) || [];</span><br><span class="line">        <span class="keyword">let</span> cart = carts.find(<span class="function"><span class="params">c</span>=&gt;</span>c.skuId===<span class="keyword">this</span>.sku.id);</span><br><span class="line">        <span class="comment">// 2、判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cart) &#123;</span><br><span class="line">            <span class="comment">// 3、存在更新数量</span></span><br><span class="line">            cart.num += <span class="keyword">this</span>.num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4、不存在，新增</span></span><br><span class="line">            cart = &#123;</span><br><span class="line">                skuId: <span class="keyword">this</span>.sku.id,</span><br><span class="line">                title: <span class="keyword">this</span>.sku.title,</span><br><span class="line">                price: <span class="keyword">this</span>.sku.price,</span><br><span class="line">                image: <span class="keyword">this</span>.sku.images,</span><br><span class="line">                num: <span class="keyword">this</span>.num,</span><br><span class="line">                ownSpec: <span class="keyword">this</span>.ownSpec</span><br><span class="line">            &#125;</span><br><span class="line">            carts.push(cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把carts写回localstorage</span></span><br><span class="line">        ly.store.set(<span class="string">"carts"</span>, carts);</span><br><span class="line">        <span class="comment">// 跳转</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/cart.html"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-查询购物车"><a href="#3-3-查询购物车" class="headerlink" title="3.3 查询购物车"></a>3.3 查询购物车</h4><p>页面加载时，就应该去查询购物车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cartVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#cartApp"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ly,</span><br><span class="line">        carts: [],<span class="comment">// 购物车数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadCarts();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        loadCarts() &#123;</span><br><span class="line">            <span class="comment">// 先判断登录状态</span></span><br><span class="line">            ly.verifyUser().then(() =&gt; &#123;</span><br><span class="line">                    <span class="comment">// 已登录</span></span><br><span class="line"></span><br><span class="line">                &#125;).<span class="keyword">catch</span>(() =&gt; &#123;</span><br><span class="line">                    <span class="comment">// 未登录</span></span><br><span class="line">                    <span class="keyword">this</span>.carts = ly.store.get(<span class="string">"carts"</span>) || [];</span><br><span class="line">                    <span class="keyword">this</span>.selected = <span class="keyword">this</span>.carts;</span><br><span class="line">                &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    components: &#123;</span><br><span class="line">        shortcut: () =&gt; <span class="keyword">import</span>(<span class="string">"/js/pages/shortcut.js"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-修改数量"><a href="#3-4-修改数量" class="headerlink" title="3.4 修改数量"></a>3.4 修改数量</h4><p>我们给页面的 <code>+</code> 和 <code>-</code>绑定点击事件，修改num 的值：</p><p>两个事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">increment(c) &#123;</span><br><span class="line">    c.num++;</span><br><span class="line">    ly.verifyUser().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 已登录，向后台发起请求</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未登录，直接操作本地数据</span></span><br><span class="line">        ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">decrement(c) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c.num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c.num--;</span><br><span class="line">    ly.verifyUser().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 已登录，向后台发起请求</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未登录，直接操作本地数据</span></span><br><span class="line">        ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-删除商品"><a href="#3-5-删除商品" class="headerlink" title="3.5 删除商品"></a>3.5 删除商品</h4><p>给删除按钮绑定事件：</p><p>点击事件中删除商品：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deleteCart(i)&#123;</span><br><span class="line">    ly.verifyUser().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// TODO，已登录购物车</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 未登录购物车</span></span><br><span class="line">        <span class="keyword">this</span>.carts.splice(i, <span class="number">1</span>);</span><br><span class="line">        ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-总价格"><a href="#3-6-总价格" class="headerlink" title="3.6 总价格"></a>3.6 总价格</h4><p>然后编写一个计算属性，计算出选中商品总价格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    totalPrice() &#123;</span><br><span class="line">        <span class="keyword">return</span> ly.formatPrice(<span class="keyword">this</span>.selected.reduce(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c1 + c2.num * c2.price, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-已登录购物车"><a href="#4-已登录购物车" class="headerlink" title="4.已登录购物车"></a>4.已登录购物车</h3><p>接下来，我们完成已登录购物车。</p><p>在刚才的未登录购物车编写时，我们已经预留好了编写代码的位置，逻辑也基本一致。</p><p><img data-src="../../../../assets/img/215923.jpg" alt></p><h4 id="4-1-添加登录校验"><a href="#4-1-添加登录校验" class="headerlink" title="4.1 添加登录校验"></a>4.1 添加登录校验</h4><p>购物车系统只负责登录状态的购物车处理，因此需要添加登录校验，我们通过JWT鉴权即可实现。</p><h5 id="4-1-1-引入JWT相关依赖"><a href="#4-1-1-引入JWT相关依赖" class="headerlink" title="4.1.1 引入JWT相关依赖"></a>4.1.1 引入JWT相关依赖</h5><p>我们引入之前写的鉴权工具：<code>ly-auth-common</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-配置公钥"><a href="#4-1-2-配置公钥" class="headerlink" title="4.1.2 配置公钥"></a>4.1.2 配置公钥</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">C:/tmp/rsa/rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br></pre></td></tr></table></figure><h5 id="4-1-3-加载公钥"><a href="#4-1-3-加载公钥" class="headerlink" title="4.1.3 加载公钥"></a>4.1.3 加载公钥</h5><p><strong>JwtProperties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostContruct</span>：在构造方法执行之后执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取公钥私钥</span></span><br><span class="line">        publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4-编写拦截器"><a href="#4-1-4-编写拦截器" class="headerlink" title="4.1.4 编写拦截器"></a>4.1.4 编写拦截器</h5><p>因为很多接口都需要进行登录，我们直接编写SpringMVC拦截器，进行统一登录校验。同时，我们还要把解析得到的用户信息保存起来，以便后续的接口可以使用。</p><p><strong>UserInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserInfo&gt; THREAD_LOCAL=<span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInterceptor</span><span class="params">(JwtProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prop=prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取cookie中的token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, prop.getCookieName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//解析token</span></span><br><span class="line">            UserInfo user = JwtUtils.getInfoFromToken(token, prop.getPublicKey());</span><br><span class="line">            <span class="comment">//传递user</span></span><br><span class="line">            THREAD_LOCAL.set(user);</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"[购物车服务] 解析用户身份失败"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用完数据,一定要清空</span></span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里我们使用了<code>ThreadLocal</code>来存储查询到的用户信息，线程内共享，因此请求到达<code>Controller</code>后可以共享User</li><li>并且对外提供了静态的方法：<code>getLoginUser()</code>来获取User信息</li></ul><h5 id="4-1-5-配置拦截器"><a href="#4-1-5-配置拦截器" class="headerlink" title="4.1.5 配置拦截器"></a>4.1.5 配置拦截器</h5><p>配置SpringMVC，使过滤器生效：</p><p><strong>MVCConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> UserInterceptor(prop)).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-后台购物车设计"><a href="#4-2-后台购物车设计" class="headerlink" title="4.2 后台购物车设计"></a>4.2 后台购物车设计</h4><p>当用户登录时，我们需要把购物车数据保存到后台，可以选择保存在数据库。但是购物车是一个读写频率很高的数据。因此我们这里选择读写效率比较高的Redis作为购物车存储。</p><p>Redis有5种不同数据结构，这里选择哪一种比较合适呢？Map&lt;String, List<string>&gt;</string></p><ul><li>首先不同用户应该有独立的购物车，因此购物车应该以用户的作为key来存储，Value是用户的所有购物车信息。这样看来基本的<code>k-v</code>结构就可以了。</li><li>但是，我们对购物车中的商品进行增、删、改操作，基本都需要根据商品id进行判断，为了方便后期处理，我们的购物车也应该是<code>k-v</code>结构，key是商品id，value才是这个商品的购物车信息。</li></ul><p>综上所述，我们的购物车结构是一个双层Map：Map&lt;String,Map&lt;String,String&gt;&gt; </p><ul><li>第一层Map，Key是用户id</li><li>第二层Map，Key是购物车中商品id，值是购物车数据</li></ul><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;<span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long skuId;<span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 图片</span></span><br><span class="line">    <span class="keyword">private</span> Long price;<span class="comment">// 加入购物车时的价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;<span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> String ownSpec;<span class="comment">// 商品规格参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-添加商品到购物车"><a href="#4-3-添加商品到购物车" class="headerlink" title="4.3 添加商品到购物车"></a>4.3 添加商品到购物车</h4><h5 id="4-3-1-页面发起请求"><a href="#4-3-1-页面发起请求" class="headerlink" title="4.3.1 页面发起请求"></a>4.3.1 页面发起请求</h5><p>已登录情况下，向后台添加购物车：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ly.http.post(<span class="string">"/cart"</span>, &#123;<span class="attr">skuId</span>: <span class="keyword">this</span>.sku.id, <span class="attr">num</span>: <span class="keyword">this</span>.num&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location = <span class="string">"http://www.leyou.com/cart.html"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里发起的是Json请求。那么我们后台也要以json接收。</p><h5 id="4-3-2-编写controller"><a href="#4-3-2-编写controller" class="headerlink" title="4.3.2 编写controller"></a>4.3.2 编写controller</h5><p>先分析一下：</p><ul><li>请求方式：新增，肯定是Post</li><li>请求路径：/cart ，这个其实是Zuul路由的路径，我们可以不管</li><li>请求参数：Json对象，包含skuId和num属性</li><li>返回结果：无</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addCart</span><span class="params">(@RequestBody Cart cart)</span></span>&#123;</span><br><span class="line">        cartService.addCart(cart);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ly-gateway中添加路由配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cart-service:</span> <span class="string">/cart/**</span></span><br></pre></td></tr></table></figure><h5 id="4-3-3-CartService"><a href="#4-3-3-CartService" class="headerlink" title="4.3.3 CartService"></a>4.3.3 CartService</h5><p>这里我们不访问数据库，而是直接操作Redis。基本思路：</p><ul><li>先查询之前的购物车数据</li><li>判断要添加的商品是否存在<ul><li>存在：则直接修改数量后写回Redis</li><li>不存在：新建一条数据，然后写入Redis</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">"cart:user:id:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCart</span><span class="params">(Cart cart)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取登录的用户</span></span><br><span class="line">        UserInfo user = UserInterceptor.getUser();</span><br><span class="line">        <span class="comment">//key</span></span><br><span class="line">        String key=KEY_PREFIX+user.getId();</span><br><span class="line">        BoundHashOperations&lt;String, Object, Object&gt; operations = redisTemplate.boundHashOps(key);</span><br><span class="line">        <span class="comment">//hashKey</span></span><br><span class="line">        String hashKey = cart.getSkuId().toString();</span><br><span class="line">        <span class="comment">//判断当前购物车商品,是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (operations.hasKey(hashKey)) &#123;</span><br><span class="line">            <span class="comment">//是,修改数量</span></span><br><span class="line">            String json = operations.get(hashKey).toString();</span><br><span class="line">            Cart cacheCart = JsonUtils.toBean(json, Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            cacheCart.setNum(cacheCart.getNum()+cart.getNum());</span><br><span class="line">            <span class="comment">//写回redis</span></span><br><span class="line">            operations.put(hashKey,JsonUtils.toString(cacheCart));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否,新增</span></span><br><span class="line">            operations.put(hashKey,JsonUtils.toString(cart));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-查询购物车"><a href="#4-4-查询购物车" class="headerlink" title="4.4 查询购物车"></a>4.4 查询购物车</h4><p><strong>CartController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Cart&gt;&gt; queryCartList()&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(cartService.queryCartList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CartService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">queryCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取登录用户</span></span><br><span class="line">        UserInfo user = UserInterceptor.getUser();</span><br><span class="line">        <span class="comment">//key</span></span><br><span class="line">        String key=KEY_PREFIX+user.getId();</span><br><span class="line">        <span class="keyword">if</span> (!redisTemplate.hasKey(key))&#123;</span><br><span class="line">            <span class="comment">//key不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CART_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取登录用户的所有的购物车</span></span><br><span class="line">        BoundHashOperations&lt;String, Object, Object&gt; operations = redisTemplate.boundHashOps(key);</span><br><span class="line">        List&lt;Cart&gt; carts = operations.values().stream().map(o -&gt; JsonUtils.toBean(o.toString(), Cart<span class="class">.<span class="keyword">class</span>)).<span class="title">collect</span>(<span class="title">Collectors</span>.<span class="title">toList</span>())</span>;</span><br><span class="line">        <span class="keyword">return</span> carts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-修改商品数量"><a href="#4-5-修改商品数量" class="headerlink" title="4.5 修改商品数量"></a>4.5 修改商品数量</h4><p><strong>CartController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateCart</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span>Long skuId,@<span class="title">RequestParam</span><span class="params">(<span class="string">"num"</span>)</span>Integer num)</span>&#123;</span><br><span class="line">    cartService.updateCart(skuId,num);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CartService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCart</span><span class="params">(Long skuId, Integer num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取登录的用户</span></span><br><span class="line">    UserInfo user = UserInterceptor.getUser();</span><br><span class="line">    <span class="comment">//key</span></span><br><span class="line">    String key=KEY_PREFIX+user.getId();</span><br><span class="line">    <span class="comment">//hashKey</span></span><br><span class="line">    String hashKey = skuId.toString();</span><br><span class="line">    <span class="comment">//获取操作</span></span><br><span class="line">    BoundHashOperations&lt;String, Object, Object&gt; operations = redisTemplate.boundHashOps(key);</span><br><span class="line">    <span class="comment">//判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!operations.hasKey(hashKey))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CART_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询购物车</span></span><br><span class="line">    Cart cart = JsonUtils.toBean(operations.get(hashKey).toString(), Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    cart.setNum(num);</span><br><span class="line">    <span class="comment">//写回redis</span></span><br><span class="line">    operations.put(hashKey,JsonUtils.toString(cart));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-删除购物车商品"><a href="#4-6-删除购物车商品" class="headerlink" title="4.6 删除购物车商品"></a>4.6 删除购物车商品</h4><p><strong>CartController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"&#123;skuId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteCart</span><span class="params">(@PathVariable(<span class="string">"skuId"</span>)</span>Long skuId)</span>&#123;</span><br><span class="line">    cartService.deleteCart(skuId);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CartService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCart</span><span class="params">(Long skuId)</span> </span>&#123;</span><br><span class="line">    UserInfo user = UserInterceptor.getUser();</span><br><span class="line">    String key=KEY_PREFIX+user.getId();</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    redisTemplate.opsForHash().delete(key,skuId.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-搭建购物车服务&quot;&gt;&lt;a href=&quot;#1-搭建购物车服务&quot; class=&quot;headerlink&quot; title=&quot;1.搭建购物车服务&quot;&gt;&lt;/a&gt;1.搭建购物车服务&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建module&quot;&gt;&lt;a href=&quot;#1-1-创建module&quot; class=&quot;headerlink&quot; title=&quot;1.1 创建module&quot;&gt;&lt;/a&gt;1.1 创建module&lt;/h4&gt;&lt;h4 id=&quot;1-2-pom依赖&quot;&gt;&lt;a href=&quot;#1-2-pom依赖&quot; class=&quot;headerlink&quot; title=&quot;1.2 pom依赖&quot;&gt;&lt;/a&gt;1.2 pom依赖&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(十.授权中心)</title>
    <link href="http://tonymua.top/39109/"/>
    <id>http://tonymua.top/39109/</id>
    <published>2021-05-08T13:19:59.238Z</published>
    <updated>2020-04-29T02:44:38.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-无状态登录原理"><a href="#1-无状态登录原理" class="headerlink" title="1.无状态登录原理"></a>1.无状态登录原理</h3><h4 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1 什么是有状态？"></a>1.1 什么是有状态？</h4><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p>缺点是什么？</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><a id="more"></a><h4 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2 什么是无状态"></a>1.2 什么是无状态</h4><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><ul><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><h4 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3 如何实现无状态"></a>1.3 如何实现无状态</h4><p>无状态登录的流程：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务的对token进行解密，判断是否有效。</li></ul><p><img data-src="../../../../assets/img/1527300483893.png" alt></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<strong>JWT + RSA非对称加密</strong></p><h4 id="1-4-JWT"><a href="#1-4-JWT" class="headerlink" title="1.4 JWT"></a>1.4 JWT</h4><h5 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h5><p>​    JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8=">https://jwt.io<i class="fa fa-external-link-alt"></i></span></p><h5 id="1-4-2-数据格式"><a href="#1-4-2-数据格式" class="headerlink" title="1.4.2 数据格式"></a>1.4.2 数据格式</h5><p>JWT包含三部分数据：</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>声明类型，这里是JWT</li></ul><p>我们会对头部进行base64编码，得到第一部分数据</p></li><li><p>Payload：载荷，就是有效数据，一般包含下面信息：</p><ul><li>用户身份信息（注意，这里因为采用base64编码，可解码，因此不要存放敏感信息）</li><li>注册声明：如token的签发时间，过期时间，签发人等</li></ul><p>这部分也会采用base64编码，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：token==个人证件  jwt=个人身份证</p><h5 id="1-4-3-JWT交互流程"><a href="#1-4-3-JWT交互流程" class="headerlink" title="1.4.3 JWT交互流程"></a>1.4.3 JWT交互流程</h5><p>流程图：</p><p><img data-src="../../../../assets/img/1527305891424.png" alt></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h5 id="1-4-4-非对称加密"><a href="#1-4-4-非对称加密" class="headerlink" title="1.4.4 非对称加密"></a>1.4.4 非对称加密</h5><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：  </p><ul><li>对称加密，如AES<ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证 </li></ul></li><li>非对称加密，如RSA<ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端<ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li></ul></li><li>不可逆加密，如MD5，SHA <ul><li>基本原理：加密过程中不需要使用<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODYlRTklOTIlQTU=">密钥<i class="fa fa-external-link-alt"></i></span>，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li></ul></li></ul><h4 id="1-5-结合Zuul的鉴权流程"><a href="#1-5-结合Zuul的鉴权流程" class="headerlink" title="1.5 结合Zuul的鉴权流程"></a>1.5 结合Zuul的鉴权流程</h4><p>我们逐步演进系统架构设计。需要注意的是：secret是签名的关键，因此一定要保密，我们放到鉴权中心保存，其它任何服务中都不能获取secret。</p><p><strong>结合RSA的鉴权</strong></p><p><img data-src="../../../../assets/img/1527313765010.png" alt></p><ul><li>我们首先利用RSA生成公钥和私钥。私钥保存在授权中心，公钥保存在Zuul和各个信任的微服务</li><li>用户请求登录</li><li>授权中心校验，通过后用私钥对JWT进行签名加密</li><li>返回jwt给用户</li><li>用户携带JWT访问</li><li>Zuul直接通过公钥解密JWT，进行验证，验证通过则放行</li><li>请求到达微服务，微服务直接用公钥解析JWT，获取用户信息，无需访问授权中心</li></ul><h3 id="2-授权中心"><a href="#2-授权中心" class="headerlink" title="2.授权中心"></a>2.授权中心</h3><h4 id="2-1-创建授权中心"><a href="#2-1-创建授权中心" class="headerlink" title="2.1 创建授权中心"></a>2.1 创建授权中心</h4><p>授权中心的主要职责：</p><ul><li>用户鉴权：<ul><li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li><li>使用私钥生成JWT并返回</li></ul></li><li>服务鉴权：微服务间的调用不经过Zuul，会有风险，需要鉴权中心进行认证<ul><li>原理与用户鉴权类似，但逻辑稍微复杂一些（此处我们不做实现）</li></ul></li></ul><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具。我们把鉴权中心进行聚合，一个工具module，一个提供服务的module</p><h5 id="2-1-1-创建父module"><a href="#2-1-1-创建父module" class="headerlink" title="2.1.1 创建父module"></a>2.1.1 创建父module</h5><p>我们先创建父module，名称为：ly-auth</p><p>将pom打包方式改为pom</p><h5 id="2-1-2-通用module"><a href="#2-1-2-通用module" class="headerlink" title="2.1.2 通用module"></a>2.1.2 通用module</h5><p>然后是授权服务的通用模块：ly-auth-common </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-1-3-授权服务"><a href="#2-1-3-授权服务" class="headerlink" title="2.1.3 授权服务"></a>2.1.3 授权服务</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">leyou@Login(Auth&#125;*^31)&amp;heiMa%</span> <span class="comment"># 登录校验的密钥</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">priKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pri</span> <span class="comment"># 私钥地址</span></span><br><span class="line">    <span class="attr">expire:</span> <span class="number">30</span> <span class="comment"># 过期时间,单位分钟</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span></span><br><span class="line">    <span class="attr">cookieMaxAge:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p>在ly-gateway工程的application.yaml中，修改路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span></span><br><span class="line">    <span class="attr">search-service:</span> <span class="string">/search/**</span></span><br><span class="line">    <span class="attr">upload-service:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/upload/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">upload-service</span></span><br><span class="line">      <span class="attr">strip-prefix:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user/**</span></span><br><span class="line">    <span class="attr">auth-service:</span> <span class="string">/auth/**</span> <span class="comment"># 授权中心微服务</span></span><br></pre></td></tr></table></figure><h4 id="2-2-JWT工具类"><a href="#2-2-JWT工具类" class="headerlink" title="2.2 JWT工具类"></a>2.2 JWT工具类</h4><p>我们在<code>ly-auth-common</code>中导入工具类：</p><p><strong>UserInfo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ly-auth-common</code>中编写测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pubKeyPath = <span class="string">"E:\\tmp\\rsa\\rsa.pub"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String priKeyPath = <span class="string">"E:\\tmp\\rsa\\rsa.pri"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RsaUtils.generateKey(pubKeyPath, priKeyPath, <span class="string">"234"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenerateToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(<span class="number">20L</span>, <span class="string">"jack"</span>), privateKey, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"token = "</span> + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="string">"eyJhbGciOiJSUzI1NiJ9.eyJpZCI6MjAsInVzZXJuYW1lIjoiamFjayIsImV4cCI6MTU2ODc4ODI5MX0.e5A7Ntxn-jhJ0UTdVQPIpJSniB8I8NhK88INwKiEpbXog9aSUpdV5Y3SubUf6FbaSp1wRDVqomrodqhNHb3k9mYBE43EZ3JzB5pod9QRklHMCXpMqV8jtlrhjzopTHEpIwiLsO2d3omjQOQZcamUUohKbWeIFeWUAz1C7DOtibU"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        UserInfo user = JwtUtils.getInfoFromToken(token, publicKey);</span><br><span class="line">        System.out.println(<span class="string">"id: "</span> + user.getId());</span><br><span class="line">        System.out.println(<span class="string">"userName: "</span> + user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试生成公钥和私钥，我们运行这段代码：**注意需要把@Before方法注释掉</li></ol><p>运行之后，查看目标目录：公钥和私钥已经生成了！</p><ol start="2"><li>测试生成token，把@Before的注释去掉</li><li>测试解析token：</li></ol><h4 id="2-3-编写登录授权接口"><a href="#2-3-编写登录授权接口" class="headerlink" title="2.3 编写登录授权接口"></a>2.3 编写登录授权接口</h4><p>接下来，我们需要在<code>leyou-auth-servcice</code>编写一个接口，对外提供登录授权服务。基本流程如下：</p><ul><li>客户端携带用户名和密码请求登录</li><li>授权中心调用用户中心接口，根据用户名和密码查询用户信息</li><li>如果用户名密码正确，能获取用户，否则为空，则登录失败</li><li>如果校验成功，则生成JWT并返回</li></ul><h5 id="2-3-1-生成公钥和私钥"><a href="#2-3-1-生成公钥和私钥" class="headerlink" title="2.3.1 生成公钥和私钥"></a>2.3.1 生成公钥和私钥</h5><p>我们需要在授权中心生成真正的公钥和私钥。我们必须有一个生成公钥和私钥的secret，这个可以配置到<code>application.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">leyou@Login(Auth&#125;*^31)&amp;heiMa%</span> <span class="comment"># 登录校验的密钥</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">priKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pri</span> <span class="comment"># 私钥地址</span></span><br><span class="line">    <span class="attr">expire:</span> <span class="number">30</span> <span class="comment"># 过期时间,单位分钟</span></span><br></pre></td></tr></table></figure><p>然后编写属性类，加载这些数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String secret; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String priKeyPath;<span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;<span class="comment">// token过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey; <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer cookieMaxAge;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JwtProperties<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostContruct</span>：在构造方法执行之后执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File pubKey = <span class="keyword">new</span> File(pubKeyPath);</span><br><span class="line">            File priKey = <span class="keyword">new</span> File(priKeyPath);</span><br><span class="line">            <span class="keyword">if</span> (!pubKey.exists() || !priKey.exists()) &#123;</span><br><span class="line">                <span class="comment">//生成公钥和私钥</span></span><br><span class="line">                RsaUtils.generateKey(pubKeyPath, priKeyPath, secret);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取公钥私钥</span></span><br><span class="line">            publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">            privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"初始化公钥和私钥失败！"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-Controller"><a href="#2-3-2-Controller" class="headerlink" title="2.3.2 Controller"></a>2.3.2 Controller</h5><p>编写授权接口，我们接收用户名和密码，校验成功后，写入cookie中。</p><ul><li>请求方式：post</li><li>请求路径：/accredit</li><li>请求参数：username和password</li><li>返回结果：无</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"accredit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">authentication</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">            HttpServletRequest request,</span></span><br><span class="line"><span class="function">            HttpServletResponse response</span></span><br><span class="line"><span class="function">    ) </span>&#123;</span><br><span class="line">        <span class="comment">//登录校验</span></span><br><span class="line">        String token = authService.authentication(username, password);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将token写入cookie,并指定httpOnly为true,防止通过JS获取和修改</span></span><br><span class="line">        CookieUtils.setCookie(request, response, prop.getCookieName(),</span><br><span class="line">                token, prop.getCookieMaxAge(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-UserClient"><a href="#2-3-3-UserClient" class="headerlink" title="2.3.3 UserClient"></a>2.3.3 UserClient</h5><p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 user-service微服务：</p><p>在ly-auth中引入user-service-interface依赖</p><p>在ly-auth-service中编写FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ly-user-interface工程中添加api接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"username"</span>)</span>String username,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String password</span></span><br><span class="line"><span class="function">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-4-AuthService"><a href="#2-3-4-AuthService" class="headerlink" title="2.3.4 AuthService"></a>2.3.4 AuthService</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authentication</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用微服务, 执行查询</span></span><br><span class="line">            User user = userClient.queryUser(username, password);</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果有查询结果，则生成token</span></span><br><span class="line">            String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(user.getId(), user.getUsername()), properties.getPrivateKey(), properties.getExpire());</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-解决cookie写入问题"><a href="#2-5-解决cookie写入问题" class="headerlink" title="2.5 解决cookie写入问题"></a>2.5 解决cookie写入问题</h4><h5 id="2-5-1-问题分析"><a href="#2-5-1-问题分析" class="headerlink" title="2.5.1 问题分析"></a>2.5.1 问题分析</h5><p>我们在之前测试时，清晰的看到了响应头中，有Set-Cookie属性，为什么在这里却什么都没有？</p><p>我们之前在讲cors跨域时，讲到过跨域请求cookie生效的条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li><li>浏览器发起ajax需要指定withCredentials 为true</li></ul><h5 id="2-5-2-解决host地址的变化"><a href="#2-5-2-解决host地址的变化" class="headerlink" title="2.5.2 解决host地址的变化"></a>2.5.2 解决host地址的变化</h5><p>那么问题来了：为什么我们这里的请求serverName变成了：127.0.0.1:8087呢？</p><p>这里的server name其实就是请求的时的主机名：Host，之所以改变，有两个原因：</p><ul><li>我们使用了nginx反向代理，当监听到api.leyou.com的时候，会自动将请求转发至127.0.0.1:8090，即Zuul。</li><li>而后请求到达我们的网关Zuul，Zuul就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了 127.0.0.1:8087 ，即我们的授权中心。</li></ul><p>我们首先去更改nginx配置，让它不要修改我们的host：<code>proxy_set_header Host $host;</code></p><p>这样就解决了nginx这里的问题。但是Zuul还会有一次转发，所以要去修改网关的配置（ly-gateway工程）：</p><p><img data-src="../../../../assets/img/1533303659673.png" alt></p><h5 id="2-5-3-Zuul的敏感头过滤"><a href="#2-5-3-Zuul的敏感头过滤" class="headerlink" title="2.5.3 Zuul的敏感头过滤"></a>2.5.3 Zuul的敏感头过滤</h5><p>Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：</p><p>会发现，这里会通过一个属性为<code>SensitiveHeaders</code>的属性，来获取敏感头列表，然后添加到<code>IgnoredHeaders</code>中，这些头信息就会被忽略。</p><p>而这个<code>SensitiveHeaders</code>的默认值就包含了<code>set-cookie</code>：</p><p>解决方案有两种：</p><p>全局设置：</p><ul><li><code>zuul.sensitive-headers=</code> </li></ul><p>指定路由设置：</p><ul><li><code>zuul.routes.&lt;routeName&gt;.sensitive-headers=</code></li><li><code>zuul.routes.&lt;routeName&gt;.custom-sensitive-headers=true</code></li></ul><p>思路都是把敏感头设置为null</p><p><img data-src="../../../../assets/img/211724.jpg" alt></p><h3 id="3-首页判断登录状态"><a href="#3-首页判断登录状态" class="headerlink" title="3.首页判断登录状态"></a>3.首页判断登录状态</h3><p>虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：</p><p>这里需要向后台发起请求，获取根据cookie获取当前用户的信息</p><h4 id="3-1-后台实现校验用户接口"><a href="#3-1-后台实现校验用户接口" class="headerlink" title="3.1 后台实现校验用户接口"></a>3.1 后台实现校验用户接口</h4><p>我们在<code>leyou-auth-service</code>中定义用户的校验接口，通过cookie获取token，然后校验通过返回用户信息。</p><p>每当用户在页面进行新的操作，都应该刷新token的过期时间，否则30分钟后用户的登录信息就无效了。而刷新其实就是重新生成一份token，然后写入cookie即可。</p><p>那么问题来了：我们怎么知道用户有操作呢？</p><p>事实上，每当用户来查询其个人信息，就证明他正在浏览网页，此时刷新cookie是比较合适的时机。因此我们可以对刚刚的校验用户登录状态的接口进行改进，加入刷新token的逻辑。</p><ul><li>请求方式：GET</li><li>请求路径：/verify</li><li>请求参数：无，不过我们需要从cookie中获取token信息</li><li>返回结果：UserInfo，校验成功返回用户信息；校验失败，则返回401</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"verify"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">verify</span><span class="params">(@CookieValue(<span class="string">"LY_TOKEN"</span>)</span> String token,HttpServletRequest request,HttpServletResponse response) </span>&#123;</span><br><span class="line"><span class="comment">/*        if (StringUtils.isBlank(token))&#123;</span></span><br><span class="line"><span class="comment">            throw new LyException(ExceptionEnum.UNAUTHORIZED);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//解析token</span></span><br><span class="line">            UserInfo info = JwtUtils.getInfoFromToken(token, prop.getPublicKey());</span><br><span class="line">            <span class="comment">//刷新token,重新生成token</span></span><br><span class="line">            String newToken = JwtUtils.generateToken(info, prop.getPrivateKey(), prop.getExpire());</span><br><span class="line">            <span class="comment">//写入cookie</span></span><br><span class="line">            CookieUtils.setCookie(request,response,prop.getCookieName(),newToken,prop.getCookieMaxAge(),<span class="keyword">null</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(info);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//token已过期,或者token被篡改</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-网关的登录拦截器"><a href="#4-网关的登录拦截器" class="headerlink" title="4.网关的登录拦截器"></a>4.网关的登录拦截器</h3><p>接下来，我们在Zuul编写拦截器，对用户的token进行校验，如果发现未登录，则进行拦截。</p><h4 id="4-1-引入jwt相关配置"><a href="#4-1-引入jwt相关配置" class="headerlink" title="4.1 引入jwt相关配置"></a>4.1 引入jwt相关配置</h4><p>既然是登录拦截，一定是前置拦截器，我们在<code>ly-gateway</code>中定义</p><p>编写application.yml属性文件，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span>  <span class="string">C:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br></pre></td></tr></table></figure><p>编写属性类，读取公钥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JwtProperties<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostContruct</span>：在构造方法执行之后执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取公钥私钥</span></span><br><span class="line">        publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-编写过滤器逻辑-白名单"><a href="#4-2-编写过滤器逻辑-白名单" class="headerlink" title="4.2 编写过滤器逻辑(白名单)"></a>4.2 编写过滤器逻辑(白名单)</h4><p>基本逻辑：</p><ul><li>获取cookie中的token</li><li>通过JWT对token进行校验</li><li>通过：则放行；不通过：则重定向到登录页</li></ul><p>要注意，并不是所有的路径我们都需要拦截，例如：</p><ul><li>登录校验接口：<code>/auth/**</code></li><li>注册接口：<code>/user/register</code></li><li>数据校验接口：<code>/user/check/**</code></li><li>发送验证码接口：<code>/user/code</code></li><li>搜索接口：<code>/search/**</code></li></ul><p>另外，跟后台管理相关的接口，因为我们没有做登录和权限，因此暂时都放行，但是生产环境中要做登录校验：</p><ul><li>后台商品服务：<code>/item/**</code></li></ul><p>所以，我们需要在拦截时，配置一个白名单，如果在名单内，则不进行拦截。</p><p>在<code>application.yaml</code>中添加规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">E:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">allowPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/auth</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/search</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/register</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/check</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/item</span></span><br></pre></td></tr></table></figure><p>然后读取这些属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.filter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在过滤器中的<code>shouldFilter</code>方法中添加判断逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;JwtProperties<span class="class">.<span class="keyword">class</span>, <span class="title">FilterProperties</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AuthFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FilterProperties filterProp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//过滤器类型:前置</span></span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//过滤器顺序</span></span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否过滤</span></span><br><span class="line">        <span class="comment">//获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//获取request</span></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">//获取请求的url路径</span></span><br><span class="line">        String path = request.getRequestURI();</span><br><span class="line"><span class="comment">//        String method = request.getMethod();</span></span><br><span class="line">        <span class="comment">//判断是否放行,放行则返回false</span></span><br><span class="line">        <span class="keyword">return</span> !isAllowPath(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历允许访问的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAllowPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String allowPath : filterProp.getAllowPaths()) &#123;</span><br><span class="line">            <span class="comment">// 然后判断是否是符合</span></span><br><span class="line">            <span class="keyword">if</span> (path.startsWith(allowPath))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">//获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//获取request</span></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, prop.getCookieName());</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserInfo user = JwtUtils.getInfoFromToken(token, prop.getPublicKey());</span><br><span class="line">            <span class="comment">//登录成功,校验权限</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//解析token失败,未登录,拦截</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//返回状态码</span></span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">403</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//校验权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-无状态登录原理&quot;&gt;&lt;a href=&quot;#1-无状态登录原理&quot; class=&quot;headerlink&quot; title=&quot;1.无状态登录原理&quot;&gt;&lt;/a&gt;1.无状态登录原理&lt;/h3&gt;&lt;h4 id=&quot;1-1-什么是有状态？&quot;&gt;&lt;a href=&quot;#1-1-什么是有状态？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是有状态？&quot;&gt;&lt;/a&gt;1.1 什么是有状态？&lt;/h4&gt;&lt;p&gt;有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。&lt;/p&gt;
&lt;p&gt;例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。&lt;/p&gt;
&lt;p&gt;缺点是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端保存大量数据，增加服务端压力&lt;/li&gt;
&lt;li&gt;服务端保存用户状态，无法进行水平扩展&lt;/li&gt;
&lt;li&gt;客户端请求依赖服务端，多次请求必须访问同一台服务器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(六.搜索微服务(二))</title>
    <link href="http://tonymua.top/32855/"/>
    <id>http://tonymua.top/32855/</id>
    <published>2021-05-08T13:19:59.236Z</published>
    <updated>2020-04-29T02:44:38.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-过滤功能分析"><a href="#1-过滤功能分析" class="headerlink" title="1.过滤功能分析"></a>1.过滤功能分析</h3><p><strong>效果预览:</strong></p><p><img data-src="../../../../assets/img/201916.jpg" alt></p><p>整个过滤部分有3块：</p><ul><li>顶部的导航，已经选择的过滤条件展示：<ul><li>商品分类面包屑，根据用户选择的商品分类变化</li><li>其它已选择过滤参数</li></ul></li></ul><a id="more"></a><ul><li><p>过滤条件展示，又包含3部分</p><ul><li>商品分类展示</li><li>品牌展示</li><li>其它规格参数</li></ul></li><li><p>展开或收起的过滤条件的按钮</p></li></ul><p>顶部导航要展示的内容跟用户选择的过滤条件有关。</p><ul><li>比如用户选择了某个商品分类，则面包屑中才会展示具体的分类</li><li>比如用户选择了某个品牌，列表中才会有品牌信息。</li></ul><p>所以，这部分需要依赖第二部分：过滤条件的展示和选择。因此我们先不着急去做。</p><p>展开或收起的按钮是否显示，取决于过滤条件有多少，如果很少，那么就没必要展示。所以也是跟第二部分的过滤条件有关。</p><p>这样分析来看，我们必须先做第二部分：过滤条件展示。</p><h3 id="2-生成分类和品牌过滤"><a href="#2-生成分类和品牌过滤" class="headerlink" title="2.生成分类和品牌过滤"></a>2.生成分类和品牌过滤</h3><p>先来看分类和品牌。在我们的数据库中已经有所有的分类和品牌信息。在这个位置，是不是把所有的分类和品牌信息都展示出来呢？</p><p>显然不是，用户搜索的条件会对商品进行过滤，而在搜索结果中，不一定包含所有的分类和品牌，直接展示出所有商品分类，让用户选择显然是不合适的。</p><p>无论是分类信息，还是品牌信息，都应该从搜索的结果商品中进行聚合得到。</p><h4 id="2-1-扩展返回的结果"><a href="#2-1-扩展返回的结果" class="headerlink" title="2.1 扩展返回的结果"></a>2.1 扩展返回的结果</h4><p>原来，我们返回的结果是PageResult对象，里面只有total、totalPage、items3个属性。但是现在要对商品分类和品牌进行聚合，数据显然不够用，我们需要对返回的结果进行扩展，添加分类和品牌的数据。</p><p>那么问题来了：以什么格式返回呢？</p><p>分类：页面显示了分类名称，但背后肯定要保存id信息。所以至少要有id和name</p><p>品牌：页面展示的有logo，有文字，当然肯定有id，基本上是品牌的完整数据</p><p>我们新建一个类，继承PageResult，然后扩展两个新的属性：分类集合和品牌集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categories;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(Long total, Integer totalPage, List&lt;Goods&gt; items, List&lt;Category&gt; categories, List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(total, totalPage, items);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-聚合商品分类和品牌"><a href="#2-2-聚合商品分类和品牌" class="headerlink" title="2.2 聚合商品分类和品牌"></a>2.2 聚合商品分类和品牌</h4><p>修改搜索的业务逻辑，对分类和品牌聚合。</p><p>因为索引库中只有id，所以我们根据id聚合，然后再根据id去查询完整数据。</p><p>所以，商品微服务需要提供一个接口：根据品牌id集合，批量查询品牌。</p><h5 id="2-2-1-提供查询品牌接口"><a href="#2-2-1-提供查询品牌接口" class="headerlink" title="2.2.1 提供查询品牌接口"></a>2.2.1 提供查询品牌接口</h5><p>BrandApi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"brand/brands"</span>)</span><br><span class="line">    <span class="function">List&lt;Brand&gt; <span class="title">queryBrandByIds</span><span class="params">(@RequestParam(<span class="string">"ids"</span>)</span>List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"brands"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandByIds(<span class="meta">@RequestParam</span>(<span class="string">"ids"</span>)List&lt;Long&gt; ids)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(brandService.queryBrandByIds(ids));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">queryBrandByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.brandMapper.selectByIdList(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandMapper</p><p>继承通用mapper的 <code>SelectByIdListMapper</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt;, <span class="title">SelectByIdListMapper</span>&lt;<span class="title">Brand</span>,<span class="title">Long</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-搜索功能改造"><a href="#2-2-2-搜索功能改造" class="headerlink" title="2.2.2 搜索功能改造"></a>2.2.2 搜索功能改造</h5><p>添加BrandClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SearchService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">buildGoods</span><span class="params">(Spu spu)</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询分类</span></span><br><span class="line">        List&lt;Category&gt; categories = categoryClient.queryCategoryByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">        List&lt;String&gt; names = categories.stream().map(Category::getName).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//查询品牌</span></span><br><span class="line">        Brand brand = brandClient.queryNameById(spu.getBrandId());</span><br><span class="line">        <span class="comment">//搜索字段</span></span><br><span class="line">        String all=spu.getTitle()+ StringUtils.join(names,<span class="string">" "</span>)+brand.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询sku</span></span><br><span class="line">        List&lt;Sku&gt; skuList = goodsClient.querySkuBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//对sku进行处理</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; skus=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//价格集合</span></span><br><span class="line">        List&lt;Long&gt; priceList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">            Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"id"</span>,sku.getId());</span><br><span class="line">            map.put(<span class="string">"title"</span>,sku.getTitle());</span><br><span class="line">            map.put(<span class="string">"price"</span>,sku.getPrice());</span><br><span class="line">            <span class="comment">//取第一张图片</span></span><br><span class="line">            map.put(<span class="string">"image"</span>, StringUtils.substringBefore(sku.getImages(),<span class="string">","</span>));</span><br><span class="line">            skus.add(map);</span><br><span class="line">            <span class="comment">//处理价格</span></span><br><span class="line">            priceList.add(sku.getPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sku的价格合集</span></span><br><span class="line">        <span class="comment">//List&lt;Long&gt; prices = skuList.stream().map(Sku::getPrice).collect(Collectors.toList());</span></span><br><span class="line">        <span class="comment">//查询规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; specParams = specificationClient.queryParamList(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//查询商品详情</span></span><br><span class="line">        SpuDetail spuDetail = goodsClient.querySpuDetailById(spu.getId());</span><br><span class="line">        <span class="comment">//获取通用规格参数</span></span><br><span class="line">        Map&lt;Long, String&gt; genericSpec = JsonUtils.toMap(spuDetail.getGenericSpec(), Long<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//获取特有规格参数</span></span><br><span class="line">        Map&lt;Long, List&lt;String&gt;&gt; specialSpec = JsonUtils.nativeRead(spuDetail.getSpecialSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;Long, List&lt;String&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//规格参数,key是规格参数的名字,值是规格参数的值</span></span><br><span class="line">        Map&lt;String,Object&gt; specs=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">            <span class="comment">//规格参数名称</span></span><br><span class="line">            String key = specParam.getName();</span><br><span class="line">            <span class="comment">//规格参数的值</span></span><br><span class="line">            Object value=<span class="string">""</span>;</span><br><span class="line">            <span class="comment">//判断是否为通用规格</span></span><br><span class="line">            <span class="keyword">if</span> (specParam.getGeneric())&#123;</span><br><span class="line">                value=genericSpec.get(specParam.getId());</span><br><span class="line">                <span class="comment">//判断是否数值类型</span></span><br><span class="line">                <span class="keyword">if</span> (specParam.getNumeric())&#123;</span><br><span class="line">                    <span class="comment">//处理成段</span></span><br><span class="line">                    value = chooseSegment(value.toString(), specParam);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                value=specialSpec.get(specParam.getId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//存入map</span></span><br><span class="line">            specs.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建goods对象</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setCid1(spu.getCid1());</span><br><span class="line">        goods.setCid2(spu.getCid2());</span><br><span class="line">        goods.setCid3(spu.getCid3());</span><br><span class="line">        goods.setCreateTime(spu.getCreateTime());</span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        goods.setAll(all); <span class="comment">//搜索字段,包含标题,分类.品牌,规格等</span></span><br><span class="line">        goods.setPrice(priceList);   <span class="comment">// 所有sku的价格合集</span></span><br><span class="line">        goods.setSkus(JsonUtils.toString(skus));    <span class="comment">//所有sku集合的json格式</span></span><br><span class="line">        goods.setSpecs(specs);   <span class="comment">//所有可搜索的规格参数</span></span><br><span class="line">        goods.setSubTitle(spu.getSubTitle());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">        String result = <span class="string">"其它"</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">","</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">"-"</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">                end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">"以上"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">"以下"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchResult <span class="title">search</span><span class="params">(SearchRequest searchRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page=searchRequest.getPage()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> size=searchRequest.getSize();</span><br><span class="line">        <span class="comment">//创建查询构建器</span></span><br><span class="line">        NativeSearchQueryBuilder queryBuilder=<span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        <span class="comment">//结果过滤</span></span><br><span class="line">        queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"skus"</span>,<span class="string">"subTitle"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        queryBuilder.withPageable(PageRequest.of(page,size));</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        String sortBy = searchRequest.getSortBy();</span><br><span class="line">        Boolean desc = searchRequest.getDescending();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortBy))&#123;</span><br><span class="line">            queryBuilder.withSort(SortBuilders.fieldSort(sortBy).order(desc ? SortOrder.DESC : SortOrder.ASC));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搜索条件</span></span><br><span class="line">        QueryBuilder basicQuery = buildBasicQuery(searchRequest);</span><br><span class="line">        queryBuilder.withQuery(basicQuery);</span><br><span class="line">        <span class="comment">//聚合分类和品牌</span></span><br><span class="line">        <span class="comment">//聚合分类</span></span><br><span class="line">        String categoryAggName=<span class="string">"category_agg"</span>;</span><br><span class="line">        queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">"cid3"</span>));</span><br><span class="line">        <span class="comment">//聚合品牌</span></span><br><span class="line">        String brandAggName=<span class="string">"brand_agg"</span>;</span><br><span class="line">        queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(<span class="string">"brandId"</span>));</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        AggregatedPage&lt;Goods&gt; result = template.queryForPage(queryBuilder.build(),Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        <span class="comment">//解析分页结果</span></span><br><span class="line">        <span class="keyword">long</span> totalElements = result.getTotalElements();</span><br><span class="line">        Long totalPages= (totalElements + searchRequest.getSize() - <span class="number">1</span>) / searchRequest.getSize();</span><br><span class="line">        List&lt;Goods&gt; content = result.getContent();</span><br><span class="line">        <span class="comment">//解析聚合结果</span></span><br><span class="line">        Aggregations aggs = result.getAggregations();</span><br><span class="line">        List&lt;Category&gt; categories=parseCategoryAgg(aggs.get(categoryAggName));</span><br><span class="line">        List&lt;Brand&gt; brands=parseBrandAgg(aggs.get(brandAggName));</span><br><span class="line">        <span class="comment">//规格参数聚合</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; specs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (categories!=<span class="keyword">null</span>&amp;&amp;categories.size()==<span class="number">1</span>)&#123;</span><br><span class="line">            specs=buildSpecificationAgg(categories.get(<span class="number">0</span>).getId(),basicQuery);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchResult(totalElements,totalPages,content,categories,brands,specs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> QueryBuilder <span class="title">buildBasicQuery</span><span class="params">(SearchRequest searchRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建布尔查询</span></span><br><span class="line">        BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        queryBuilder.must(QueryBuilders.matchQuery(<span class="string">"all"</span>,searchRequest.getKey()));</span><br><span class="line">        <span class="comment">//过滤条件</span></span><br><span class="line">        Map&lt;String, String&gt; map = searchRequest.getFilter();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            <span class="comment">//处理key</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"cid3"</span>.equals(key)&amp;&amp;!<span class="string">"brandId"</span>.equals(key))&#123;</span><br><span class="line">                key=<span class="string">"specs."</span>+key+<span class="string">".keyword"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            queryBuilder.filter(QueryBuilders.termQuery(key,value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queryBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; buildSpecificationAgg(Long cid, QueryBuilder basicQuery) &#123;</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; specs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询需要聚合的规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; specParams = specificationClient.queryParamList(<span class="keyword">null</span>, cid, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//聚合</span></span><br><span class="line">        NativeSearchQueryBuilder queryBuilder=<span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        <span class="comment">//带上查询条件</span></span><br><span class="line">        queryBuilder.withQuery(basicQuery);</span><br><span class="line">        <span class="comment">//聚合</span></span><br><span class="line">        <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">            String name = specParam.getName();</span><br><span class="line">            queryBuilder.addAggregation(AggregationBuilders.terms(name).field(<span class="string">"specs."</span>+name+<span class="string">".keyword"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        AggregatedPage&lt;Goods&gt; result = template.queryForPage(queryBuilder.build(), Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        Aggregations aggs = result.getAggregations();</span><br><span class="line">        <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">            <span class="comment">//规格参数名称</span></span><br><span class="line">            String name = specParam.getName();</span><br><span class="line">            StringTerms terms= aggs.get(name);</span><br><span class="line">            <span class="comment">//准备map</span></span><br><span class="line">            Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"k"</span>,name);</span><br><span class="line">            map.put(<span class="string">"options"</span>,terms.getBuckets().stream().map(b -&gt; b.getKeyAsString()).collect(Collectors.toList()));</span><br><span class="line">            specs.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> specs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Brand&gt; <span class="title">parseBrandAgg</span><span class="params">(LongTerms terms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Long&gt; ids = terms.getBuckets().stream().map(b -&gt; b.getKeyAsNumber().longValue()).collect(Collectors.toList());</span><br><span class="line">            List&lt;Brand&gt; brands = brandClient.queryBrandByIds(ids);</span><br><span class="line">            <span class="keyword">return</span> brands;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"[搜索微服务]"</span>,e);</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Category&gt; <span class="title">parseCategoryAgg</span><span class="params">(LongTerms terms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Long&gt; ids = terms.getBuckets().stream().map(c -&gt; c.getKeyAsNumber().longValue()).collect(Collectors.toList());</span><br><span class="line">            List&lt;Category&gt; categories = categoryClient.queryCategoryByIds(ids);</span><br><span class="line">            <span class="keyword">return</span> categories;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-页面渲染数据"><a href="#2-3-页面渲染数据" class="headerlink" title="2.3 页面渲染数据"></a>2.3 页面渲染数据</h4><h3 id="3-生成规格参数过滤"><a href="#3-生成规格参数过滤" class="headerlink" title="3.生成规格参数过滤"></a>3.生成规格参数过滤</h3><h4 id="3-1-谋而后动"><a href="#3-1-谋而后动" class="headerlink" title="3.1 谋而后动"></a>3.1 谋而后动</h4><p>有四个问题需要先思考清楚：</p><ul><li>什么时候显示规格参数过滤？</li><li>如何知道哪些规格需要过滤？</li><li>要过滤的参数，其可选值是如何获取的？</li><li>规格过滤的可选值，其数据格式怎样的？</li></ul><blockquote><p>什么情况下显示有关规格参数的过滤？</p></blockquote><p>如果用户尚未选择商品分类，或者聚合得到的分类数大于1，那么就没必要进行规格参数的聚合。因为不同分类的商品，其规格是不同的。</p><p>因此，我们在后台<strong>需要对聚合得到的商品分类数量进行判断，如果等于1，我们才继续进行规格参数的聚合</strong>。</p><blockquote><p>如何知道哪些规格需要过滤？</p></blockquote><p>我们不能把数据库中的所有规格参数都拿来过滤。因为并不是所有的规格参数都可以用来过滤，参数的值是不确定的。</p><p>值的庆幸的是，我们在设计规格参数时，已经标记了某些规格可搜索，某些不可搜索。</p><p>因此，一旦商品分类确定，我们就可以根据商品分类查询到其对应的规格，从而知道哪些规格要进行搜索。</p><blockquote><p>要过滤的参数，其可选值是如何获取的？</p></blockquote><p>虽然数据库中有所有的规格参数，但是不能把一切数据都用来供用户选择。</p><p>与商品分类和品牌一样，应该是从用户搜索得到的结果中聚合，得到与结果品牌的规格参数可选值。</p><blockquote><p>规格过滤的可选值，其数据格式怎样的？</p></blockquote><p>我们之前存储时已经将数据分段，恰好符合这里的需求</p><h4 id="3-2-需求实现"><a href="#3-2-需求实现" class="headerlink" title="3.2 需求实现"></a>3.2 需求实现</h4><p>总结一下，应该是以下几步：</p><ul><li>1）用户搜索得到商品，并聚合出商品分类</li><li>2）判断分类数量是否等于1，如果是则进行规格参数聚合</li><li>3）先根据分类，查找可以用来搜索的规格</li><li>4）对规格参数进行聚合</li><li>5）将规格参数聚合结果整理后返回</li></ul><p>在java中我们用List&lt;Map&lt;String, String&gt;&gt;来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categories;<span class="comment">// 分类过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands; <span class="comment">// 品牌过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; specs; <span class="comment">// 规格参数过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(Long total, Long totalPage, List&lt;Goods&gt; items, List&lt;Category&gt; categories, List&lt;Brand&gt; brands, List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(total, totalPage, items);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终的完整代码:</strong>    同上searchService</p><h4 id="3-3-页面渲染"><a href="#3-3-页面渲染" class="headerlink" title="3.3 页面渲染"></a>3.3 页面渲染</h4><h3 id="4-过滤条件的筛选"><a href="#4-过滤条件的筛选" class="headerlink" title="4.过滤条件的筛选"></a>4.过滤条件的筛选</h3><p>当我们点击页面的过滤项，要做哪些事情？</p><ul><li>把过滤条件保存在search对象中（watch监控到search变化后就会发送到后台）</li><li>在页面顶部展示已选择的过滤项</li><li>把商品分类展示到顶部面包屑</li></ul><h4 id="4-1-后台添加过滤条件"><a href="#4-1-后台添加过滤条件" class="headerlink" title="4.1 后台添加过滤条件"></a>4.1 后台添加过滤条件</h4><p>我们需要在请求类：<code>SearchRequest</code>中添加属性，接收过滤属性。过滤属性都是键值对格式，但是key不确定，所以用一个map来接收即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; filter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilter</span><span class="params">(Map&lt;String, String&gt; filter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.filter = filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-改造searchService"><a href="#4-2-改造searchService" class="headerlink" title="4.2 改造searchService"></a>4.2 改造searchService</h4><h3 id="5-页面展示选择的过滤项"><a href="#5-页面展示选择的过滤项" class="headerlink" title="5.页面展示选择的过滤项"></a>5.页面展示选择的过滤项</h3><h4 id="5-1-商品分类面包屑"><a href="#5-1-商品分类面包屑" class="headerlink" title="5.1 商品分类面包屑"></a>5.1 商品分类面包屑</h4><p>当用户选择一个商品分类以后，我们应该在过滤模块的上方展示一个面包屑，把三级商品分类都显示出来。</p><p>用户选择的商品分类就存放在<code>search.filter</code>中，但是里面只有第三级分类的id：cid3</p><p>我们需要根据它查询出所有三级分类的id及名称</p><h5 id="5-1-1-提供查询分类接口"><a href="#5-1-1-提供查询分类接口" class="headerlink" title="5.1.1 提供查询分类接口"></a>5.1.1 提供查询分类接口</h5><p>我们在商品微服务中提供一个根据三级分类id查询1~3级分类集合的方法：</p><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据3级分类id，查询1~3级的分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"all/level"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryAllByCid3(<span class="meta">@RequestParam</span>(<span class="string">"id"</span>) Long id)&#123;</span><br><span class="line">    List&lt;Category&gt; list = <span class="keyword">this</span>.categoryService.queryAllByCid3(id);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryAllByCid3</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    Category c3 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(id);</span><br><span class="line">    Category c2 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(c3.getParentId());</span><br><span class="line">    Category c1 = <span class="keyword">this</span>.categoryMapper.selectByPrimaryKey(c2.getParentId());</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(c1,c2,c3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-页面展示面包屑"><a href="#5-1-2-页面展示面包屑" class="headerlink" title="5.1.2 页面展示面包屑"></a>5.1.2 页面展示面包屑</h5><p>后台提供了接口，下面的问题是，我们在哪里去查询接口？</p><p>大家首先想到的肯定是当用户点击以后。</p><p>但是我们思考一下：用户点击以后，就会重新发起请求，页面刷新，那么你渲染的结果就没了。</p><p>因此，应该是在页面重新加载完毕后，此时因为过滤条件中加入了商品分类的条件，所以查询的结果中只有1个分类。</p><p>我们判断商品分类是否只有1个，如果是，则查询三级商品分类，添加到面包屑即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化商品分类过滤参数</span></span><br><span class="line">             <span class="keyword">if</span> (resp.data.categories.length === <span class="number">1</span>) &#123;</span><br><span class="line">                 <span class="comment">//如果只有1个,那么就查询三级商品分类,展示到面包屑</span></span><br><span class="line">                 ly.http.get(<span class="string">"/item/category/all/level?id="</span>+resp.data.categories[<span class="number">0</span>].id)</span><br><span class="line">                     .then(<span class="function"><span class="params">resp</span> =&gt;</span> <span class="keyword">this</span>.breads=resp.data);</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure><p>渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bread"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--面包屑--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"fl sui-breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>全部结果:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(c,i) in breads"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-if</span>=<span class="string">"i&lt;2"</span>&gt;</span>&#123;&#123;c.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;c.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-其它过滤项"><a href="#5-2-其它过滤项" class="headerlink" title="5.2 其它过滤项"></a>5.2 其它过滤项</h4><p>在页面展示用户已选择的过滤项</p><p>所有已选择过滤项都保存在<code>search.filter</code>中，因此在页面遍历并展示即可</p><p>基本有四类数据：</p><ul><li>商品分类：这个不需要展示，分类展示在面包屑位置</li><li>品牌：这个要展示，但是其key和值不合适，我们不能显示一个id在页面。需要找到其name值</li><li>数值类型规格：这个展示的时候，需要把单位查询出来</li><li>非数值类型规格：这个直接展示其值即可</li></ul><p>取消对应条件的过滤。</p><p>思路非常简单：</p><ul><li>给小叉绑定点击事件</li><li>点击后把过滤项从<code>search.filter</code>中移除，页面会自动刷新，OK</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--已选择过滤项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tags-choose"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in search.filter"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        &#123;&#123;k==='brandId' ? '品牌':k&#125;&#125;:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">v-text</span>=<span class="string">"findValue(k,v)"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"sui-icon icon-tb-close"</span> @<span class="attr">click</span>=<span class="string">"deleteFilter(k)"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>判断如果 <code>k === &#39;cid3&#39;</code>说明是商品分类，直接忽略</li><li>判断<code>k === &#39;brandId&#39;</code>说明是品牌，页面显示品牌，其它规格则直接显示<code>k</code>的值</li><li>值的处理比较复杂，我们用一个方法<code>getFilterValue(k,v)</code>来处理，调用时把<code>k</code>和<code>v</code>都传递</li></ul><p>方法内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">findValue(k,v)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.filters) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k !== <span class="string">'brandId'</span>) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filters.find(<span class="function"><span class="params">f</span>=&gt;</span>f.k ===<span class="string">'brandId'</span>).options[<span class="number">0</span>].name;</span><br><span class="line">&#125;,</span><br><span class="line">deleteFilter(k)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;... obj&#125;=<span class="keyword">this</span>.search.filter;</span><br><span class="line">   <span class="keyword">delete</span> obj[k];</span><br><span class="line">    <span class="comment">//添加到search.filter中</span></span><br><span class="line">    <span class="keyword">this</span>.search.filter=obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-隐藏已经选择的过滤项"><a href="#5-3-隐藏已经选择的过滤项" class="headerlink" title="5.3 隐藏已经选择的过滤项"></a>5.3 隐藏已经选择的过滤项</h4><p>实现了已选择过滤项的展示，但是你会发现一个问题：已经选择的过滤项，在过滤列表中依然存在：</p><p>已经选择的过滤项，应该从列表中移除。</p><p>编写一个计算属性，把filters中的 已经被选择的key过滤掉：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">            remainFilter()&#123;</span><br><span class="line">                <span class="comment">//获取已选择的项的key</span></span><br><span class="line">                <span class="keyword">const</span> keys=<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.search.filter);</span><br><span class="line">                <span class="comment">//完成对已选择过滤项的过滤</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.filters.filter(<span class="function"><span class="params">f</span>=&gt;</span>!keys.includes(f.k)&amp;&amp;f.options.length&gt;<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>然后页面不再直接遍历<code>filters</code>，而是遍历<code>remainFilter</code></p><p><strong>完整的java script</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#searchApp"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            search:&#123;&#125;,</span><br><span class="line">            goodsList:[], <span class="comment">//接收搜索得到的结果</span></span><br><span class="line">            total:<span class="number">0</span>,</span><br><span class="line">            totalPage:<span class="number">0</span>,</span><br><span class="line">            selectedSku:&#123;&#125;,</span><br><span class="line">            ly,</span><br><span class="line">            filters:[],  <span class="comment">//过滤项</span></span><br><span class="line">            showMore:<span class="literal">false</span> , <span class="comment">//展示更多</span></span><br><span class="line">            breads:<span class="string">""</span> <span class="comment">//面包屑</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            <span class="comment">// 判断是否有请求参数</span></span><br><span class="line">            <span class="keyword">if</span>(!location.search)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将请求参数转为对象</span></span><br><span class="line">            <span class="keyword">const</span> search = ly.parse(location.search.substring(<span class="number">1</span>));</span><br><span class="line">            search.page=search.page ? <span class="built_in">parseInt</span>(search.page):<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//  对排序进行初始化,默认为"",代表不排序</span></span><br><span class="line">            search.sortBy=search.sortBy||<span class="string">""</span>;</span><br><span class="line">            <span class="comment">//  对排序方式初始化,转为布尔值</span></span><br><span class="line">            search.descending=search.descending===<span class="literal">true</span>||<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            search.filter=search.filter ? search.filter:&#123;&#125;; <span class="comment">//初始化过滤条件</span></span><br><span class="line">            <span class="comment">// 记录在data的search对象中</span></span><br><span class="line">            <span class="keyword">this</span>.search = search;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起请求，根据条件搜索</span></span><br><span class="line">            <span class="keyword">this</span>.loadData();</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            search:&#123;</span><br><span class="line">                deep: <span class="literal">true</span>,</span><br><span class="line">                handler(val,oldVal)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!oldVal || !oldVal.key) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// this.loadData();</span></span><br><span class="line">                    <span class="comment">//把请求参数写到url中</span></span><br><span class="line">                    location.search=<span class="string">"?"</span>+ly.stringify(<span class="keyword">this</span>.search);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            loadData()&#123;</span><br><span class="line">                <span class="comment">// ly.http.post("/search/page", ly.stringify(this.search)).then(resp=&gt;&#123;</span></span><br><span class="line">                ly.http.post(<span class="string">"/search/page"</span>, <span class="keyword">this</span>.search).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//保存分页结果</span></span><br><span class="line">                    <span class="keyword">this</span>.total=resp.data.total;</span><br><span class="line">                    <span class="keyword">this</span>.totalPage=resp.data.totalPage;</span><br><span class="line">                    <span class="comment">//保存当前页商品</span></span><br><span class="line">                    resp.data.items.forEach(<span class="function"><span class="params">goods</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="comment">//转换skus:把字符串转变为对象</span></span><br><span class="line">                        goods.skus=<span class="built_in">JSON</span>.parse(goods.skus);</span><br><span class="line">                        <span class="comment">//初始化被选中的sku</span></span><br><span class="line">                        goods.selectedSku=goods.skus[<span class="number">0</span>];</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">this</span>.goodsList=resp.data.items;</span><br><span class="line">                    <span class="comment">//初始化商品分类过滤参数</span></span><br><span class="line">                    <span class="keyword">if</span> (resp.data.categories.length === <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果只有1个,那么就查询三级商品分类,展示到面包屑</span></span><br><span class="line">                        ly.http.get(<span class="string">"/item/category/all/level?id="</span>+resp.data.categories[<span class="number">0</span>].id)</span><br><span class="line">                            .then(<span class="function"><span class="params">resp</span> =&gt;</span> <span class="keyword">this</span>.breads=resp.data);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//获取聚合结果,形成过滤项</span></span><br><span class="line">                    <span class="comment">//商品分类</span></span><br><span class="line">                    <span class="keyword">this</span>.filters.push(&#123;</span><br><span class="line">                        k:<span class="string">"cid3"</span>,</span><br><span class="line">                        options: resp.data.categories</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//商品品牌</span></span><br><span class="line">                    <span class="keyword">this</span>.filters.push(&#123;</span><br><span class="line">                        k:<span class="string">"brandId"</span>,</span><br><span class="line">                        options: resp.data.brands</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//其他规格</span></span><br><span class="line">                    resp.data.specs.forEach(<span class="function"><span class="params">spec</span>=&gt;</span><span class="keyword">this</span>.filters.push(spec));</span><br><span class="line"></span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            index(i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt;= <span class="number">3</span> || <span class="keyword">this</span>.totalPage &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果当前页小于等于3或者总页数小于等于5</span></span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果当前页大于3</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.search.page - <span class="number">3</span> + i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.totalPage - <span class="number">5</span> + i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            prevPage()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.search.page--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            nextPage()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt; <span class="keyword">this</span>.totalPage)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.search.page++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            selectFilter(key,option)&#123;</span><br><span class="line">                <span class="keyword">const</span> &#123;... obj&#125;=<span class="keyword">this</span>.search.filter;</span><br><span class="line">                obj[key]=option</span><br><span class="line">                <span class="comment">//添加到search.filter中</span></span><br><span class="line">                <span class="keyword">this</span>.search.filter=obj;</span><br><span class="line">            &#125;,</span><br><span class="line">            findValue(k,v)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.filters) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (k !== <span class="string">'brandId'</span>) <span class="keyword">return</span> v;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.filters.find(<span class="function"><span class="params">f</span>=&gt;</span>f.k ===<span class="string">'brandId'</span>).options[<span class="number">0</span>].name;</span><br><span class="line">            &#125;,</span><br><span class="line">            deleteFilter(k)&#123;</span><br><span class="line">                <span class="keyword">const</span> &#123;... obj&#125;=<span class="keyword">this</span>.search.filter;</span><br><span class="line">               <span class="keyword">delete</span> obj[k];</span><br><span class="line">                <span class="comment">//添加到search.filter中</span></span><br><span class="line">                <span class="keyword">this</span>.search.filter=obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            remainFilter()&#123;</span><br><span class="line">                <span class="comment">//获取已选择的项的key</span></span><br><span class="line">                <span class="keyword">const</span> keys=<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.search.filter);</span><br><span class="line">                <span class="comment">//完成对已选择过滤项的过滤</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.filters.filter(<span class="function"><span class="params">f</span>=&gt;</span>!keys.includes(f.k)&amp;&amp;f.options.length&gt;<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        components:&#123;</span><br><span class="line">            lyTop: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./js/pages/top.js"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-优化"><a href="#6-优化" class="headerlink" title="6.优化"></a>6.优化</h3><p>搜索系统需要优化的点：</p><ul><li>查询规格参数部分可以添加缓存</li><li>聚合计算interval变化频率极低，所以可以设计为定时任务计算（周期为天），然后缓存起来。</li><li>elasticsearch本身有查询缓存，可以不进行优化</li><li>商品图片应该采用缩略图，减少流量，提高页面加载速度</li><li>图片采用延迟加载</li><li>图片还可以采用CDN服务器</li><li>sku信息应该在页面异步加载，而不是放到索引库</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-过滤功能分析&quot;&gt;&lt;a href=&quot;#1-过滤功能分析&quot; class=&quot;headerlink&quot; title=&quot;1.过滤功能分析&quot;&gt;&lt;/a&gt;1.过滤功能分析&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;效果预览:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;../../../../assets/img/201916.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;整个过滤部分有3块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶部的导航，已经选择的过滤条件展示：&lt;ul&gt;
&lt;li&gt;商品分类面包屑，根据用户选择的商品分类变化&lt;/li&gt;
&lt;li&gt;其它已选择过滤参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(八.RabbitMQ)</title>
    <link href="http://tonymua.top/33993/"/>
    <id>http://tonymua.top/33993/</id>
    <published>2021-05-08T13:19:59.235Z</published>
    <updated>2020-04-29T02:44:38.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-RabbitMQ"><a href="#1-RabbitMQ" class="headerlink" title="1.RabbitMQ"></a>1.RabbitMQ</h3><h4 id="1-1-搜索与商品服务的问题"><a href="#1-1-搜索与商品服务的问题" class="headerlink" title="1.1 搜索与商品服务的问题"></a>1.1 搜索与商品服务的问题</h4><p>目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？</p><ul><li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li><li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li><li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li></ul><p>如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p><p>解决这个问题：<strong>消息队列</strong></p><h4 id="1-2-消息队列（MQ）"><a href="#1-2-消息队列（MQ）" class="headerlink" title="1.2 消息队列（MQ）"></a>1.2 消息队列（MQ）</h4><h5 id="1-2-1-什么是消息队列"><a href="#1-2-1-什么是消息队列" class="headerlink" title="1.2.1 什么是消息队列"></a>1.2.1 什么是消息队列</h5><a id="more"></a><p>消息队列，即MQ，Message Queue。</p><p><img data-src="../../../../assets/img/1527063872737.png" alt></p><p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p>结合前面所说的问题：</p><ul><li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li><li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li></ul><p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p><h5 id="1-2-2-AMQP和JMS"><a href="#1-2-2-AMQP和JMS" class="headerlink" title="1.2.2 AMQP和JMS"></a>1.2.2 AMQP和JMS</h5><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><h5 id="1-2-3-常见MQ产品"><a href="#1-2-3-常见MQ产品" class="headerlink" title="1.2.3 常见MQ产品"></a>1.2.3 常见MQ产品</h5><ul><li>ActiveMQ：基于JMS</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li><li>Kafka：分布式消息系统，高吞吐量</li></ul><h5 id="1-2-4-RabbitMQ"><a href="#1-2-4-RabbitMQ" class="headerlink" title="1.2.4 RabbitMQ"></a>1.2.4 RabbitMQ</h5><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <span class="exturl" data-url="aHR0cDovL3d3dy5yYWJiaXRtcS5jb20v">http://www.rabbitmq.com/<i class="fa fa-external-link-alt"></i></span></p><p>官方教程：<span class="exturl" data-url="aHR0cDovL3d3dy5yYWJiaXRtcS5jb20vZ2V0c3RhcnRlZC5odG1s">http://www.rabbitmq.com/getstarted.html<i class="fa fa-external-link-alt"></i></span></p><p>​    <strong>RabbitMQ</strong>是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9Fcmxhbmc=">Erlang<i class="fa fa-external-link-alt"></i></span>语言编写的，而集群和故障转移是构建在<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lvIDmlL7nlLXkv6HlubPlj7A=">开放电信平台<i class="fa fa-external-link-alt"></i></span>框架上的。所有主要的编程语言均有与代理接口通讯的客户端<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lupM=">库<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="2-五种消息模型"><a href="#2-五种消息模型" class="headerlink" title="2.五种消息模型"></a>2.五种消息模型</h3><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img data-src="../../../../assets/img/1527063872737.png" alt></p><h4 id="2-1-订阅模型-Topic"><a href="#2-1-订阅模型-Topic" class="headerlink" title="2.1 订阅模型-Topic"></a>2.1 订阅模型-Topic</h4><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`#`：匹配一个或多个词</span><br><span class="line"></span><br><span class="line">`*`：匹配不多不少恰好<span class="number">1</span>个词</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`audit.#`：能够匹配`audit.irs.corporate` 或者 `audit.irs`</span><br><span class="line"></span><br><span class="line">`audit.*`：只能匹配`audit.irs`</span><br></pre></td></tr></table></figure><p><img data-src="../../../../assets/img/1532766712166.png" alt></p><p>在这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（两个点）组成的routing key发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个种类：“<speed>.<color>.<species>”。</species></color></speed></p><p>我们创建了三个绑定：Q1绑定了绑定键“* .orange.<em>”，Q2绑定了“</em>.*.rabbit”和“lazy.＃”。</p><p>Q1匹配所有的橙色动物。</p><p>Q2匹配关于兔子以及懒惰动物的消息。</p><h5 id="2-1-1-生产者"><a href="#2-1-1-生产者" class="headerlink" title="2.1.1 生产者"></a>2.1.1 生产者</h5><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为topic</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"新增商品 : id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-消费者1"><a href="#2-1-2-消费者1" class="headerlink" title="2.1.2 消费者1"></a>2.1.2 消费者1</h5><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-3-消费者2"><a href="#2-1-3-消费者2" class="headerlink" title="2.1.3 消费者2"></a>2.1.3 消费者2</h5><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-消息丢失"><a href="#2-3-消息丢失" class="headerlink" title="2.3 消息丢失"></a>2.3 消息丢失</h4><blockquote><p>解决消息丢失</p></blockquote><ul><li>ack(消息确认)</li><li>持久化(交换机持久化, 队列持久化, 消息持久化)</li><li>生产者确认</li><li>发送消息前,将消息持久到数据库,并记消息状态(可靠消息服务)</li></ul><h3 id="3-项目改造"><a href="#3-项目改造" class="headerlink" title="3.项目改造"></a>3.项目改造</h3><p>接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。</p><h4 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1 思路分析"></a>3.1 思路分析</h4><blockquote><p>发送方：商品微服务</p></blockquote><ul><li><p>什么时候发？</p><p>当商品服务对商品进行写操作：增、删、改的时候，需要发送一条消息，通知其它服务。</p></li><li><p>发送什么内容？</p><p>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</p></li></ul><blockquote><p>接收方：搜索微服务、静态页微服务</p></blockquote><p>接收消息后如何处理？</p><ul><li>搜索微服务：<ul><li>增/改：添加新的数据到索引库 </li><li>删：删除索引库数据</li></ul></li><li>静态页微服务：<ul><li>增/改：创建新的静态页</li><li>删：删除原来的静态页</li></ul></li></ul><h4 id="3-2-商品服务发送消息"><a href="#3-2-商品服务发送消息" class="headerlink" title="3.2 商品服务发送消息"></a>3.2 商品服务发送消息</h4><p>我们先在商品微服务<code>leyou-item-service</code>中实现发送消息。</p><h5 id="3-2-1-引入依赖"><a href="#3-2-1-引入依赖" class="headerlink" title="3.2.1 引入依赖"></a>3.2.1 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-2-配置文件"><a href="#3-2-2-配置文件" class="headerlink" title="3.2.2 配置文件"></a>3.2.2 配置文件</h5><p>我们在application.yml中添加一些有关RabbitMQ的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">10000ms</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="string">30000ms</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">exchange:</span> <span class="string">leyou.item.exchange</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>template：有关<code>AmqpTemplate</code>的配置<ul><li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li></ul></li><li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li></ul><h5 id="3-2-3-改造GoodsService"><a href="#3-2-3-改造GoodsService" class="headerlink" title="3.2.3 改造GoodsService"></a>3.2.3 改造GoodsService</h5><p>在GoodsService中封装一个发送消息到mq的方法：<strong>（需要注入AmqpTemplate模板）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Long spuId, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, spuId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"&#123;&#125;商品消息发送异常，商品id：&#123;&#125;"</span>, type, spuId, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有指定交换机，因此默认发送到了配置中的：<code>leyou.item.exchange</code></p><p>然后在新增, 修改的时候调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendMessage(spu.getId(),<span class="string">"update"</span>)</span><br></pre></td></tr></table></figure><h4 id="3-3-搜索服务接收消息"><a href="#3-3-搜索服务接收消息" class="headerlink" title="3.3 搜索服务接收消息"></a>3.3 搜索服务接收消息</h4><p>搜索服务接收到消息后要做的事情：</p><ul><li>增：添加新的数据到索引库</li><li>删：删除索引库数据</li><li>改：修改索引库数据</li></ul><p>因为索引库的新增和修改方法是合二为一的，因此我们可以将这两类消息一同处理，删除另外处理。</p><h5 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1 引入依赖"></a>3.3.1 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-3-2-添加配置"><a href="#3-3-2-添加配置" class="headerlink" title="3.3.2 添加配置"></a>3.3.2 添加配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h5 id="3-3-3-编写监听器"><a href="#3-3-3-编写监听器" class="headerlink" title="3.3.3 编写监听器"></a>3.3.3 编写监听器</h5><p><strong>ItemListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(name = <span class="string">"search.item.delete.queue"</span>,durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(name = <span class="string">"leyou.item.exchange"</span>,type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>,<span class="string">"item.update"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerInsertOrUpdate</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理消息,对索引库进行新增或者修改</span></span><br><span class="line">        searchService.createOrUpdateIndex(spuId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(name = <span class="string">"search.item.insert.queue"</span>,durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(name = <span class="string">"leyou.item.exchange"</span>,type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.delete"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerDelete</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理消息,对索引库进行新增或者修改</span></span><br><span class="line">        searchService.deleteIndex(spuId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-4-编写创建和删除索引方法"><a href="#3-3-4-编写创建和删除索引方法" class="headerlink" title="3.3.4 编写创建和删除索引方法"></a>3.3.4 编写创建和删除索引方法</h5><p>这里因为要创建和删除索引，我们需要在SearchService中拓展两个方法，创建和删除索引：</p><p><strong>SearchService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrUpdateIndex</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询spu</span></span><br><span class="line">    Spu spu = goodsClient.querySpuById(spuId);</span><br><span class="line">    <span class="comment">//构建Goods</span></span><br><span class="line">    Goods goods = buildGoods(spu);</span><br><span class="line">    <span class="comment">//存入索引库</span></span><br><span class="line">    goodsRepository.save(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    goodsRepository.deleteById(spuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-静态页服务接收消息"><a href="#3-4-静态页服务接收消息" class="headerlink" title="3.4 静态页服务接收消息"></a>3.4 静态页服务接收消息</h4><p>商品静态页服务接收到消息后的处理：</p><ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并覆盖原来的</li></ul><p>不过，我们编写的创建静态页的方法也具备覆盖以前页面的功能，因此：增和改的消息可以放在一个方法中处理，删除消息放在另一个方法处理。</p><h5 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1 引入依赖"></a>3.4.1 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-2-添加配置"><a href="#3-4-2-添加配置" class="headerlink" title="3.4.2 添加配置"></a>3.4.2 添加配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h5 id="3-4-3-编写监听器"><a href="#3-4-3-编写监听器" class="headerlink" title="3.4.3 编写监听器"></a>3.4.3 编写监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PageService pageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(name = <span class="string">"page.item.insert.queue"</span>,durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(name = <span class="string">"leyou.item.exchange"</span>,type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>,<span class="string">"item.update"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenInsertOrUpdate</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理消息,创建静态页</span></span><br><span class="line">        pageService.createHtml(spuId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(name = <span class="string">"page.item.delete.queue"</span>,durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(name = <span class="string">"leyou.item.exchange"</span>,type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.delete"</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spuId==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理消息,删除静态页</span></span><br><span class="line">        pageService.deleteHtml(spuId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-4-添加删除页面方法"><a href="#3-4-4-添加删除页面方法" class="headerlink" title="3.4.4 添加删除页面方法"></a>3.4.4 添加删除页面方法</h5><p><strong>PageService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHtml</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(<span class="string">"E:\\tools\\nginx-1.14.0\\html\\item"</span>, spuId + <span class="string">".html"</span>);</span><br><span class="line">        <span class="keyword">if</span> (dest.exists())&#123;</span><br><span class="line">            dest.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-RabbitMQ&quot;&gt;&lt;a href=&quot;#1-RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;1.RabbitMQ&quot;&gt;&lt;/a&gt;1.RabbitMQ&lt;/h3&gt;&lt;h4 id=&quot;1-1-搜索与商品服务的问题&quot;&gt;&lt;a href=&quot;#1-1-搜索与商品服务的问题&quot; class=&quot;headerlink&quot; title=&quot;1.1 搜索与商品服务的问题&quot;&gt;&lt;/a&gt;1.1 搜索与商品服务的问题&lt;/h4&gt;&lt;p&gt;目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品的原始数据保存在数据库中，增删改查都在数据库中完成。&lt;/li&gt;
&lt;li&gt;搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。&lt;/li&gt;
&lt;li&gt;商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？&lt;/p&gt;
&lt;p&gt;解决这个问题：&lt;strong&gt;消息队列&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-消息队列（MQ）&quot;&gt;&lt;a href=&quot;#1-2-消息队列（MQ）&quot; class=&quot;headerlink&quot; title=&quot;1.2 消息队列（MQ）&quot;&gt;&lt;/a&gt;1.2 消息队列（MQ）&lt;/h4&gt;&lt;h5 id=&quot;1-2-1-什么是消息队列&quot;&gt;&lt;a href=&quot;#1-2-1-什么是消息队列&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 什么是消息队列&quot;&gt;&lt;/a&gt;1.2.1 什么是消息队列&lt;/h5&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(五.搜索微服务(一))</title>
    <link href="http://tonymua.top/54042/"/>
    <id>http://tonymua.top/54042/</id>
    <published>2021-05-08T13:19:59.233Z</published>
    <updated>2020-04-29T02:44:38.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-索引库数据导入"><a href="#1-索引库数据导入" class="headerlink" title="1.索引库数据导入"></a>1.索引库数据导入</h3><h4 id="1-1-创建搜索服务"><a href="#1-1-创建搜索服务" class="headerlink" title="1.1 创建搜索服务"></a>1.1 创建搜索服务</h4><p><strong>Pom文件：</strong></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-search<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- elasticsearch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">search-service</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># 配置json处理时忽略空值</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">547717253</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#    instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p><strong>启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySearchApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySearchApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-索引库数据格式分析"><a href="#1-2-索引库数据格式分析" class="headerlink" title="1.2 索引库数据格式分析"></a>1.2 索引库数据格式分析</h4><h5 id="1-2-1-以结果为导向"><a href="#1-2-1-以结果为导向" class="headerlink" title="1.2.1 以结果为导向"></a>1.2.1 以结果为导向</h5><p>每一个搜索结果都有至少1个商品，当我们选择大图下方的小图，商品会跟着变化。因此，<strong>搜索的结果是SPU，即多个SKU的集合</strong>。既然搜索的结果是SPU，那么我们索引库中存储的应该也是SPU，但是却需要包含SKU的信息。</p><h5 id="1-2-2-需要什么数据"><a href="#1-2-2-需要什么数据" class="headerlink" title="1.2.2 需要什么数据"></a>1.2.2 需要什么数据</h5><p>直观能看到的：图片、价格、标题、副标题</p><p>暗藏的数据：spu的id，sku的id</p><p>过滤条件也都需要存储到索引库中，包括：</p><p>商品分类、品牌、可用来搜索的规格参数等</p><p>综上所述，我们需要的数据格式有：</p><p>spuId、SkuId、商品分类id、品牌id、图片、价格、商品的创建时间、sku信息集、可搜索的规格参</p><h5 id="1-2-3-最终的数据结构"><a href="#1-2-3-最终的数据结构" class="headerlink" title="1.2.3 最终的数据结构"></a>1.2.3 最终的数据结构</h5><p>创建一个类，封装要保存到索引库的数据，并设置映射属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"goods"</span>, type = <span class="string">"docs"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// spuId</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.text, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String all; <span class="comment">// 所有需要被搜索的信息，包含标题，分类，甚至品牌</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.keyword, index = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String subTitle;<span class="comment">// 卖点</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;<span class="comment">// 品牌id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级分类id</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; price;<span class="comment">// 价格</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.keyword, index = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String skus;<span class="comment">// sku信息的json结构</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; specs;<span class="comment">// 可搜索的规格参数，key是参数名，值是参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些特殊字段解释：</p><ul><li><p>all：用来进行全文检索的字段，里面包含标题、商品分类信息</p></li><li><p>price：价格数组，是所有sku的价格集合。方便根据价格进行筛选过滤</p></li><li><p>skus：用于页面展示的sku信息，不索引，不搜索。包含skuId、image、price、title字段</p></li><li><p>specs：所有规格参数的集合。key是参数名，值是参数值。</p><p>例如：我们在specs中存储 内存：4G,6G，颜色为红色，转为json就是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"specs"</span>:&#123;</span><br><span class="line">        <span class="attr">"内存"</span>:[<span class="number">4</span>G,<span class="number">6</span>G],</span><br><span class="line">        <span class="attr">"颜色"</span>:<span class="string">"红色"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当存储到索引库时，elasticsearch会处理为两个字段：</p><ul><li>specs.内存：[4G,6G]</li><li>specs.颜色：红色</li></ul><p>另外， 对于字符串类型，还会额外存储一个字段，这个字段不会分词，用作聚合。</p><ul><li>specs.颜色.keyword：红色</li></ul></li></ul><h4 id="1-3-商品微服务提供接口"><a href="#1-3-商品微服务提供接口" class="headerlink" title="1.3 商品微服务提供接口"></a>1.3 商品微服务提供接口</h4><p>索引库中的数据来自于数据库，我们不能直接去查询商品的数据库，因为真实开发中，每个微服务都是相互独立的，包括数据库也是一样。所以我们只能调用商品微服务提供的接口服务。</p><p>先思考我们需要的数据：</p><ul><li>SPU信息</li><li>SKU信息</li><li>SPU的详情</li><li>商品分类名称（拼接all字段）</li></ul><p>再思考我们需要哪些服务：</p><ul><li>第一：分批查询spu的服务，已经写过。</li><li>第二：根据spuId查询sku的服务，已经写过</li><li>第三：根据spuId查询SpuDetail的服务，已经写过</li><li>第四：根据商品分类id，查询商品分类名称，没写过</li><li>第五：根据商品品牌id，查询商品的品牌，没写过</li></ul><p>因此我们需要额外提供一个查询商品分类名称的接口。</p><h5 id="1-3-1-商品分类名称查询"><a href="#1-3-1-商品分类名称查询" class="headerlink" title="1.3.1 商品分类名称查询"></a>1.3.1 商品分类名称查询</h5><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"list/ids"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryNameByIds(<span class="meta">@RequestParam</span>(<span class="string">"ids"</span>)List&lt;Long&gt; ids)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(categoryService.queryNameByIds(ids));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CategoryService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryNameByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">        List&lt;Category&gt; list = categoryMapper.selectByIdList(ids);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-2-商品品牌名称查询"><a href="#1-3-2-商品品牌名称查询" class="headerlink" title="1.3.2 商品品牌名称查询"></a>1.3.2 商品品牌名称查询</h5><p><strong>BrandController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Brand&gt; <span class="title">queryNameById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(brandService.queryNameById(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Brand <span class="title">queryNameById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">     Brand brand = brandMapper.selectByPrimaryKey(id);</span><br><span class="line">     <span class="keyword">if</span> (brand==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.BRAND_NOT_FOND);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> brand;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-3-编写FeignClient"><a href="#1-3-3-编写FeignClient" class="headerlink" title="1.3.3 编写FeignClient"></a>1.3.3 编写FeignClient</h5><ul><li>我们的服务提供方不仅提供实体类，还要提供api接口声明</li><li>调用方不用字自己编写接口方法声明，直接继承提供方给的Api接口即可，</li></ul><p>第一步：服务的提供方在<code>leyou-item-interface</code>中提供API接口，并编写接口声明：</p><p>商品分类服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"category/list/ids"</span>)</span><br><span class="line">    <span class="function">List&lt;Category&gt; <span class="title">queryNameByIds</span><span class="params">(@RequestParam(<span class="string">"ids"</span>)</span>List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品服务接口，返回值不再使用ResponseEntity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spu/detail/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">SpuDetail <span class="title">querySpuDetailById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sku/list"</span>)</span><br><span class="line">    <span class="function">List&lt;Sku&gt; <span class="title">querySkuBySpuId</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spu/page"</span>)</span><br><span class="line">    <span class="function">PageResult&lt;Spu&gt; <span class="title">querySpuByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer page,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>)</span> Integer rows,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"saleable"</span>, required = <span class="keyword">false</span>)</span> Boolean saleable,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>)</span> String key</span></span><br><span class="line"><span class="function">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandApi:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"brand/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Brand <span class="title">queryNameById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpecificationApi:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spec/params"</span>)</span><br><span class="line">    List&lt;SpecParam&gt;queryParamList(</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"gid"</span>,required = <span class="keyword">false</span>) Long gid,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"cid"</span>,required = <span class="keyword">false</span>)Long cid,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"searching"</span>,required = <span class="keyword">false</span>)Boolean searching</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在调用方<code>leyou-search</code>中编写FeignClient，但不要写方法声明了，直接继承<code>leyou-item-interface</code>提供的api接口：</p><p>商品的FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品分类的FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryClient</span> <span class="keyword">extends</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandClient:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpecificationClient:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-4-测试"><a href="#1-3-4-测试" class="headerlink" title="1.3.4 测试"></a>1.3.4 测试</h5><p>创建测试类：<code>Navigate</code>-<code>Test</code></p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LySearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CategoryClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryNameByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; categories = categoryClient.queryNameByIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,categories.size());</span><br><span class="line">        <span class="keyword">for</span> (Category category : categories) &#123;</span><br><span class="line">            System.out.println(category);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-导入数据"><a href="#1-4-导入数据" class="headerlink" title="1.4 导入数据"></a>1.4 导入数据</h4><p>导入数据只做一次,以后的更新删除等操作通过消息队列来操作索引库</p><h5 id="1-4-1-创建GoodsRepository"><a href="#1-4-1-创建GoodsRepository" class="headerlink" title="1.4.1 创建GoodsRepository"></a>1.4.1 创建GoodsRepository</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Goods</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-创建索引"><a href="#1-4-2-创建索引" class="headerlink" title="1.4.2 创建索引"></a>1.4.2 创建索引</h5><p>我们新建一个测试类，在里面进行数据的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LySearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">GoodsRepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        template.createIndex(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        template.putMapping(Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-3-导入数据"><a href="#1-4-3-导入数据" class="headerlink" title="1.4.3 导入数据"></a>1.4.3 导入数据</h5><p>导入数据其实就是查询数据，然后把查询到的Spu转变为Goods来保存，因此我们先编写一个SearchService，然后在里面定义一个方法， 把Spu转为Goods</p><p><strong>SearchService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">buildGoods</span><span class="params">(Spu spu)</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询分类</span></span><br><span class="line">        List&lt;Category&gt; categories = categoryClient.queryNameByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">        List&lt;String&gt; names = categories.stream().map(Category::getName).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//查询品牌</span></span><br><span class="line">        Brand brand = brandClient.queryNameById(spu.getBrandId());</span><br><span class="line">        <span class="comment">//搜索字段</span></span><br><span class="line">        String all=spu.getTitle()+ StringUtils.join(names,<span class="string">" "</span>)+brand.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询sku</span></span><br><span class="line">        List&lt;Sku&gt; skuList = goodsClient.querySkuBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//对sku进行处理</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; skus=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//价格集合</span></span><br><span class="line">        List&lt;Long&gt; priceList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">            Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"id"</span>,sku.getId());</span><br><span class="line">            map.put(<span class="string">"title"</span>,sku.getTitle());</span><br><span class="line">            map.put(<span class="string">"price"</span>,sku.getPrice());</span><br><span class="line">            <span class="comment">//取第一张图片</span></span><br><span class="line">            map.put(<span class="string">"image"</span>, StringUtils.substringBefore(sku.getImages(),<span class="string">","</span>));</span><br><span class="line">            skus.add(map);</span><br><span class="line">            <span class="comment">//处理价格</span></span><br><span class="line">            priceList.add(sku.getPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sku的价格合集</span></span><br><span class="line">        <span class="comment">//List&lt;Long&gt; prices = skuList.stream().map(Sku::getPrice).collect(Collectors.toList());</span></span><br><span class="line">        <span class="comment">//查询规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; specParams = specificationClient.queryParamList(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//查询商品详情</span></span><br><span class="line">        SpuDetail spuDetail = goodsClient.querySpuDetailById(spu.getId());</span><br><span class="line">        <span class="comment">//获取通用规格参数</span></span><br><span class="line">        Map&lt;Long, String&gt; genericSpec = JsonUtils.toMap(spuDetail.getGenericSpec(), Long<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//获取特有规格参数</span></span><br><span class="line">        Map&lt;Long, List&lt;String&gt;&gt; specialSpec = JsonUtils.nativeRead(spuDetail.getSpecialSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;Long, List&lt;String&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//规格参数,key是规格参数的名字,值是规格参数的值</span></span><br><span class="line">        Map&lt;String,Object&gt; specs=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">            <span class="comment">//规格参数名称</span></span><br><span class="line">            String key = specParam.getName();</span><br><span class="line">            <span class="comment">//规格参数的值</span></span><br><span class="line">            Object value=<span class="string">""</span>;</span><br><span class="line">            <span class="comment">//判断是否为通用规格</span></span><br><span class="line">            <span class="keyword">if</span> (specParam.getGeneric())&#123;</span><br><span class="line">                value=genericSpec.get(specParam.getId());</span><br><span class="line">                <span class="comment">//判断是否数值类型</span></span><br><span class="line">                <span class="keyword">if</span> (specParam.getNumeric())&#123;</span><br><span class="line">                    <span class="comment">//处理成段</span></span><br><span class="line">                    value = chooseSegment(value.toString(), specParam);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                value=specialSpec.get(specParam.getId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//存入map</span></span><br><span class="line">            specs.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建goods对象</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setCid1(spu.getCid1());</span><br><span class="line">        goods.setCid2(spu.getCid2());</span><br><span class="line">        goods.setCid3(spu.getCid3());</span><br><span class="line">        goods.setCreateTime(spu.getCreateTime());</span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        goods.setAll(all); <span class="comment">//搜索字段,包含标题,分类.品牌,规格等</span></span><br><span class="line">        goods.setPrice(priceList);   <span class="comment">// 所有sku的价格合集</span></span><br><span class="line">        goods.setSkus(JsonUtils.toString(skus));    <span class="comment">//所有sku集合的json格式</span></span><br><span class="line">        goods.setSpecs(specs);   <span class="comment">//所有可搜索的规格参数</span></span><br><span class="line">        goods.setSubTitle(spu.getSubTitle());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">        String result = <span class="string">"其它"</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">","</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">"-"</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">                end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">"以上"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">"以下"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为过滤参数中有一类比较特殊，就是数值区间, 所以我们在存入时要进行处理</p><p>然后编写一个测试类，循环查询Spu，然后调用IndexService中的方法，把SPU变为Goods，然后写入索引库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rows = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//查询spu信息</span></span><br><span class="line">        PageResult&lt;Spu&gt; pageResult = goodsClient.querySpuByPage(page, rows, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        List&lt;Spu&gt; spuList = pageResult.getItems();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(spuList))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//构建成goods</span></span><br><span class="line">        List&lt;Goods&gt; goodsList = spuList.stream().map(searchService::buildGoods).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//构入索引库</span></span><br><span class="line">        goodsRepository.saveAll(goodsList);</span><br><span class="line">        <span class="comment">//翻页</span></span><br><span class="line">        page++;</span><br><span class="line">        size = spuList.size();</span><br><span class="line">    &#125;<span class="keyword">while</span> (size==<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现基本搜索"><a href="#2-实现基本搜索" class="headerlink" title="2.实现基本搜索"></a>2.实现基本搜索</h3><h4 id="2-1-后台提供搜索接口"><a href="#2-1-后台提供搜索接口" class="headerlink" title="2.1 后台提供搜索接口"></a>2.1 后台提供搜索接口</h4><p>首先分析几个问题：</p><ul><li>请求方式：Post</li><li>请求路径：/search/page，不过前面的/search应该是网关的映射路径，因此真实映射路径page，代表分页查询</li><li>请求参数：json格式，目前只有一个属性：key-搜索关键字，但是搜索结果页一定是带有分页查询的，所以将来肯定会有page属性，因此我们可以用一个对象来接收请求的json数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;<span class="comment">// 搜索条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer page;<span class="comment">// 当前页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_SIZE = <span class="number">20</span>;<span class="comment">// 每页大小，不从页面接收，而是固定大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PAGE = <span class="number">1</span>;<span class="comment">// 默认页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_PAGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取页码时做一些校验，不能小于1</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_PAGE, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回结果：作为分页结果，一般都两个属性：当前页数据、总条数信息，我们可以使用之前定义的PageResult类</li></ul><p><strong>SearchController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Goods&gt;&gt; search(<span class="meta">@RequestBody</span> SearchRequest searchRequest)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(searchService.search(searchRequest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-service"><a href="#2-1-2-service" class="headerlink" title="2.1.2 service"></a>2.1.2 service</h5><p><strong>SearchService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest searchRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page=searchRequest.getPage()-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> size=searchRequest.getSize();</span><br><span class="line">    <span class="comment">//创建查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder=<span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">//结果过滤</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"skus"</span>,<span class="string">"subTitle"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page,size));</span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"all"</span>,searchRequest.getKey()));</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    Page&lt;Goods&gt; result = goodsRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    <span class="keyword">long</span> totalElements = result.getTotalElements();</span><br><span class="line">    Long totalPages= (totalElements + searchRequest.getSize() - <span class="number">1</span>) / searchRequest.getSize();</span><br><span class="line">    List&lt;Goods&gt; content = result.getContent();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(totalElements, totalPages,content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-测试"><a href="#2-2-测试" class="headerlink" title="2.2 测试"></a>2.2 测试</h4><p>数据查到后，但是因为我们只查询部分字段，所以结果json 数据中有很多null，这很不优雅。</p><p>解决办法很简单，在leyou-search的application.yml中添加一行配置，json处理时忽略空值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># 配置json处理时忽略空值</span></span><br></pre></td></tr></table></figure><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h3><h4 id="3-1-页面搜索排序条件"><a href="#3-1-页面搜索排序条件" class="headerlink" title="3.1 页面搜索排序条件"></a>3.1 页面搜索排序条件</h4><p>点击新品，应该按照商品创建时间排序，点击价格应该按照价格排序。因为我们没有统计销量和评价，这里咱们以<code>新品</code>和<code>价格</code>为例，进行讲解，做法是想通的。</p><p>排序需要知道两个内容：</p><ul><li>排序的字段</li><li>排序的方式</li></ul><p>因此，我们首先在<code>search</code>中记录这两个信息，因为created钩子函数会对search进行覆盖，因此我们在钩子函数中对这两个信息进行初始化即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  对排序进行初始化,默认为"",代表不排序</span></span><br><span class="line">search.sortBy=search.sortBy||<span class="string">""</span>;</span><br><span class="line"><span class="comment">//  对排序方式初始化,转为布尔值</span></span><br><span class="line">search.descending=search.descending===<span class="string">"true"</span>||<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#searchApp"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            search:&#123;&#125;,</span><br><span class="line">            goodsList:[], <span class="comment">//接收搜索得到的结果</span></span><br><span class="line">            total:<span class="number">0</span>,</span><br><span class="line">            totalPage:<span class="number">0</span>,</span><br><span class="line">            selectedSku:&#123;&#125;,</span><br><span class="line">            ly</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            <span class="comment">// 判断是否有请求参数</span></span><br><span class="line">            <span class="keyword">if</span>(!location.search)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将请求参数转为对象</span></span><br><span class="line">            <span class="keyword">const</span> search = ly.parse(location.search.substring(<span class="number">1</span>));</span><br><span class="line">            search.page=search.page ? <span class="built_in">parseInt</span>(search.page):<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//  对排序进行初始化,默认为"",代表不排序</span></span><br><span class="line">            search.sortBy=search.sortBy||<span class="string">""</span>;</span><br><span class="line">            <span class="comment">//  对排序方式初始化,转为布尔值</span></span><br><span class="line">            search.descending=search.descending===<span class="string">"true"</span>||<span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 记录在data的search对象中</span></span><br><span class="line">            <span class="keyword">this</span>.search = search;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起请求，根据条件搜索</span></span><br><span class="line">            <span class="keyword">this</span>.loadData();</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            search:&#123;</span><br><span class="line">                deep: <span class="literal">true</span>,</span><br><span class="line">                handler(val,oldVal)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!oldVal || !oldVal.key) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// this.loadData();</span></span><br><span class="line">                    <span class="comment">//把请求参数写到url中</span></span><br><span class="line">                    location.search=<span class="string">"?"</span>+ly.stringify(<span class="keyword">this</span>.search);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            loadData()&#123;</span><br><span class="line">                <span class="comment">// ly.http.post("/search/page", ly.stringify(this.search)).then(resp=&gt;&#123;</span></span><br><span class="line">                ly.http.post(<span class="string">"/search/page"</span>, <span class="keyword">this</span>.search).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//保存分页结果</span></span><br><span class="line">                    <span class="keyword">this</span>.total=resp.data.total;</span><br><span class="line">                    <span class="keyword">this</span>.totalPage=resp.data.totalPage;</span><br><span class="line">                    <span class="comment">//保存当前页商品</span></span><br><span class="line">                    resp.data.items.forEach(<span class="function"><span class="params">goods</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="comment">//转换skus:把字符串转变为对象</span></span><br><span class="line">                        goods.skus=<span class="built_in">JSON</span>.parse(goods.skus);</span><br><span class="line">                        <span class="comment">//初始化被选中的sku</span></span><br><span class="line">                        goods.selectedSku=goods.skus[<span class="number">0</span>];</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">this</span>.goodsList=resp.data.items;</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            index(i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt;= <span class="number">3</span> || <span class="keyword">this</span>.totalPage &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果当前页小于等于3或者总页数小于等于5</span></span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果当前页大于3</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.search.page - <span class="number">3</span> + i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.totalPage - <span class="number">5</span> + i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            prevPage()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.search.page--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            nextPage()&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt; <span class="keyword">this</span>.totalPage)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.search.page++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            lyTop: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./js/pages/top.js"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在页面上给按钮绑定点击事件，修改<code>sortBy</code>和<code>descending</code>的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sui-nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;active:!search.sortBy&#125;"</span> @<span class="attr">click</span>=<span class="string">"search.sortBy=''"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>综合<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>销量<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;active:search.sortBy==='createTime'&#125;"</span> @<span class="attr">click</span>=<span class="string">"search.sortBy='createTime'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>评价<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;active:search.sortBy==='price'&#125;"</span> @<span class="attr">click</span>=<span class="string">"search.sortBy='price'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>价格</span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">v-show</span>=<span class="string">"search.descending"</span>&gt;</span>arrow_drop_down<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">v-show</span>=<span class="string">"!search.descending"</span>&gt;</span>arrow_drop_up<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-后台添加排序逻辑"><a href="#3-2-后台添加排序逻辑" class="headerlink" title="3.2 后台添加排序逻辑"></a>3.2 后台添加排序逻辑</h4><p>后台需要接收请求参数中的排序信息，然后在搜索中加入排序的逻辑。现在，我们的请求参数对象<code>SearchRequest</code>中，只有page、key两个字段。需要进行扩展：</p><p><img data-src="../../../../assets/img/205432.jpg" alt></p><p>然后在搜索业务逻辑中，添加排序条件：</p><p><img data-src="../../../../assets/img/205701.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-索引库数据导入&quot;&gt;&lt;a href=&quot;#1-索引库数据导入&quot; class=&quot;headerlink&quot; title=&quot;1.索引库数据导入&quot;&gt;&lt;/a&gt;1.索引库数据导入&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建搜索服务&quot;&gt;&lt;a href=&quot;#1-1-创建搜索服务&quot; class=&quot;headerlink&quot; title=&quot;1.1 创建搜索服务&quot;&gt;&lt;/a&gt;1.1 创建搜索服务&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Pom文件：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(二.品牌管理, FastDFS, 商品规格管理)</title>
    <link href="http://tonymua.top/43998/"/>
    <id>http://tonymua.top/43998/</id>
    <published>2021-05-08T13:19:59.232Z</published>
    <updated>2020-04-29T05:55:11.397Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-新增品牌"><a href="#1-新增品牌" class="headerlink" title="1.新增品牌"></a>1.新增品牌</h3><p>分析四个内容：</p><ul><li><p>请求方式：刚才看到了是POST</p></li><li><p>请求路径：/brand</p></li><li><p>请求参数：brand对象，外加商品分类的id数组cids</p></li><li><p>返回值：无</p><a id="more"></a></li></ul><p><strong>BrandController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveBrand</span><span class="params">(Brand brand, @RequestParam(value = <span class="string">"cids"</span>)</span>List&lt;Long&gt; cids)</span>&#123;</span><br><span class="line">        brandService.saveBrand(brand,cids);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandService</strong></p><p>这里要注意，我们不仅要新增品牌，还要维护品牌和商品分类的中间表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>  <span class="comment">//添加事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(Brand brand, List&lt;Long&gt; cids)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新增品牌</span></span><br><span class="line">    brand.setId(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">int</span> count = brandMapper.insert(brand);</span><br><span class="line">    <span class="keyword">if</span> (count!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.BRAND_SAVE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增中间表</span></span><br><span class="line">    <span class="keyword">for</span> (Long cid : cids) &#123;</span><br><span class="line">       count = brandMapper.insertCategoryBrand(cid, brand.getId());</span><br><span class="line">       <span class="keyword">if</span> (count!=<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.BRAND_SAVE_ERROR);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionEnum</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    CATEGORY_NOT_FOND(<span class="number">404</span>,<span class="string">"暂时没有分类信息"</span>),</span><br><span class="line">    BRAND_NOT_FOND(<span class="number">404</span>,<span class="string">"暂时没有品牌信息"</span>),</span><br><span class="line">    BRAND_SAVE_ERROR(<span class="number">500</span>,<span class="string">"新增品牌失败"</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandMapper</strong></p><p>通用Mapper只能处理单表，也就是Brand的数据，因此我们手动编写一个方法及sql，实现中间表的新增：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into tb_category_brand(category_id,brand_id) values(#&#123;cid&#125;,#&#123;pid&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertCategoryBrand</span><span class="params">(@Param(<span class="string">"cid"</span>)</span>Long cid,@<span class="title">Param</span><span class="params">(<span class="string">"pid"</span>)</span>Long pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现图片上传"><a href="#2-实现图片上传" class="headerlink" title="2.实现图片上传"></a>2.实现图片上传</h3><h4 id="2-1-搭建项目"><a href="#2-1-搭建项目" class="headerlink" title="2.1 搭建项目"></a>2.1 搭建项目</h4><p>文件的上传并不只是在品牌管理中有需求，以后的其它服务也可能需要，因此我们创建一个独立的微服务，专门处理各种上传。</p><h5 id="2-1-1-创建ly-upload-module"><a href="#2-1-1-创建ly-upload-module" class="headerlink" title="2.1.1 创建ly-upload module"></a>2.1.1 创建ly-upload module</h5><h5 id="2-1-2-导入依赖"><a href="#2-1-2-导入依赖" class="headerlink" title="2.1.2 导入依赖"></a>2.1.2 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-1-3-编写配置"><a href="#2-1-3-编写配置" class="headerlink" title="2.1.3 编写配置"></a>2.1.3 编写配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">upload-service</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span> <span class="comment"># 限制文件上传的大小</span></span><br><span class="line"><span class="comment"># Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2.1.4 启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUploadApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUploadApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-编写上传功能"><a href="#2-2-编写上传功能" class="headerlink" title="2.2 编写上传功能"></a>2.2 编写上传功能</h4><p><strong>UploadController</strong></p><p>编写controller需要知道4个内容：</p><ul><li>请求方式：上传肯定是POST</li><li>请求路径：/upload/image</li><li>请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipleFile</li><li>返回结果：上传成功后得到的文件的url路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(uploadService.UploadImage(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionEnum</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    UPLOAD_ERROR(<span class="number">500</span>,<span class="string">"文件上传失败"</span>),</span><br><span class="line">    INVALID_FILE_TYPE(<span class="number">500</span>,<span class="string">"无效的文件类型"</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>gateway.application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span></span><br><span class="line">    <span class="attr">upload-service:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/upload/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">upload-service</span></span><br><span class="line">      <span class="attr">strip-prefix:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="3-FastDFS"><a href="#3-FastDFS" class="headerlink" title="3.FastDFS"></a>3.FastDFS</h3><h4 id="3-1-什么是分布式文件系统"><a href="#3-1-什么是分布式文件系统" class="headerlink" title="3.1 什么是分布式文件系统"></a>3.1 什么是分布式文件系统</h4><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li></ul><h4 id="3-2-什么是FastDFS"><a href="#3-2-什么是FastDFS" class="headerlink" title="3.2 什么是FastDFS"></a>3.2 什么是FastDFS</h4><p>FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富：</p><ul><li>文件存储</li><li>文件同步</li><li>文件访问（上传、下载）</li><li>存取负载均衡</li><li>在线扩容</li></ul><p>适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。</p><h4 id="3-3-FastDFS的架构"><a href="#3-3-FastDFS的架构" class="headerlink" title="3.3 FastDFS的架构"></a>3.3 FastDFS的架构</h4><h5 id="3-3-1-架构图"><a href="#3-3-1-架构图" class="headerlink" title="3.3.1 架构图"></a>3.3.1 架构图</h5><p>先上图：</p><p><img data-src="../../../../assets/img/1526205318630.png" alt></p><p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p><ul><li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li><li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li><li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li><li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li><li>Storage Cluster ：存储集群，有多个Group组成。</li></ul><h5 id="3-3-2-上传和下载流程"><a href="#3-3-2-上传和下载流程" class="headerlink" title="3.3.2 上传和下载流程"></a>3.3.2 上传和下载流程</h5><blockquote><p>上传</p></blockquote><p><img data-src="../../../../assets/img/1526205664373.png" alt></p><ol><li>Client通过Tracker server查找可用的Storage server。</li><li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li><li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li></ol><blockquote><p>下载</p></blockquote><p> <img data-src="../../../../assets/img/1526205705687.png" alt></p><ol><li>Client通过Tracker server查找要下载文件所在的的Storage server。</li><li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li><li>下载文件成功。</li></ol><h4 id="3-4-实现"><a href="#3-4-实现" class="headerlink" title="3.4 实现"></a>3.4 实现</h4><h5 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1 引入依赖"></a>3.4.1 引入依赖</h5><p>在父工程中，我们已经管理了依赖，版本为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fastDFS.client.version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">fastDFS.client.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，这里我们直接引入坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-2-引入配置类"><a href="#3-4-2-引入配置类" class="headerlink" title="3.4.2 引入配置类"></a>3.4.2 引入配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(FdfsClientConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// 解决<span class="title">jmx</span>重复注册<span class="title">bean</span>的问题</span></span><br><span class="line"><span class="class">@<span class="title">EnableMBeanExport</span>(<span class="title">registration</span> </span>= RegistrationPolicy.IGNORE_EXISTING)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-3-编写FastDFS属性"><a href="#3-4-3-编写FastDFS属性" class="headerlink" title="3.4.3 编写FastDFS属性"></a>3.4.3 编写FastDFS属性</h5><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">2500</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="comment"># tracker地址</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.179</span><span class="number">.128</span><span class="string">:22122</span></span><br><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">upload:</span></span><br><span class="line">    <span class="attr">baseUrl:</span> <span class="string">http://image.leyou.com/upload/</span></span><br><span class="line">    <span class="attr">allowTypes:</span></span><br><span class="line">      <span class="string">-image/bmp</span></span><br><span class="line">      <span class="string">-image/png</span></span><br><span class="line">      <span class="string">-image/jpeg</span></span><br></pre></td></tr></table></figure><h5 id="3-4-4-改造上传逻辑"><a href="#3-4-4-改造上传逻辑" class="headerlink" title="3.4.4 改造上传逻辑"></a>3.4.4 改造上传逻辑</h5><p><strong>UploadProperties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UploadService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(UploadProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadProperties uploadProperties;</span><br><span class="line"><span class="comment">//    public static final List&lt;String&gt; ALLOW_TYPES = Arrays.asList("image/jpeg", "image/png", "image/bmp");</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">UploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//校验文件类型</span></span><br><span class="line">            String contentType = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!uploadProperties.getAllowTypes().contains(contentType)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.INVALID_FILE_TYPE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//校验文件内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.INVALID_FILE_TYPE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*//准备目标路径</span></span><br><span class="line"><span class="comment">            File dest = new File("E:\\uploadTest", file.getOriginalFilename());</span></span><br><span class="line"><span class="comment">            //保存文件到本地</span></span><br><span class="line"><span class="comment">            file.transferTo(dest);*/</span></span><br><span class="line">            <span class="comment">//上传到FastDFS</span></span><br><span class="line"><span class="comment">//            String extension=file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(".")+1);</span></span><br><span class="line">            String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), <span class="string">"."</span>);</span><br><span class="line">            StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), extension, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//返回路径</span></span><br><span class="line">            <span class="keyword">return</span> uploadProperties.getBaseUrl() + storePath.getFullPath();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//上传失败</span></span><br><span class="line">            log.error(<span class="string">"上传文件失败!"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.UPLOAD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-修改品牌"><a href="#4-修改品牌" class="headerlink" title="4.修改品牌"></a>4.修改品牌</h3><p><strong>BrandController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">editBrand</span><span class="params">(Brand brand,@RequestParam(value = <span class="string">"cids"</span>)</span>List&lt;Long&gt; cids)</span>&#123;</span><br><span class="line">    brandService.editBrand(brand,cids);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editBrand</span><span class="params">(Brand brand,List&lt;Long&gt; cids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=brandMapper.updateByPrimaryKey(brand);</span><br><span class="line">        <span class="keyword">if</span> (count!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.EDIT_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Long cid :cids)&#123;</span><br><span class="line">            count = brandMapper.editCategoryBrand(cid, brand.getId());</span><br><span class="line">            <span class="keyword">if</span> (count!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.EDIT_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update tb_category_brand set category_id=#&#123;cid&#125; where brand_id=#&#123;bid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">editCategoryBrand</span><span class="params">(@Param(<span class="string">"cid"</span>)</span>Long cid,@<span class="title">Param</span><span class="params">(<span class="string">"bid"</span>)</span>Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-商品规格管理"><a href="#5-商品规格管理" class="headerlink" title="5.商品规格管理"></a>5.商品规格管理</h3><p><code>@RequestBody</code><strong>可以接收json数组</strong></p><h4 id="5-1-商品规格组管理"><a href="#5-1-商品规格组管理" class="headerlink" title="5.1 商品规格组管理"></a>5.1 商品规格组管理</h4><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecGroupMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecGroupMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">SpecGroup</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecificationController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationService specificationService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据分类id查询规格组</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"groups/&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; queryGroupByCid(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>) Long cid) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(specificationService.queryGroupByCid(cid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"group"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveSpecGroup</span><span class="params">(@RequestBody SpecGroup specGroup)</span> </span>&#123;</span><br><span class="line">        specificationService.saveSpecGroup(specGroup);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"group"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">editSpecGroup</span><span class="params">(@RequestBody SpecGroup specGroup)</span> </span>&#123;</span><br><span class="line">        specificationService.editGroup(specGroup);</span><br><span class="line">        System.out.println(specGroup);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"group/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteSpecGroup</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        specificationService.deleteSpecGroup(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecificationService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecGroupMapper specGroupMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">queryGroupByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpecGroup specGroup=<span class="keyword">new</span> SpecGroup();</span><br><span class="line">        specGroup.setCid(cid);</span><br><span class="line">        <span class="comment">//根据对象的非空字段查询</span></span><br><span class="line">        List&lt;SpecGroup&gt; list = specGroupMapper.select(specGroup);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.SPEC_GROUP_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editGroup</span><span class="params">(SpecGroup specGroup)</span> </span>&#123;</span><br><span class="line">        specGroupMapper.updateByPrimaryKeySelective(specGroup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSpecGroup</span><span class="params">(SpecGroup specGroup)</span> </span>&#123;</span><br><span class="line">        specGroupMapper.insert(specGroup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteSpecGroup</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        specGroupMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2商品规格参数管理"><a href="#5-2商品规格参数管理" class="headerlink" title="5.2商品规格参数管理"></a>5.2商品规格参数管理</h4><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecParam</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> Long groupId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"`numeric`"</span>) <span class="comment">//numeric在数据库中是关键字@Column(name = "`numeric`")用于区分</span></span><br><span class="line">    <span class="keyword">private</span> Boolean numeric;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> Boolean generic;</span><br><span class="line">    <span class="keyword">private</span> Boolean searching;</span><br><span class="line">    <span class="keyword">private</span> String segments;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecParamMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecParamMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">SpecParam</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecificationController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationService specificationService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"params"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecParam&gt;&gt; queryParamByGid(<span class="meta">@RequestParam</span>(<span class="string">"gid"</span>) Long gid) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(specificationService.queryParamByGid(gid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveSpecParam</span><span class="params">(@RequestBody SpecParam specParam)</span> </span>&#123;</span><br><span class="line">        specificationService.saveSpecParam(specParam);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">editSpecParam</span><span class="params">(@RequestBody SpecParam specParam)</span></span>&#123;</span><br><span class="line">        specificationService.editSpecParam(specParam);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"param/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteSpecParam</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        specificationService.deleteSpecParam(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecificationService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecParamMapper specParamMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecParam&gt; <span class="title">queryParamByGid</span><span class="params">(Long gid)</span> </span>&#123;</span><br><span class="line">        SpecParam specParam=<span class="keyword">new</span> SpecParam();</span><br><span class="line">        specParam.setGroupId(gid);</span><br><span class="line">        List&lt;SpecParam&gt; list = specParamMapper.select(specParam);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.SPEC_PARAM_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSpecParam</span><span class="params">(SpecParam specParam)</span> </span>&#123;</span><br><span class="line">        specParamMapper.insert(specParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editSpecParam</span><span class="params">(SpecParam specParam)</span> </span>&#123;</span><br><span class="line">        specParamMapper.updateByPrimaryKeySelective(specParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteSpecParam</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        specParamMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-新增品牌&quot;&gt;&lt;a href=&quot;#1-新增品牌&quot; class=&quot;headerlink&quot; title=&quot;1.新增品牌&quot;&gt;&lt;/a&gt;1.新增品牌&lt;/h3&gt;&lt;p&gt;分析四个内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;请求方式：刚才看到了是POST&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求路径：/brand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求参数：brand对象，外加商品分类的id数组cids&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值：无&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(九.用户注册)</title>
    <link href="http://tonymua.top/16677/"/>
    <id>http://tonymua.top/16677/</id>
    <published>2021-05-08T13:19:59.230Z</published>
    <updated>2020-04-29T02:44:38.116Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-阿里云短信服务"><a href="#1-阿里云短信服务" class="headerlink" title="1.阿里云短信服务"></a>1.阿里云短信服务</h3><h4 id="1-1-创建短信微服务"><a href="#1-1-创建短信微服务" class="headerlink" title="1.1 创建短信微服务"></a>1.1 创建短信微服务</h4><p>因为系统中不止注册一个地方需要短信发送，因此我们将短信发送抽取为微服务：<code>leyou-sms-service</code>，凡是需要的地方都可以使用。</p><p>另外，因为短信发送API调用时长的不确定性，为了提高程序的响应速度，短信发送我们都将采用异步发送方式，即：</p><ul><li>短信服务监听MQ消息，收到消息后发送短信。</li><li>其它服务要发送短信时，通过MQ通知短信微服务</li></ul><h5 id="1-1-1-创建module"><a href="#1-1-1-创建module" class="headerlink" title="1.1.1 创建module"></a>1.1.1 创建module</h5><a id="more"></a><h5 id="1-1-2-pom"><a href="#1-1-2-pom" class="headerlink" title="1.1.2 pom"></a>1.1.2 pom</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-sms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-3-编写启动类"><a href="#1-1-3-编写启动类" class="headerlink" title="1.1.3 编写启动类"></a>1.1.3 编写启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySmsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySmsApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-4-编写application-yml"><a href="#1-1-4-编写application-yml" class="headerlink" title="1.1.4 编写application.yml"></a>1.1.4 编写application.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sms-service</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">LTAI4XXXXXXXXXXXX</span> <span class="comment"># 你自己的accessKeyId</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">1jaqiXXXXXXXXXXXXX</span> <span class="comment"># 你自己的AccessKeySecret</span></span><br><span class="line">    <span class="attr">signName:</span> <span class="string">乐优商城</span> <span class="comment"># 签名名称</span></span><br><span class="line">    <span class="attr">verifyCodeTemplate:</span> <span class="string">SMS_173945834</span> <span class="comment"># 模板名称</span></span><br></pre></td></tr></table></figure><h4 id="1-2-编写短信工具类"><a href="#1-2-编写短信工具类" class="headerlink" title="1.2 编写短信工具类"></a>1.2 编写短信工具类</h4><h5 id="1-2-1-属性抽取"><a href="#1-2-1-属性抽取" class="headerlink" title="1.2.1 属性抽取"></a>1.2.1 属性抽取</h5><p>常量抽取到application.yml中, 然后注入到属性类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.sms"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line">    String accessKeyId;</span><br><span class="line"></span><br><span class="line">    String accessKeySecret;</span><br><span class="line"></span><br><span class="line">    String signName;</span><br><span class="line"></span><br><span class="line">    String verifyCodeTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-工具类"><a href="#1-2-2-工具类" class="headerlink" title="1.2.2 工具类"></a>1.2.2 工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SmsProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SmsUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties prop;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">"sms:phone:"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SMS_MIN_INTERVAL_IN_MILLIS=<span class="number">60000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产品名称:云通信短信API产品,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="comment">//产品域名,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId = <span class="string">"LTAXXXXXXXXX"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String accessKeySecret = <span class="string">"1jaqiYZ6XXXXXXXXX"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendSmsResponse <span class="title">sendSms</span><span class="params">(String phoneNumber, String signName, String templateCode, String templateParam)</span> </span>&#123;</span><br><span class="line">        String key=KEY_PREFIX+phoneNumber;</span><br><span class="line">        <span class="comment">//限流</span></span><br><span class="line">        <span class="comment">//读取时间</span></span><br><span class="line">        String lastTime = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(lastTime))&#123;</span><br><span class="line">            Long last = Long.valueOf(lastTime);</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis()-last&lt;SMS_MIN_INTERVAL_IN_MILLIS)&#123;</span><br><span class="line">                log.info(<span class="string">"[短信服务] 发送短信频率过高,被拦截, phoneNumber:&#123;&#125;"</span>,phoneNumber);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可自助调整超时时间</span></span><br><span class="line">            System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">            System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">            IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, prop.getAccessKeyId(), prop.getAccessKeySecret());</span><br><span class="line"></span><br><span class="line">            DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line"></span><br><span class="line">            IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">            SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">            request.setMethod(MethodType.POST);</span><br><span class="line">            <span class="comment">//必填:待发送手机号</span></span><br><span class="line">            request.setPhoneNumbers(phoneNumber);</span><br><span class="line">            <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">            request.setSignName(signName);</span><br><span class="line">            <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">            request.setTemplateCode(templateCode);</span><br><span class="line">            <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">            request.setTemplateParam(templateParam);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">            SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"OK"</span>.equals(sendSmsResponse.getCode())) &#123;</span><br><span class="line">                log.info(<span class="string">"[短信服务] 发送短信失败, phoneNumber:&#123;&#125;, 原因:&#123;&#125;"</span>, phoneNumber, sendSmsResponse.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送短信日志</span></span><br><span class="line">            log.info(<span class="string">"[短信服务], 发送短信验证码,phoneNumber:&#123;&#125;"</span>,phoneNumber);</span><br><span class="line">            <span class="comment">//发送短信成功后, 写入redis,指定生存时间</span></span><br><span class="line">            redisTemplate.opsForValue().set(key,String.valueOf(System.currentTimeMillis()),<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"[短信服务] 发送短信异常, phoneNumber:&#123;&#125;,"</span>,phoneNumber,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-编写消息监听器"><a href="#1-3-编写消息监听器" class="headerlink" title="1.3 编写消息监听器"></a>1.3 编写消息监听器</h4><p>编写消息监听器，当接收到消息后，我们发送短信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsUtil smsUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(name = <span class="string">"sms.verify.code.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(name = <span class="string">"ly.sms.exchange"</span>, type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"sms.verify.code"</span></span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenSms</span><span class="params">(Map&lt;String, String&gt; msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(msg)) &#123;</span><br><span class="line">            <span class="comment">// 放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String phone = msg.remove(<span class="string">"phone"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phone))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        smsUtil.sendSms(phone,prop.getSignName(),prop.getVerifyCodeTemplate(), JsonUtils.toString(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建用户中心"><a href="#2-创建用户中心" class="headerlink" title="2.创建用户中心"></a>2.创建用户中心</h3><p>用户搜索到自己心仪的商品，接下来就要去购买，但是购买必须先登录。所以接下来我们编写用户中心，实现用户的登录和注册功能。</p><p>用户中心的提供的服务：</p><ul><li>用户的注册</li><li>用户登录</li><li>用户个人信息管理</li><li>用户地址管理</li><li>用户收藏管理</li><li>我的订单</li><li>优惠券管理</li></ul><p>这里我们暂时先实现基本的：<code>注册和登录</code>功能，其它功能大家可以自行补充完整。</p><p>因为用户中心的服务其它微服务也会调用，因此这里我们做聚合。</p><p>leyou-user：父工程，包含2个子工程：</p><ul><li>leyou-user-interface：实体及接口</li><li>leyou-user-service：业务和服务</li></ul><h4 id="2-1-创建父module"><a href="#2-1-创建父module" class="headerlink" title="2.1 创建父module"></a>2.1 创建父module</h4><h4 id="2-2-创建leyou-user-interface"><a href="#2-2-创建leyou-user-interface" class="headerlink" title="2.2 创建leyou-user-interface"></a>2.2 创建leyou-user-interface</h4><p>在leyou-user下，创建module：</p><p><strong>pom：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0.pr1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-sms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-创建leyou-user-service"><a href="#2-3-创建leyou-user-service" class="headerlink" title="2.3 创建leyou-user-service"></a>2.3 创建leyou-user-service</h4><p><strong>pom：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"lwy.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">547717253</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">lwy.pojo</span></span><br></pre></td></tr></table></figure><h4 id="2-4-添加网关路由"><a href="#2-4-添加网关路由" class="headerlink" title="2.4 添加网关路由"></a>2.4 添加网关路由</h4><p>我们修改<code>leyou-gateway</code>，添加路由规则，对<code>leyou-user-service</code>进行路由:</p><p><img data-src="../../../../assets/img/210714.jpg" alt></p><h3 id="3-数据验证功能"><a href="#3-数据验证功能" class="headerlink" title="3.数据验证功能"></a>3.数据验证功能</h3><h4 id="3-1-基本代码"><a href="#3-1-基本代码" class="headerlink" title="3.1 基本代码"></a>3.1 基本代码</h4><h5 id="3-1-1-实体类"><a href="#3-1-1-实体类" class="headerlink" title="3.1.1 实体类"></a>3.1.1 实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：为了安全考虑。这里对password和salt添加了注解@JsonIgnore，这样在json序列化时，就不会把password和salt返回。</p><h5 id="3-1-2-mapper"><a href="#3-1-2-mapper" class="headerlink" title="3.1.2 mapper"></a>3.1.2 mapper</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-3-Service"><a href="#3-1-3-Service" class="headerlink" title="3.1.3 Service"></a>3.1.3 Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-4-controller"><a href="#3-1-4-controller" class="headerlink" title="3.1.4 controller"></a>3.1.4 controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-接口说明"><a href="#3-2-接口说明" class="headerlink" title="3.2 接口说明"></a>3.2 接口说明</h4><p>实现用户数据的校验，主要包括对：手机号、用户名的唯一性校验。</p><p><strong>接口路径：</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GET</span> /check/&#123;<span class="class"><span class="keyword">data</span>&#125;/&#123;<span class="title">type</span>&#125;</span></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>要校验的数据</td><td>是</td><td>String</td><td>无</td></tr><tr><td>type</td><td>要校验的数据类型：1，用户名；2，手机；</td><td>否</td><td>Integer</td><td>1</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>返回布尔类型结果：</p><ul><li>true：可用</li><li>false：不可用</li></ul><p>状态码：</p><ul><li>200：校验成功</li><li>400：参数有误</li><li>500：服务器内部异常</li></ul><p><strong>controller</strong></p><p>因为有了接口，我们可以不关心页面，所有需要的东西都一清二楚：</p><ul><li>请求方式：GET</li><li>请求路径：/check/{param}/{type}</li><li>请求参数：param,type</li><li>返回结果：true或false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/check/&#123;data&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Boolean&gt; <span class="title">checkData</span><span class="params">(@PathVariable(<span class="string">"data"</span>)</span>String data,@<span class="title">PathVariable</span><span class="params">(<span class="string">"type"</span>)</span>Integer type)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userService.checkData(data,type));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">"user:verify:phone:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">checkData</span><span class="params">(String data, Integer type)</span> </span>&#123;</span><br><span class="line">        User record = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//判断数据类型</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                record.setUsername(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                record.setPhone(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.INVALID_USER_DATA_TYPE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = userMapper.selectCount(record);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-发送短信功能"><a href="#4-发送短信功能" class="headerlink" title="4.发送短信功能"></a>4.发送短信功能</h3><h4 id="4-1-接口说明"><a href="#4-1-接口说明" class="headerlink" title="4.1 接口说明"></a>4.1 接口说明</h4><p><strong>功能说明</strong></p><p>根据用户输入的手机号，生成随机验证码，长度为6位，纯数字。并且调用短信服务，发送验证码到用户手机。</p><p><strong>接口路径</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">POST</span> /<span class="meta">code</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>phone</td><td>用户的手机号码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果</strong>：</p><p>无</p><p>状态码：</p><ul><li>204：请求已接收</li><li>400：参数有误</li><li>500：服务器内部异常</li></ul><h4 id="4-2-Redis"><a href="#4-2-Redis" class="headerlink" title="4.2 Redis"></a>4.2 Redis</h4><h5 id="4-2-1-Spring-Data-Redis"><a href="#4-2-1-Spring-Data-Redis" class="headerlink" title="4.2.1 Spring Data Redis"></a>4.2.1 Spring Data Redis</h5><p>​    Spring Data Redis，是Spring Data 家族的一部分。 对Jedis客户端进行了封装，与spring进行了整合。可以非常方便的来实现redis的配置和操作。 </p><h5 id="4-2-2-RedisTemplate基本操作"><a href="#4-2-2-RedisTemplate基本操作" class="headerlink" title="4.2.2 RedisTemplate基本操作"></a>4.2.2 RedisTemplate基本操作</h5><p>Spring Data Redis 提供了一个工具类：RedisTemplate。里面封装了对于Redis的五种数据结构的各种操作，包括：</p><ul><li>redisTemplate.opsForValue() ：操作字符串</li><li>redisTemplate.opsForHash() ：操作hash</li><li>redisTemplate.opsForList()：操作list</li><li>redisTemplate.opsForSet()：操作set</li><li>redisTemplate.opsForZSet()：操作zset</li></ul><p>其它一些通用命令，如expire，可以通过redisTemplate.xx()来直接调用</p><p>5种结构：</p><ul><li>String：等同于java中的，<code>Map&lt;String,String&gt;</code></li><li>list：等同于java中的<code>Map&lt;String,List&lt;String&gt;&gt;</code></li><li>set：等同于java中的<code>Map&lt;String,Set&lt;String&gt;&gt;</code></li><li>sort_set：可排序的set</li><li>hash：等同于java中的：<code>Map&lt;String,Map&lt;String,String&gt;&gt;</code></li></ul><h5 id="4-2-3-StringRedisTemplate"><a href="#4-2-3-StringRedisTemplate" class="headerlink" title="4.2.3 StringRedisTemplate"></a>4.2.3 StringRedisTemplate</h5><p>RedisTemplate在创建时，可以指定其泛型类型：</p><ul><li>K：代表key 的数据类型</li><li>V: 代表value的数据类型</li></ul><p>注意：这里的类型不是Redis中存储的数据类型，而是Java中的数据类型，RedisTemplate会自动将Java类型转为Redis支持的数据类型：字符串、字节、二进制等等。</p><p>​        不过RedisTemplate默认会采用JDK自带的序列化（Serialize）来对对象进行转换。生成的数据十分庞大，因此一般我们都会指定key和value为String类型，这样就由我们自己把对象序列化为json字符串来存储即可。因为大部分情况下，我们都会使用key和value都为String的RedisTemplate:<strong>StringRedisTemplate</strong></p><h4 id="4-3-controller"><a href="#4-3-controller" class="headerlink" title="4.3 controller"></a>4.3 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"code"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">sendCode</span><span class="params">(@RequestParam(<span class="string">"phoneNumber"</span>)</span>String phoneNumber)</span>&#123;</span><br><span class="line">        userService.sendCode(phoneNumber);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-service"><a href="#4-4-service" class="headerlink" title="4.4 service"></a>4.4 service</h4><p>这里的逻辑会稍微复杂：</p><ul><li>生成随机验证码</li><li>将验证码保存到Redis中，用来在注册的时候验证</li><li>发送验证码到<code>leyou-sms-service</code>服务，发送短信</li></ul><p>生成随机码的工具：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInt</span><span class="params">(Double num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num.intValue() == num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断字符串是否是数值格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.matches(<span class="string">"^\\d+\\.?\\d+$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">toDouble</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isDigit(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Double.valueOf(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个小数精确到指定位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">scale</span><span class="params">(<span class="keyword">double</span> num, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        BigDecimal bd = <span class="keyword">new</span> BigDecimal(num);</span><br><span class="line">        <span class="keyword">return</span> bd.setScale(scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从字符串中根据正则表达式寻找，返回找到的数字数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Double[] searchNumber(String value, String regex)&#123;</span><br><span class="line">        List&lt;Double&gt; doubles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(value);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            MatchResult result = matcher.toMatchResult();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= result.groupCount(); i++) &#123;</span><br><span class="line">                doubles.add(Double.valueOf(result.group(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doubles.toArray(<span class="keyword">new</span> Double[doubles.size()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定位数的随机数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> len</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        len = Math.min(len, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span> min = Double.valueOf(Math.pow(<span class="number">10</span>, len - <span class="number">1</span>)).intValue();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(Double.valueOf(Math.pow(<span class="number">10</span>, len + <span class="number">1</span>)).intValue() - <span class="number">1</span>) + min;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(num).substring(<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">"user:verify:phone:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String phoneNumber)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        String code= NumberUtils.generateCode(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//生成key</span></span><br><span class="line">        String key=KEY_PREFIX+phoneNumber;</span><br><span class="line">        Map&lt;String,String&gt; msg=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        msg.put(<span class="string">"phone"</span>,phoneNumber);</span><br><span class="line">        msg.put(<span class="string">"code"</span>,code);</span><br><span class="line">        <span class="comment">//发送验证码</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"ly.sms.exchange"</span>,<span class="string">"sms.verify.code"</span>,msg);</span><br><span class="line">        <span class="comment">//保存验证码</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-注册功能"><a href="#5-注册功能" class="headerlink" title="5.注册功能"></a>5.注册功能</h3><h4 id="5-1-接口说明"><a href="#5-1-接口说明" class="headerlink" title="5.1 接口说明"></a>5.1 接口说明</h4><p><strong>功能说明</strong></p><p>实现用户注册功能，需要对用户密码进行加密存储，使用MD5加密，加密过程中使用随机码作为salt加盐。另外还需要对用户输入的短信验证码进行校验。</p><p><strong>接口路径</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="keyword">register</span></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>phone</td><td>手机号码</td><td>是</td><td>String</td><td>无</td></tr><tr><td>code</td><td>短信验证码</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>无返回值。</p><p>状态码：</p><ul><li>201：注册成功</li><li>400：参数有误，注册失败</li><li>500：服务器内部异常，注册失败</li></ul><h4 id="5-2-controller"><a href="#5-2-controller" class="headerlink" title="5.2 controller"></a>5.2 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(@Valid User user, @RequestParam(<span class="string">"code"</span>)</span> String code)</span>&#123;</span><br><span class="line">    userService.register(user,code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-service"><a href="#5-3-service" class="headerlink" title="5.3 service"></a>5.3 service</h4><p>基本逻辑：</p><ul><li>1）校验短信验证码</li><li>2）生成盐</li><li>3）对密码加密</li><li>4）写入数据库</li><li>5）删除Redis中的验证码</li></ul><p><strong>CodecUtils</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodecUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5Hex</span><span class="params">(String data, String salt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(salt)) &#123;</span><br><span class="line">            salt = data.hashCode() + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5Hex(salt + DigestUtils.md5Hex(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">shaHex</span><span class="params">(String data, String salt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(salt)) &#123;</span><br><span class="line">            salt = data.hashCode() + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.sha512Hex(salt + DigestUtils.sha512Hex(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateSalt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.replace(UUID.randomUUID().toString(), <span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">register</span><span class="params">(User user, String code)</span> </span>&#123;</span><br><span class="line">    String key=KEY_PREFIX+user.getPhone();</span><br><span class="line">    <span class="comment">//从redis中取出验证码</span></span><br><span class="line">    String codeCache= (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//校验验证码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!code.equals(codeCache))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    user.setId(<span class="keyword">null</span>);</span><br><span class="line">    user.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//生成盐</span></span><br><span class="line">    String salt = CodecUtils.generateSalt();</span><br><span class="line">    user.setSalt(salt);</span><br><span class="line">    <span class="comment">//对密码进行加密</span></span><br><span class="line">    user.setPassword(CodecUtils.md5Hex(user.getPassword(),salt));</span><br><span class="line">    <span class="comment">//写入数据库</span></span><br><span class="line">    <span class="keyword">boolean</span> b = userMapper.insertSelective(user) == <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果注册成功, 删除redis中的code</span></span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"删除缓存验证码失败，code：&#123;&#125;"</span>, code, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-服务端数据校验"><a href="#5-4-服务端数据校验" class="headerlink" title="5.4 服务端数据校验"></a>5.4 服务端数据校验</h4><p>刚才虽然实现了注册，但是服务端并没有进行数据校验，而前端的校验是很容易被有心人绕过的。所以我们必须在后台添加数据校验功能：</p><p>我们这里会使用Hibernate-Validator框架完成数据校验：</p><p>而SpringBoot的web启动器中已经集成了相关依赖</p><h5 id="5-4-1-什么是Hibernate-Validator"><a href="#5-4-1-什么是Hibernate-Validator" class="headerlink" title="5.4.1 什么是Hibernate Validator"></a>5.4.1 什么是Hibernate Validator</h5><p>Hibernate Validator是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验。</p><p>官网：<span class="exturl" data-url="aHR0cDovL2hpYmVybmF0ZS5vcmcvdmFsaWRhdG9yLw==">http://hibernate.org/validator/<i class="fa fa-external-link-alt"></i></span></p><p><strong>hibernate Validator</strong> 是 Bean Validation 的参考实现 。</p><p>Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint（约束） 的实现，除此之外还有一些附加的 constraint。</p><p>在日常开发中，Hibernate Validator经常用来验证bean的字段，基于注解，方便快捷高效。</p><h5 id="5-4-2-Bean校验的注解"><a href="#5-4-2-Bean校验的注解" class="headerlink" title="5.4.2 Bean校验的注解"></a>5.4.2 Bean校验的注解</h5><p>常用注解如下：</p><table><thead><tr><th><strong>Constraint</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><strong>@Valid</strong></td><td>被注释的元素是一个对象，需要检查此对象的所有字段值</td></tr><tr><td><strong>@Null</strong></td><td>被注释的元素必须为 null</td></tr><tr><td><strong>@NotNull</strong></td><td>被注释的元素必须不为 null</td></tr><tr><td><strong>@AssertTrue</strong></td><td>被注释的元素必须为 true</td></tr><tr><td><strong>@AssertFalse</strong></td><td>被注释的元素必须为 false</td></tr><tr><td><strong>@Min(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@Max(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@DecimalMin(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@DecimalMax(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@Size(max,   min)</strong></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><strong>@Digits   (integer, fraction)</strong></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><strong>@Past</strong></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><strong>@Future</strong></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><strong>@Pattern(value)</strong></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><strong>@Email</strong></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><strong>@Length</strong></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><strong>@NotEmpty</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@Range</strong></td><td>被注释的元素必须在合适的范围内</td></tr><tr><td><strong>@NotBlank</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@URL(protocol=,host=,   port=,regexp=, flags=)</strong></td><td>被注释的字符串必须是一个有效的url</td></tr><tr><td><strong>@CreditCardNumber</strong></td><td>被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td></tr></tbody></table><h5 id="5-4-3-给User添加校验"><a href="#5-4-3-给User添加校验" class="headerlink" title="5.4.3 给User添加校验"></a>5.4.3 给User添加校验</h5><p>我们在<code>ly-user-interface</code>中添加Hibernate-Validator依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在User对象的部分属性上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"用户名只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"密码只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1[35678]\\d&#123;9&#125;$"</span>, message = <span class="string">"手机号格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-4-在controller上进行控制"><a href="#5-4-4-在controller上进行控制" class="headerlink" title="5.4.4 在controller上进行控制"></a>5.4.4 在controller上进行控制</h5><p>在controller中只需要给User添加 @Valid注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(@Valid User user, @RequestParam(<span class="string">"code"</span>)</span> String code)</span>&#123;</span><br><span class="line">    userService.register(user,code);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-根据用户名和密码查询用户"><a href="#6-根据用户名和密码查询用户" class="headerlink" title="6.根据用户名和密码查询用户"></a>6.根据用户名和密码查询用户</h3><h4 id="6-1-接口说明"><a href="#6-1-接口说明" class="headerlink" title="6.1 接口说明"></a>6.1 接口说明</h4><p><strong>功能说明</strong></p><p>查询功能，根据参数中的用户名和密码查询指定用户</p><p><strong>接口路径</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /query</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><p><strong>返回结果：</strong></p><p>用户的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6572312</span>,</span><br><span class="line">    <span class="attr">"username"</span>:<span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>:<span class="string">"13688886666"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="number">1342432424</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态码：</p><ul><li>200：注册成功</li><li>400：用户名或密码错误</li><li>500：服务器内部异常，注册失败</li></ul><h4 id="6-2-controller"><a href="#6-2-controller" class="headerlink" title="6.2 controller"></a>6.2 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"query"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">queryUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"username"</span>)</span>String username,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String password</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userService.queryUser(username,password));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-service"><a href="#6-3-service" class="headerlink" title="6.3 service"></a>6.3 service</h4><p>要注意，查询时也要对密码进行加密后判断是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    User record=<span class="keyword">new</span> User();</span><br><span class="line">    record.setUsername(username);</span><br><span class="line">    User user = userMapper.selectOne(record);</span><br><span class="line">    <span class="comment">//校验用户名</span></span><br><span class="line">    <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验密码</span></span><br><span class="line">    <span class="keyword">if</span> (!user.getPassword().equals(CodecUtils.md5Hex(password,user.getSalt())))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-阿里云短信服务&quot;&gt;&lt;a href=&quot;#1-阿里云短信服务&quot; class=&quot;headerlink&quot; title=&quot;1.阿里云短信服务&quot;&gt;&lt;/a&gt;1.阿里云短信服务&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建短信微服务&quot;&gt;&lt;a href=&quot;#1-1-创建短信微服务&quot; class=&quot;headerlink&quot; title=&quot;1.1 创建短信微服务&quot;&gt;&lt;/a&gt;1.1 创建短信微服务&lt;/h4&gt;&lt;p&gt;因为系统中不止注册一个地方需要短信发送，因此我们将短信发送抽取为微服务：&lt;code&gt;leyou-sms-service&lt;/code&gt;，凡是需要的地方都可以使用。&lt;/p&gt;
&lt;p&gt;另外，因为短信发送API调用时长的不确定性，为了提高程序的响应速度，短信发送我们都将采用异步发送方式，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短信服务监听MQ消息，收到消息后发送短信。&lt;/li&gt;
&lt;li&gt;其它服务要发送短信时，通过MQ通知短信微服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;1-1-1-创建module&quot;&gt;&lt;a href=&quot;#1-1-1-创建module&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 创建module&quot;&gt;&lt;/a&gt;1.1.1 创建module&lt;/h5&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(三.商品管理, Elasticsearch入门)</title>
    <link href="http://tonymua.top/51642/"/>
    <id>http://tonymua.top/51642/</id>
    <published>2021-05-08T13:19:59.229Z</published>
    <updated>2020-04-29T05:55:00.563Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-商品管理"><a href="#1-商品管理" class="headerlink" title="1.商品管理"></a>1.商品管理</h3><h4 id="1-1-商品查询"><a href="#1-1-商品查询" class="headerlink" title="1.1 商品查询"></a>1.1 商品查询</h4><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="keyword">private</span> Long cid1;<span class="comment">// 1级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid2;<span class="comment">// 2级类目</span></span><br><span class="line">    <span class="keyword">private</span> Long cid3;<span class="comment">// 3级类目</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String subTitle;<span class="comment">// 子标题</span></span><br><span class="line">    <span class="keyword">private</span> Boolean saleable;<span class="comment">// 是否上架</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Boolean valid;<span class="comment">// 是否有效，逻辑删除用</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">// 创建时间</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">//返回时忽略该字段</span></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;<span class="comment">// 最后修改时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String cname;<span class="comment">// 商品分类名称</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String bname;<span class="comment">// 品牌名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>@JsonIgnore</code> 注解需要导入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0.pr1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpuMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Spu</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spu/page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Spu&gt;&gt; querySpuByPage(</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)Integer page,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"5"</span>)Integer rows,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"saleable"</span>,required= <span class="keyword">false</span>)Boolean saleable,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"key"</span>,required = <span class="keyword">false</span>)String key</span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(goodsService.querySpuByPage(page,rows,saleable,key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpuMapper spuMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Spu&gt; <span class="title">querySpuByPage</span><span class="params">(Integer page, Integer rows, Boolean saleable, String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        PageHelper.startPage(page,rows);</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Spu<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        <span class="comment">//搜索key过滤</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key))&#123;</span><br><span class="line">            criteria.andLike(<span class="string">"title"</span>,<span class="string">"%"</span>+key+<span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上下架过滤</span></span><br><span class="line">        <span class="keyword">if</span> (saleable!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            criteria.andEqualTo(<span class="string">"saleable"</span>,saleable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//默认排序</span></span><br><span class="line">        example.setOrderByClause(<span class="string">"last_update_time DESC"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        List&lt;Spu&gt; spus = spuMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(spus))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.GOODS_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析分类和品牌的名称</span></span><br><span class="line">        loadCategoryAndBrandName(spus);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析分页结果</span></span><br><span class="line">        PageInfo&lt;Spu&gt; info = <span class="keyword">new</span> PageInfo&lt;&gt;(spus);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(info.getTotal(),spus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadCategoryAndBrandName</span><span class="params">(List&lt;Spu&gt; spus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Spu spu : spus) &#123;</span><br><span class="line">            <span class="comment">//处理分类名称</span></span><br><span class="line">            List&lt;String&gt; names = categoryService.queryNameByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3())).stream().map(Category::getName).collect(Collectors.toList());</span><br><span class="line">            spu.setCname(StringUtils.join(names,<span class="string">"/"</span>));</span><br><span class="line">            <span class="comment">//处理品牌名称</span></span><br><span class="line">            spu.setBname(brandService.queryNameById(spu.getBrandId()).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Category中拓展查询名称的功能</strong></p><p>页面需要商品的分类名称需要在这里查询，因此要额外提供查询分类名称的功能，</p><p>在CategoryService中添加功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryNameByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">    List&lt;Category&gt; list = categoryMapper.selectByIdList(ids);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper的<code>selectByIdList</code>方法是来自于通用mapper。不过需要我们在mapper上继承一个通用mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt;, <span class="title">IdListMapper</span>&lt;<span class="title">Category</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Brand中拓展查询名称的功能</p><p>在BrandService中添加功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Brand <span class="title">queryNameById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-商品修改"><a href="#1-2-商品修改" class="headerlink" title="1.2 商品修改"></a>1.2 商品修改</h4><h5 id="1-2-1-查询SpuDetail"><a href="#1-2-1-查询SpuDetail" class="headerlink" title="1.2.1 查询SpuDetail"></a>1.2.1 查询SpuDetail</h5><blockquote><p>分析</p></blockquote><ul><li>请求方式：GET</li><li>请求路径：/spu/detail/{id}</li><li>请求参数：id，应该是spu的id</li><li>返回结果：SpuDetail对象</li></ul><p><strong>GoodsController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/detail/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;SpuDetail&gt; <span class="title">querySpuDetailById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(goodsService.querySpuDetailById(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SpuDetail <span class="title">querySpuDetailById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    SpuDetail spuDetail = spuDetailMapper.selectByPrimaryKey(id);</span><br><span class="line">    <span class="keyword">if</span> (spuDetail == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.GOODS_NOT_FOND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> spuDetail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-查询sku"><a href="#1-2-2-查询sku" class="headerlink" title="1.2.2 查询sku"></a>1.2.2 查询sku</h5><blockquote><p>分析</p></blockquote><ul><li>请求方式：Get</li><li>请求路径：/sku/list</li><li>请求参数：id，应该是spu的id</li><li>返回结果：sku的集合</li></ul><p><strong>GoodsController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"sku/list"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Sku&gt;&gt; querySkuBySpuId(<span class="meta">@RequestParam</span>(<span class="string">"id"</span>)Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(goodsService.querySkuBySpuId(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">querySkuBySpuId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">    sku.setSpuId(id);</span><br><span class="line">    List&lt;Sku&gt; skuList = skuMapper.select(sku);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(skuList)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.GOODS_NOT_FOND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for (Sku s : skuList) &#123;</span></span><br><span class="line"><span class="comment">        Stock stock = stockMapper.selectByPrimaryKey(s.getId());</span></span><br><span class="line"><span class="comment">        if (stock==null)&#123;</span></span><br><span class="line"><span class="comment">            throw new LyException(ExceptionEnum.STOCK_NOT_FOND);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        s.setStock(stock.getStock());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//查询库存</span></span><br><span class="line">    List&lt;Long&gt; ids = skuList.stream().map(Sku::getId).collect(Collectors.toList());</span><br><span class="line">    List&lt;Stock&gt; stockList = stockMapper.selectByIdList(ids);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(stockList)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.STOCK_NOT_FOND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把stock变成一个map,其key是sku的id,值是库存</span></span><br><span class="line">    Map&lt;Long, Integer&gt; stockMap = stockList.stream().collect(Collectors.toMap(Stock::getSkuId, Stock::getStock));</span><br><span class="line">    skuList.forEach(s -&gt; s.setStock(stockMap.get(s.getId())));</span><br><span class="line">    <span class="keyword">return</span> skuList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-3-商品修改"><a href="#1-2-3-商品修改" class="headerlink" title="1.2.3 商品修改"></a>1.2.3 商品修改</h5><blockquote><p>分析</p></blockquote><ul><li>请求方式：PUT</li><li>请求路径：/</li><li>请求参数：Spu对象</li><li>返回结果：无</li></ul><p><strong>GoodsController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"goods"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">editGoods</span><span class="params">(@RequestBody Spu spu)</span></span>&#123;</span><br><span class="line">        goodsService.editGoods(spu);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsService</strong></p><p>spu数据可以修改，但是SKU数据无法修改，因为有可能之前存在的SKU现在已经不存在了，或者以前的sku属性都不存在了。比如以前内存有4G，现在没了。</p><p>因此这里直接删除以前的SKU，然后新增即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editGoods</span><span class="params">(Spu spu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (spu.getId()==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.GOODS_ID_CANNOT_BE_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询以前sku</span></span><br><span class="line">    Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">    sku.setSpuId(spu.getId());</span><br><span class="line">    List&lt;Sku&gt; skus = skuMapper.select(sku);</span><br><span class="line">    <span class="comment">// 如果以前存在，则删除</span></span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(skus)) &#123;</span><br><span class="line">        List&lt;Long&gt; ids = skus.stream().map(s -&gt; s.getId()).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 删除以前库存</span></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Stock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        example.createCriteria().andIn(<span class="string">"skuId"</span>, ids);</span><br><span class="line">        <span class="keyword">this</span>.stockMapper.deleteByExample(example);</span><br><span class="line">        <span class="comment">// 删除以前的sku</span></span><br><span class="line">        skuMapper.delete(sku);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新增sku和库存</span></span><br><span class="line">    saveSkuAndStock(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新spu</span></span><br><span class="line">    spu.setLastUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    spu.setCreateTime(<span class="keyword">null</span>);</span><br><span class="line">    spu.setValid(<span class="keyword">null</span>);</span><br><span class="line">    spu.setSaleable(<span class="keyword">null</span>);</span><br><span class="line">    spuMapper.updateByPrimaryKeySelective(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新spu详情</span></span><br><span class="line">    spuDetailMapper.updateByPrimaryKeySelective(spu.getSpuDetail());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSkuAndStock</span><span class="params">(Spu spu)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义库存集合</span></span><br><span class="line">    List&lt;Stock&gt; stockList = <span class="keyword">new</span> ArrayList&lt;Stock&gt;();</span><br><span class="line">    <span class="comment">//保存sku</span></span><br><span class="line">    List&lt;Sku&gt; skus = spu.getSkus();</span><br><span class="line">    <span class="keyword">for</span> (Sku sku : skus) &#123;</span><br><span class="line">        sku.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        sku.setLastUpdateTime(sku.getCreateTime());</span><br><span class="line">        sku.setSpuId(spu.getId());</span><br><span class="line"></span><br><span class="line">        skuMapper.insert(sku);</span><br><span class="line">        <span class="comment">//保存stock</span></span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock();</span><br><span class="line">        stock.setSkuId(sku.getId());</span><br><span class="line">        stock.setStock(sku.getStock());</span><br><span class="line">        stockList.add(stock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量新增stock</span></span><br><span class="line">    stockMapper.insertList(stockList);</span><br><span class="line"></span><br><span class="line">    spuDetailMapper.updateByPrimaryKeySelective(spu.getSpuDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Elasticsearch入门之操作索引"><a href="#2-Elasticsearch入门之操作索引" class="headerlink" title="2.Elasticsearch入门之操作索引"></a>2.Elasticsearch入门之操作索引</h3><h4 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h4><p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p><p>对比关系：</p><p>​    索引（indices）——————————–  Databases 数据库</p><p>​    类型（type）——————————–  Table 数据表</p><p>​    文档（Document）——————————–  Row 行</p><p>​    字段（Field）——————————–  Columns 列 </p><p>详细说明：</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>索引库（indices)</td><td>indices是index的复数，代表许多的索引，</td></tr><tr><td>类型（type）</td><td>类型是模拟mysql中的table概念，一个索引库下可以有不同类型的索引，比如商品索引，订单索引，其数据格式不同。不过这会导致索引库混乱，因此未来版本中会移除这个概念</td></tr><tr><td>文档（document）</td><td>存入索引库原始的数据。比如每一条商品信息，就是一个文档</td></tr><tr><td>字段（field）</td><td>文档中的属性</td></tr><tr><td>映射配置（mappings）</td><td>字段的数据类型、属性、是否索引、是否存储等特性</td></tr></tbody></table><p>是不是与Lucene和solr中的概念类似。</p><p>另外，在SolrCloud中，有一些集群相关的概念，在Elasticsearch也有类似的：</p><ul><li>索引集（Indices，index的复数）：逻辑上的完整索引</li><li>分片（shard）：数据拆分后的各个部分</li><li>副本（replica）：每个分片的复制</li></ul><p>要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。</p><h4 id="2-2-创建索引"><a href="#2-2-创建索引" class="headerlink" title="2.2 创建索引"></a>2.2 创建索引</h4><h5 id="2-2-1-语法"><a href="#2-2-1-语法" class="headerlink" title="2.2.1 语法"></a>2.2.1 语法</h5><p>Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求</p><p>创建索引的请求格式：</p><ul><li><p>请求方式：PUT</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：json格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT heima</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>settings：索引库的设置<ul><li>number_of_shards：分片数量</li><li>number_of_replicas：副本数量</li></ul></li></ul></li></ul><h4 id="2-3-查看索引设置"><a href="#2-3-查看索引设置" class="headerlink" title="2.3 查看索引设置"></a>2.3 查看索引设置</h4><blockquote><p>语法</p></blockquote><p>Get请求可以帮我们查看索引信息，格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名</span><br></pre></td></tr></table></figure><p>或者，我们可以使用*来查询所有索引库配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> *</span><br></pre></td></tr></table></figure><h4 id="2-4-删除索引"><a href="#2-4-删除索引" class="headerlink" title="2.4 删除索引"></a>2.4 删除索引</h4><p>删除索引使用DELETE请求</p><blockquote><p>语法</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 索引库名</span><br></pre></td></tr></table></figure><p>当然，我们也可以用HEAD请求，查看索引是否存在：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HEAD</span> 索引库名</span><br></pre></td></tr></table></figure><h4 id="2-5-映射配置"><a href="#2-5-映射配置" class="headerlink" title="2.5 映射配置"></a>2.5 映射配置</h4><p>索引有了，接下来肯定是添加数据。但是，在添加数据之前必须定义映射。</p><p>什么是映射？</p><p>​    映射是定义文档的过程，文档包含哪些字段，这些字段是否保存，是否索引，是否分词等</p><p>只有配置清楚，Elasticsearch才会帮我们进行索引库的创建（不一定）</p><h5 id="2-5-1-创建映射字段"><a href="#2-5-1-创建映射字段" class="headerlink" title="2.5.1 创建映射字段"></a>2.5.1 创建映射字段</h5><blockquote><p>语法</p></blockquote><p>请求方式依然是PUT</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="regexp">/索引库名/_mapping/</span>类型名称</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"字段名"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"类型"</span>,</span><br><span class="line">      <span class="string">"index"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"store"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"analyzer"</span>: <span class="string">"分词器"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型名称：就是前面将的type的概念，类似于数据库中的不同表<br>字段名：任意填写    ，可以指定许多属性，例如：</li><li>type：类型，可以是text、long、short、date、integer、object等</li><li>index：是否索引，默认为true</li><li>store：是否存储，默认为false</li><li>analyzer：分词器，这里的<code>ik_max_word</code>即使用ik分词器</li></ul><blockquote><p>示例</p></blockquote><p>发起请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT heima/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"images"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-2-查看映射关系"><a href="#2-5-2-查看映射关系" class="headerlink" title="2.5.2 查看映射关系"></a>2.5.2 查看映射关系</h5><blockquote><p>语法：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名/_mapping</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /heima/_mapping</span><br></pre></td></tr></table></figure><h5 id="2-5-3-字段属性详解"><a href="#2-5-3-字段属性详解" class="headerlink" title="2.5.3 字段属性详解"></a>2.5.3 字段属性详解</h5><h6 id="2-5-3-1-type"><a href="#2-5-3-1-type" class="headerlink" title="2.5.3.1 type"></a>2.5.3.1 type</h6><p>Elasticsearch中支持的数据类型非常丰富：</p><p>几个关键的：</p><ul><li><p>String类型，又分两种：</p><ul><li>text：可分词，不可参与聚合</li><li>keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li></ul></li><li><p>Numerical：数值类型，分两类</p><ul><li>基本数据类型：long、interger、short、byte、double、float、half_float</li><li>浮点数的高精度类型：scaled_float<ul><li>需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存储，取出时再还原。</li></ul></li></ul></li><li><p>Date：日期类型</p><p>elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。</p></li></ul><h6 id="2-5-3-2-index"><a href="#2-5-3-2-index" class="headerlink" title="2.5.3.2 index"></a>2.5.3.2 index</h6><p>index影响字段的索引情况。</p><ul><li>true：字段会被索引，则可以用来进行搜索。默认值就是true</li><li>false：字段不会被索引，不能用来搜索</li></ul><p>index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。</p><p>但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。</p><h6 id="2-5-3-3-store"><a href="#2-5-3-3-store" class="headerlink" title="2.5.3.3 store"></a>2.5.3.3 store</h6><p>是否将数据进行额外存储。</p><p>在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。</p><p>但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。</p><p>原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做<code>_source</code>的属性中。而且我们可以通过过滤<code>_source</code>来选择哪些要显示，哪些不显示。</p><p>而如果设置store为true，就会在<code>_source</code>以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，<strong>store的默认值就是false。</strong></p><h4 id="2-6-新增数据"><a href="#2-6-新增数据" class="headerlink" title="2.6 新增数据"></a>2.6 新增数据</h4><h5 id="2-6-1-随机生成id"><a href="#2-6-1-随机生成id" class="headerlink" title="2.6.1 随机生成id"></a>2.6.1 随机生成id</h5><p>通过POST请求，可以向一个已经存在的索引库中添加数据。</p><blockquote><p>语法：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="regexp">/索引库名/</span>类型名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/_doc/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span>,</span><br><span class="line">     <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过kibana查看数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br></pre></td></tr></table></figure><h5 id="2-6-2-自定义id"><a href="#2-6-2-自定义id" class="headerlink" title="2.6.2 自定义id"></a>2.6.2 自定义id</h5><p>如果我们想要自己新增的时候指定id，可以这么做：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/类型<span class="string">/id</span>值</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span>,</span><br><span class="line">     <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_doc/2</span><br></pre></td></tr></table></figure><h4 id="2-7-修改数据"><a href="#2-7-修改数据" class="headerlink" title="2.7 修改数据"></a>2.7 修改数据</h4><p>把刚才新增的请求方式改为PUT，就是修改了。不过修改必须指定id，</p><ul><li>id对应文档存在，则修改</li><li>id对应文档不存在，则新增</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-删除数据"><a href="#2-8-删除数据" class="headerlink" title="2.8 删除数据"></a>2.8 删除数据</h4><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><blockquote><p>语法</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/索引库名/</span>类型名<span class="regexp">/id值</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/heima/</span>_doc<span class="regexp">/2</span></span><br></pre></td></tr></table></figure><h3 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h3><h4 id="3-1-基本查询"><a href="#3-1-基本查询" class="headerlink" title="3.1 基本查询"></a>3.1 基本查询</h4><blockquote><p>基本语法</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"查询类型"</span>:&#123;</span><br><span class="line">            <span class="attr">"查询条件"</span>:<span class="string">"查询条件值"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的query代表一个查询对象，里面可以有不同的查询属性</p><ul><li>查询类型：<ul><li>例如：<code>match_all</code>， <code>match</code>，<code>term</code> ， <code>range</code> 等等</li></ul></li><li>查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解</li></ul><h5 id="3-1-1-查询所有（match-all"><a href="#3-1-1-查询所有（match-all" class="headerlink" title="3.1.1 查询所有（match_all)"></a>3.1.1 查询所有（match_all)</h5><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>query</code>：代表查询对象</p></li><li><p><code>match_all</code>：代表查询所有</p></li><li><p>took：查询花费时间，单位是毫秒</p></li><li><p>time_out：是否超时</p></li><li><p>_shards：分片信息</p></li><li><p>hits：搜索结果总览对象</p><ul><li>total：搜索到的总条数</li><li>max_score：所有结果中文档得分的最高分</li><li>hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息<ul><li>_index：索引库</li><li>_type：文档类型</li><li>_id：文档id</li><li>_score：文档得分</li><li>_source：文档的源数据</li></ul></li></ul></li></ul><h5 id="3-1-2-匹配查询（match）"><a href="#3-1-2-匹配查询（match）" class="headerlink" title="3.1.2 匹配查询（match）"></a>3.1.2 匹配查询（match）</h5><ul><li>or关系</li></ul><p><code>match</code>类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系</p><ul><li>and关系</li></ul><p>某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>or和and之间？</li></ul><p>在 <code>or</code> 与 <code>and</code> 间二选一有点过于非黑即白。 如果用户给定的条件分词后有 5 个查询词项，想查找只包含其中 4 个词的文档，该如何处理？将 operator 操作符参数设置成 <code>and</code> 只会将此文档排除。</p><p>有时候这正是我们期望的，但在全文搜索的大多数应用场景下，我们既想包含那些可能相关的文档，同时又排除那些不太相关的。换句话说，我们想要处于中间某种结果。</p><p><code>match</code> 查询支持 <code>minimum_should_match</code> 最小匹配参数， 这让我们可以指定必须匹配的词项数用来表示一个文档是否相关。我们可以将其设置为某个具体数字，更常用的做法是将其设置为一个<code>百分数</code>，因为我们无法控制用户搜索时输入的单词数量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"title"</span>:&#123;</span><br><span class="line">            <span class="attr">"query"</span>:<span class="string">"小米曲面电视"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"75%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，搜索语句可以分为3个词，如果使用and关系，需要同时满足3个词才会被搜索到。这里我们采用最小品牌数：75%，那么也就是说只要匹配到总词条数量的75%即可，这里3*75% 约等于2。所以只要包含2个词条就算满足条件了。</p><h5 id="3-1-3-多字段查询（multi-match）"><a href="#3-1-3-多字段查询（multi-match）" class="headerlink" title="3.1.3 多字段查询（multi_match）"></a>3.1.3 多字段查询（multi_match）</h5><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"title"</span>, <span class="string">"price"</span>], </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"大米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，我们会在title字段和price字段中查询<code>大米手机</code>这个词</p><h5 id="3-1-4-词条匹配-term"><a href="#3-1-4-词条匹配-term" class="headerlink" title="3.1.4 词条匹配(term)"></a>3.1.4 词条匹配(term)</h5><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些<strong>未分词</strong>的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="string">"2899"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-5-多词条精确匹配-terms"><a href="#3-1-5-多词条精确匹配-terms" class="headerlink" title="3.1.5 多词条精确匹配(terms)"></a>3.1.5 多词条精确匹配(terms)</h5><p><code>terms</code> 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">            <span class="attr">"price"</span>:[<span class="number">2699.00</span>,<span class="number">2899.00</span>,<span class="number">3899.00</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-结果过滤"><a href="#3-2-结果过滤" class="headerlink" title="3.2 结果过滤"></a>3.2 结果过滤</h4><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。</p><p>如果我们只想获取其中的部分字段，我们可以添加<code>_source</code>的过滤</p><h5 id="3-2-1直接指定字段"><a href="#3-2-1直接指定字段" class="headerlink" title="3.2.1直接指定字段"></a>3.2.1直接指定字段</h5><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"title"</span>, <span class="string">"price"</span>], </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"大米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-指定includes和excludes"><a href="#3-2-2-指定includes和excludes" class="headerlink" title="3.2.2 指定includes和excludes"></a>3.2.2 指定includes和excludes</h5><p>我们也可以通过：</p><ul><li>includes：来指定想要显示的字段</li><li>excludes：来指定不想要显示的字段</li></ul><p>二者都是可选的。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"excludes"</span>: <span class="string">"images"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"大米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-高级查询"><a href="#3-3-高级查询" class="headerlink" title="3.3 高级查询"></a>3.3 高级查询</h4><h5 id="3-3-1-布尔组合（bool"><a href="#3-3-1-布尔组合（bool" class="headerlink" title="3.3.1 布尔组合（bool)"></a>3.3.1 布尔组合（bool)</h5><p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"大米"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>:  <span class="string">"电视"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>:   &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"手机"</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><h5 id="3-3-2-范围查询-range"><a href="#3-3-2-范围查询-range" class="headerlink" title="3.3.2 范围查询(range)"></a>3.3.2 范围查询(range)</h5><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">2000</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">2800</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>range</code>查询允许以下字符：</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">gt</td><td align="center">大于</td></tr><tr><td align="center">gte</td><td align="center">大于等于</td></tr><tr><td align="center">lt</td><td align="center">小于</td></tr><tr><td align="center">lte</td><td align="center">小于等于</td></tr></tbody></table><h5 id="3-3-3-模糊查询-fuzzy"><a href="#3-3-3-模糊查询-fuzzy" class="headerlink" title="3.3.3 模糊查询(fuzzy)"></a>3.3.3 模糊查询(fuzzy)</h5><p><code>fuzzy</code> 查询是 <code>term</code> 查询的模糊等价。它允许用户搜索词条与实际词条的拼写出现偏差，但是偏差的编辑距离不得超过2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"appla"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询，也能查询到apple手机</p><p>我们可以通过<code>fuzziness</code>来指定允许的编辑距离：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"appla"</span>,</span><br><span class="line">            <span class="attr">"fuzziness"</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-过滤-filter"><a href="#3-4-过滤-filter" class="headerlink" title="3.4 过滤(filter)"></a>3.4 过滤(filter)</h4><blockquote><p><strong>条件查询中进行过滤</strong></p></blockquote><p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"大米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3800.00</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>filter</code>中还可以再次进行<code>bool</code>组合条件过滤。</p><blockquote><p><strong>无查询条件，直接过滤</strong></p></blockquote><p>如果一次查询只有过滤，没有查询条件，不希望进行评分，我们可以使用<code>constant_score</code>取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"constant_score"</span>:   &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">             <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3000.00</span>&#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-排序"><a href="#3-5-排序" class="headerlink" title="3.5 排序"></a>3.5 排序</h4><h5 id="3-4-1-单字段排序"><a href="#3-4-1-单字段排序" class="headerlink" title="3.4.1 单字段排序"></a>3.4.1 单字段排序</h5><p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"大米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-2-多字段排序"><a href="#3-4-2-多字段排序" class="headerlink" title="3.4.2 多字段排序"></a>3.4.2 多字段排序</h5><p>假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /goods/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">200000</span>,<span class="attr">"lt"</span>:<span class="number">300000</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">      &#123; <span class="attr">"price"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;,</span><br><span class="line">      &#123; <span class="attr">"_score"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-聚合aggregations"><a href="#4-聚合aggregations" class="headerlink" title="4. 聚合aggregations"></a>4. 聚合aggregations</h3><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现实时搜索效果。</p><h4 id="4-1-基本概念"><a href="#4-1-基本概念" class="headerlink" title="4.1 基本概念"></a>4.1 基本概念</h4><p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p><blockquote><p><strong>桶（bucket）</strong></p></blockquote><p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>……或者我们按照年龄段对人进行划分：0<del>10,10</del>20,20<del>30,30</del>40等。</p><p>Elasticsearch中提供的划分桶的方式有很多：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li><li>……</li></ul><p>综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p><blockquote><p><strong>度量（metrics）</strong></p></blockquote><p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p><p>比较常用的一些度量聚合方式：</p><ul><li>Avg Aggregation：求平均值</li><li>Max Aggregation：求最大值</li><li>Min Aggregation：求最小值</li><li>Percentiles Aggregation：求百分比</li><li>Stats Aggregation：同时返回avg、max、min、sum、count等</li><li>Sum Aggregation：求和</li><li>Top hits Aggregation：求前几</li><li>Value Count Aggregation：求总数</li><li>……</li></ul><p>为了测试聚合，我们先批量导入一些数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /cars</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">       <span class="attr">"color"</span>: &#123;</span><br><span class="line">         <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">       &#125;,</span><br><span class="line">      <span class="attr">"make"</span>: &#123;</span><br><span class="line">         <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此不能被分词。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">10000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-10-28"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">30000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-05-18"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">15000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-07-02"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">12000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-08-19"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">80000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"bmw"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-01-01"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">25000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-02-12"</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-聚合为桶"><a href="#4-2-聚合为桶" class="headerlink" title="4.2 聚合为桶"></a>4.2 聚合为桶</h4><p>首先，我们按照 汽车的颜色<code>make</code>来划分<code>桶</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_brand"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"make"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率</li><li>aggs：声明这是一个聚合查询，是aggregations的缩写<ul><li>popular_brand：给这次聚合起一个名字，任意。<ul><li>terms：划分桶的方式，这里是根据词条划分<ul><li>field：划分桶的字段</li></ul></li></ul></li></ul></li></ul><h4 id="4-3-桶内度量"><a href="#4-3-桶内度量" class="headerlink" title="4.3 桶内度量"></a>4.3 桶内度量</h4><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p><p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p><p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_brand"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"make"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"price_avg"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span> : &#123;</span><br><span class="line">    <span class="attr">"popular_brand"</span> : &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"honda"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"price_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">16666.666666666668</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"ford"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"price_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">27500.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"toyota"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"price_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">13500.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span> : <span class="string">"bmw"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"price_avg"</span> : &#123;</span><br><span class="line">            <span class="attr">"value"</span> : <span class="number">80000.0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hits：查询结果为空，因为我们设置了size为0</li><li>aggregations：聚合的结果</li><li>popular_colors：我们定义的聚合名称</li><li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul><li>key：这个桶对应的color字段的值</li><li>doc_count：这个桶中的文档数量</li></ul></li><li>aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见<code>度量</code>也是一个聚合,度量是在桶内的聚合</li><li>avg_price：聚合的名称</li><li>avg：度量的类型，这里是求平均值</li><li>field：度量运算的字段</li></ul><h4 id="4-4-划分桶的其它方式"><a href="#4-4-划分桶的其它方式" class="headerlink" title="4.4 划分桶的其它方式"></a>4.4 划分桶的其它方式</h4><p>前面讲了，划分桶的方式有很多，例如：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li></ul><p>刚刚的案例中，我们采用的是Terms Aggregation，即根据词条划分桶。</p><p>接下来，我们再学习几个比较实用的：</p><h5 id="4-4-1-阶梯分桶Histogram"><a href="#4-4-1-阶梯分桶Histogram" class="headerlink" title="4.4.1 阶梯分桶Histogram"></a>4.4.1 阶梯分桶Histogram</h5><blockquote><p>原理：</p></blockquote><p>histogram是把数值类型的字段，按照一定的阶梯大小进行分组。你需要指定一个阶梯值（interval）来划分阶梯大小。</p><p>举例：</p><p>比如你有价格字段，如果你设定interval的值为200，那么阶梯就会是这样的：</p><p>0，200，400，600，…</p><p>上面列出的是每个阶梯的key，也是区间的启点。</p><p>如果一件商品的价格是450，会落入哪个阶梯区间呢？计算公式如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bucket_key = Math.floor((<span class="keyword">value</span> - <span class="keyword">offset</span>) / <span class="type">interval</span>) * <span class="type">interval</span> + <span class="keyword">offset</span></span><br></pre></td></tr></table></figure><p>value：就是当前数据的值，本例中是450</p><p>offset：起始偏移量，默认为0</p><p>interval：阶梯间隔，比如200</p><p>因此你得到的key = Math.floor((450 - 0) / 200) * 200 + 0 = 400</p><blockquote><p>操作一下：</p></blockquote><p>比如，我们对汽车的价格进行分组，指定间隔interval为5000：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"price"</span>:&#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="attr">"min_doc_count"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-商品管理&quot;&gt;&lt;a href=&quot;#1-商品管理&quot; class=&quot;headerlink&quot; title=&quot;1.商品管理&quot;&gt;&lt;/a&gt;1.商品管理&lt;/h3&gt;&lt;h4 id=&quot;1-1-商品查询&quot;&gt;&lt;a href=&quot;#1-1-商品查询&quot; class=&quot;headerlink&quot; title=&quot;1.1 商品查询&quot;&gt;&lt;/a&gt;1.1 商品查询&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;实体类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Table&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;tb_spu&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Spu&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.IDENTITY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long brandId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long cid1;&lt;span class=&quot;comment&quot;&gt;// 1级类目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long cid2;&lt;span class=&quot;comment&quot;&gt;// 2级类目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long cid3;&lt;span class=&quot;comment&quot;&gt;// 3级类目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String title;&lt;span class=&quot;comment&quot;&gt;// 标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String subTitle;&lt;span class=&quot;comment&quot;&gt;// 子标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Boolean saleable;&lt;span class=&quot;comment&quot;&gt;// 是否上架&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@JsonIgnore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Boolean valid;&lt;span class=&quot;comment&quot;&gt;// 是否有效，逻辑删除用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Date createTime;&lt;span class=&quot;comment&quot;&gt;// 创建时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@JsonIgnore&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//返回时忽略该字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Date lastUpdateTime;&lt;span class=&quot;comment&quot;&gt;// 最后修改时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transient&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String cname;&lt;span class=&quot;comment&quot;&gt;// 商品分类名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transient&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String bname;&lt;span class=&quot;comment&quot;&gt;// 品牌名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(七.商品详情及静态化(Thymeleaf))</title>
    <link href="http://tonymua.top/11565/"/>
    <id>http://tonymua.top/11565/</id>
    <published>2021-05-08T13:19:59.227Z</published>
    <updated>2020-04-29T02:44:38.061Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-商品详情"><a href="#1-商品详情" class="headerlink" title="1.商品详情"></a>1.商品详情</h3><p>当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，</p><h4 id="1-1商品详情页服务"><a href="#1-1商品详情页服务" class="headerlink" title="1.1商品详情页服务"></a>1.1商品详情页服务</h4><p>商品详情浏览量比较大，并发高，我们会独立开启一个微服务，用来展示商品详情。</p><h5 id="1-1-1-创建module"><a href="#1-1-1-创建module" class="headerlink" title="1.1.1 创建module"></a>1.1.1 创建module</h5><p>商品的详情页服务，命名为：<code>leyou-page</code></p><h5 id="1-1-2-pom依赖"><a href="#1-1-2-pom依赖" class="headerlink" title="1.1.2 pom依赖"></a>1.1.2 pom依赖</h5><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-page<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-3-编写启动类"><a href="#1-1-3-编写启动类" class="headerlink" title="1.1.3 编写启动类"></a>1.1.3 编写启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGoodsWebApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGoodsWebApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-4-application-yml文件"><a href="#1-1-4-application-yml文件" class="headerlink" title="1.1.4 application.yml文件"></a>1.1.4 application.yml文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">page-service</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br></pre></td></tr></table></figure><h4 id="1-2-页面跳转"><a href="#1-2-页面跳转" class="headerlink" title="1.2 页面跳转"></a>1.2 页面跳转</h4><h5 id="1-2-1-修改页面跳转路径"><a href="#1-2-1-修改页面跳转路径" class="headerlink" title="1.2.1 修改页面跳转路径"></a>1.2.1 修改页面跳转路径</h5><p>我们应该跳转到对应的商品的详情页才对。</p><p>那么问题来了：商品详情页是一个SKU？还是多个SKU的集合？</p><p>通过详情页的预览，我们知道它是多个SKU的集合，即SPU。</p><p>所以，页面跳转时，我们应该携带SPU的id信息。</p><p>例如：<span class="exturl" data-url="aHR0cDovL3d3dy5sZXlvdS5jb20vaXRlbS8yMzE0MTIzLmh0bWw=">http://www.leyou.com/item/2314123.html<i class="fa fa-external-link-alt"></i></span></p><p>这里就采用了路径占位符的方式来传递spu的id，我们打开<code>search.html</code>，修改其中的商品路径：</p><h5 id="1-2-2-nginx反向代理"><a href="#1-2-2-nginx反向代理" class="headerlink" title="1.2.2 nginx反向代理"></a>1.2.2 nginx反向代理</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /item &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8084;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>把以/item开头的请求，代理到我们的8084端口</p><h4 id="1-3-封装模型数据"><a href="#1-3-封装模型数据" class="headerlink" title="1.3 封装模型数据"></a>1.3 封装模型数据</h4><p>我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p><ul><li>spu信息</li><li>spu的详情</li><li>spu下的所有sku</li><li>品牌</li><li>商品三级分类</li><li>商品规格参数、规格参数组</li></ul><h5 id="1-3-1-商品微服务提供接口"><a href="#1-3-1-商品微服务提供接口" class="headerlink" title="1.3.1 商品微服务提供接口"></a>1.3.1 商品微服务提供接口</h5><h6 id="1-3-1-1-查询spu"><a href="#1-3-1-1-查询spu" class="headerlink" title="1.3.1.1 查询spu"></a>1.3.1.1 查询spu</h6><p>以上所需数据中，根据id查询spu的接口目前还没有，我们需要在商品微服务中提供这个接口：</p><p><strong>GoodsApi</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">Spu <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>GoodsController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Spu&gt; <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(goodsService.querySpuById(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GoodsService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spu <span class="title">querySpuById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    Spu spu = spuMapper.selectByPrimaryKey(id);</span><br><span class="line">    <span class="comment">//查询sku</span></span><br><span class="line">    spu.setSkus(querySkuBySpuId(id));</span><br><span class="line">    spu.setSpuDetail(querySpuDetailById(id));</span><br><span class="line">    <span class="keyword">return</span> spu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-3-1-2-查询规格参数组"><a href="#1-3-1-2-查询规格参数组" class="headerlink" title="1.3.1.2 查询规格参数组"></a>1.3.1.2 查询规格参数组</h6><p>我们在页面展示规格时，需要按组展示：</p><p>组内有多个参数，为了方便展示。我们在leyou-item-service中提供一个接口，查询规格组，同时在规格组内的所有参数。</p><blockquote><p>拓展<code>SpecGroup</code>类：</p></blockquote><p>我们在<code>SpecGroup</code>中添加一个<code>SpecParam</code>的集合，保存该组下所有规格参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParam&gt; params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后提供查询接口：</p><p><strong>SpecificationAPI</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spec/group"</span>)</span><br><span class="line">   <span class="function">List&lt;SpecGroup&gt; <span class="title">queryListByCid</span><span class="params">(@RequestParam(<span class="string">"cid"</span>)</span>Long cid)</span>;</span><br></pre></td></tr></table></figure><p><strong>SpecificationController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"group"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; queryListByCid(<span class="meta">@RequestParam</span>(<span class="string">"cid"</span>)Long cid)&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(specificationService.queryListByCid(cid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpecificationService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">queryListByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询规格组</span></span><br><span class="line">    List&lt;SpecGroup&gt; specGroups = queryGroupByCid(cid);</span><br><span class="line">    <span class="comment">//查询组内参数</span></span><br><span class="line">    List&lt;SpecParam&gt; specParams = queryParamList(<span class="keyword">null</span>, cid, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//先把规格参数变成map,map的key是规格组id,map的值是组下的所有参数</span></span><br><span class="line">    Map&lt;Long,List&lt;SpecParam&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(specParam.getId()))&#123;</span><br><span class="line">            <span class="comment">//这个组id在map中已经存在,新增一个list</span></span><br><span class="line">            map.put(specParam.getGroupId(),<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(specParam.getGroupId()).add(specParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//填充param到group</span></span><br><span class="line">    <span class="keyword">for</span> (SpecGroup specGroup : specGroups) &#123;</span><br><span class="line">        specGroup.setParams(map.get(specGroup.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> specGroups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-2-创建FeignClient"><a href="#1-3-2-创建FeignClient" class="headerlink" title="1.3.2 创建FeignClient"></a>1.3.2 创建FeignClient</h5><p>拷贝ly-search下的client包</p><h5 id="1-3-3-封装数据模型"><a href="#1-3-3-封装数据模型" class="headerlink" title="1.3.3 封装数据模型"></a>1.3.3 封装数据模型</h5><p>我们创建一个GoodsService，在里面来封装数据模型。</p><p>这里要查询的数据：</p><ul><li>SPU</li><li>SpuDetail</li><li>SKU集合</li><li>商品分类<ul><li>这里值需要分类的id和name就够了，因此我们查询到以后自己需要封装数据</li></ul></li><li>品牌对象</li><li>规格组<ul><li>查询规格组的时候，把规格组下所有的参数也一并查出，上面提供的接口中已经实现该功能，我们直接调</li></ul></li><li>sku的特有规格参数</li></ul><p>在页面渲染时，需要知道参数的名称，我们就需要把id和name一一对应起来，因此需要额外查询sku的特有规格参数，然后变成一个id:name的键值对格式。也就是一个Map，方便将来根据id查找！</p><p><strong>PageService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">loadModel</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询spu</span></span><br><span class="line">        Spu spu = goodsClient.querySpuById(spuId);</span><br><span class="line">        <span class="comment">// 查询spu详情</span></span><br><span class="line">        SpuDetail spuDetail = spu.getSpuDetail();</span><br><span class="line">        <span class="comment">// 查询sku</span></span><br><span class="line">        List&lt;Sku&gt; skus = spu.getSkus();</span><br><span class="line">        <span class="comment">// 查询品牌</span></span><br><span class="line">        Brand brand = brandClient.queryNameById(spu.getBrandId());</span><br><span class="line">        <span class="comment">// 查询分类</span></span><br><span class="line">        List&lt;Category&gt; categories = categoryClient.queryCategoryByIds(Arrays.asList(spu.getCid1(),spu.getCid2(),spu.getCid3()));</span><br><span class="line">        <span class="comment">// 查询规格参数</span></span><br><span class="line">        List&lt;SpecGroup&gt; groups = specificationClient.queryListByCid(spu.getCid3());</span><br><span class="line">        <span class="comment">// 查询所有特有规格参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询所有特有规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; specParams = <span class="keyword">this</span>.specificationClient.queryParamList(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 处理规格参数</span></span><br><span class="line">        Map&lt;Long, String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        specParams.forEach(param-&gt;&#123;</span><br><span class="line">            paramMap.put(param.getId(), param.getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        model.put(<span class="string">"spu"</span>, spu);</span><br><span class="line">        model.put(<span class="string">"spuDetail"</span>, spuDetail);</span><br><span class="line">        model.put(<span class="string">"skus"</span>, skus);</span><br><span class="line">        model.put(<span class="string">"brand"</span>, brand);</span><br><span class="line">        model.put(<span class="string">"categories"</span>, categories);</span><br><span class="line">        model.put(<span class="string">"groups"</span>, groups);</span><br><span class="line">        model.put(<span class="string">"params"</span>, paramMap);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在controller中把数据放入model：</p><p><strong>PageController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PageService pageService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"item/&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long spuId, Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//查询模型数据</span></span><br><span class="line">        Map&lt;String,Object&gt; attributes=pageService.loadModel(spuId);</span><br><span class="line">        <span class="comment">//准备模型数据</span></span><br><span class="line">        model.addAllAttributes(attributes);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-页面静态化"><a href="#2-页面静态化" class="headerlink" title="2.页面静态化"></a>2.页面静态化</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><h5 id="2-1-1-问题分析"><a href="#2-1-1-问题分析" class="headerlink" title="2.1.1 问题分析"></a>2.1.1 问题分析</h5><p>现在，我们的页面是通过Thymeleaf模板引擎渲染后返回到客户端。在后台需要大量的数据查询，而后渲染得到HTML页面。会对数据库造成压力，并且请求的响应时间过长，并发能力不高。</p><p>大家能想到什么办法来解决这个问题？</p><p>首先我们能想到的就是缓存技术，比如之前学习过的Redis。不过Redis适合数据规模比较小的情况。假如数据量比较大，例如我们的商品详情页。每个页面如果10kb，100万商品，就是10GB空间，对内存占用比较大。此时就给缓存系统带来极大压力，如果缓存崩溃，接下来倒霉的就是数据库了。</p><p>所以缓存并不是万能的，某些场景需要其它技术来解决，比如静态化。</p><h5 id="2-1-2-什么是静态化"><a href="#2-1-2-什么是静态化" class="headerlink" title="2.1.2 什么是静态化"></a>2.1.2 什么是静态化</h5><p>静态化是指把动态生成的HTML页面变为静态内容保存，以后用户的请求到来，直接访问静态页面，不再经过服务的渲染。</p><p>而静态的HTML页面可以部署在nginx中，从而大大提高并发能力，减小tomcat压力。</p><h5 id="2-1-3-如何实现静态化"><a href="#2-1-3-如何实现静态化" class="headerlink" title="2.1.3 如何实现静态化"></a>2.1.3 如何实现静态化</h5><p>目前，静态化页面都是通过模板引擎来生成，而后保存到nginx服务器来部署。常用的模板引擎比如：</p><ul><li>Freemarker</li><li>Velocity</li><li>Thymeleaf</li></ul><p>我们之前就使用的Thymeleaf，来渲染html返回给用户。Thymeleaf除了可以把渲染结果写入Response，也可以写到本地文件，从而实现静态化。</p><h4 id="2-2-Thymeleaf实现静态化"><a href="#2-2-Thymeleaf实现静态化" class="headerlink" title="2.2 Thymeleaf实现静态化"></a>2.2 Thymeleaf实现静态化</h4><h5 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h5><p>先说下Thymeleaf中的几个概念：</p><ul><li>Context：运行上下文</li><li>TemplateResolver：模板解析器</li><li>TemplateEngine：模板引擎</li></ul><blockquote><p>Context</p></blockquote><p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p><p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p><blockquote><p>TemplateResolver</p></blockquote><p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p><p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p><blockquote><p>TemplateEngine</p></blockquote><p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引擎进行处理的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templateEngine.process(<span class="string">"模板名"</span>, context, writer);</span><br></pre></td></tr></table></figure><p>三个参数：</p><ul><li>模板名称</li><li>上下文：里面包含模型数据</li><li>writer：输出目的地的流</li></ul><p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p><p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p><h5 id="2-2-2-具体实现"><a href="#2-2-2-具体实现" class="headerlink" title="2.2.2 具体实现"></a>2.2.2 具体实现</h5><p><strong>PageService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line">    <span class="comment">//上下文</span></span><br><span class="line">    Context context=<span class="keyword">new</span> Context();</span><br><span class="line">    context.setVariables(loadModel(spuId));</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    File dest = <span class="keyword">new</span> File(<span class="string">"E:\\tools\\nginx-1.14.0\\html\\item"</span>, spuId + <span class="string">".html"</span>);</span><br><span class="line">    <span class="keyword">if</span> (dest.exists())&#123;</span><br><span class="line">        dest.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> (PrintWriter writer = <span class="keyword">new</span> PrintWriter(dest, <span class="string">"UTF-8"</span>)) &#123;</span><br><span class="line">        <span class="comment">//生成html</span></span><br><span class="line">        templateEngine.process(<span class="string">"item"</span>,context,writer);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">"[静态页面] 生成静态页面异常:"</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncExcute</span><span class="params">(Long spuId)</span> </span>&#123;</span><br><span class="line">    ThreadUtils.execute(()-&gt;createHtml(spuId));</span><br><span class="line">    <span class="comment">/*ThreadUtils.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void run() &#123;</span></span><br><span class="line"><span class="comment">            createHtml(spuId);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        es.submit(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-什么时候创建静态文件"><a href="#2-2-3-什么时候创建静态文件" class="headerlink" title="2.2.3 什么时候创建静态文件"></a>2.2.3 什么时候创建静态文件</h5><p>我们编写好了创建静态文件的service，那么问题来了：什么时候去调用它呢</p><p>我们编写好了创建静态文件的service，那么问题来了：什么时候去调用它呢</p><p>想想这样的场景：</p><p>假如大部分的商品都有了静态页面。那么用户的请求都会被nginx拦截下来，根本不会到达我们的<code>leyou-goods-web</code>服务。只有那些还没有页面的请求，才可能会到达这里。</p><p>因此，如果请求到达了这里，我们除了返回页面视图外，还应该创建一个静态页面，那么下次就不会再来麻烦我们了。</p><p>所以，我们在GoodsController中添加逻辑，去生成静态html文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PageService pageService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"item/&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long spuId, Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//查询模型数据</span></span><br><span class="line">        Map&lt;String,Object&gt; attributes=pageService.loadModel(spuId);</span><br><span class="line">        <span class="comment">//准备模型数据</span></span><br><span class="line">        model.addAllAttributes(attributes);</span><br><span class="line">        <span class="comment">// 页面静态化</span></span><br><span class="line">        pageService.asyncExcute(spuId);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：生成html 的代码不能对用户请求产生影响，所以这里我们使用额外的线程进行异步创建。</p><h4 id="2-3-nginx代理静态页面"><a href="#2-3-nginx代理静态页面" class="headerlink" title="2.3 nginx代理静态页面"></a>2.3 nginx代理静态页面</h4><p>接下来，我们修改nginx，让它对商品请求进行监听，指向本地静态页面，如果本地没找到，才进行反向代理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /item &#123;</span><br><span class="line">        <span class="comment"># 先找本地</span></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123; <span class="comment">#请求的文件不存在，就反向代理</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8084;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9002;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启测试：发现请求速度得到了极大提升</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-商品详情&quot;&gt;&lt;a href=&quot;#1-商品详情&quot; class=&quot;headerlink&quot; title=&quot;1.商品详情&quot;&gt;&lt;/a&gt;1.商品详情&lt;/h3&gt;&lt;p&gt;当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，&lt;/p&gt;
&lt;h4 id=&quot;1-1商品详情页服务&quot;&gt;&lt;a href=&quot;#1-1商品详情页服务&quot; class=&quot;headerlink&quot; title=&quot;1.1商品详情页服务&quot;&gt;&lt;/a&gt;1.1商品详情页服务&lt;/h4&gt;&lt;p&gt;商品详情浏览量比较大，并发高，我们会独立开启一个微服务，用来展示商品详情。&lt;/p&gt;
&lt;h5 id=&quot;1-1-1-创建module&quot;&gt;&lt;a href=&quot;#1-1-1-创建module&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 创建module&quot;&gt;&lt;/a&gt;1.1.1 创建module&lt;/h5&gt;&lt;p&gt;商品的详情页服务，命名为：&lt;code&gt;leyou-page&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-1-2-pom依赖&quot;&gt;&lt;a href=&quot;#1-1-2-pom依赖&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 pom依赖&quot;&gt;&lt;/a&gt;1.1.2 pom依赖&lt;/h5&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微服务项目总结(一.通用异常处理, 分类查询, 品牌查询)</title>
    <link href="http://tonymua.top/55497/"/>
    <id>http://tonymua.top/55497/</id>
    <published>2021-05-08T13:19:59.226Z</published>
    <updated>2020-04-29T05:54:48.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-通用异常处理"><a href="#1-通用异常处理" class="headerlink" title="1.通用异常处理"></a>1.通用异常处理</h4><p><strong>场景模拟</strong></p><p>加入我们做新增商品，需要接收下面的参数：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">price：价格</span><br><span class="line">name：名称</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>然后对数据做简单校验：</p><ul><li>价格不能为空</li></ul><p>新增时，自动生成 ID ，然后随商品对象一起返回</p><a id="more"></a><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 商品新增</span></span><br><span class="line">        <span class="keyword">int</span> id = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        item.setId(id);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionEnum: 异常 枚举</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    PRICE_CANNOT_BE_NULL(<span class="number">400</span>,<span class="string">"价格不能为空"</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LyException：自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExceptionEnum exceptionEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExceptionResult：异常结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Long timetamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionResult</span><span class="params">(ExceptionEnum em)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = em.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message =em.getMsg();</span><br><span class="line">        <span class="keyword">this</span>.timetamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommonExceptionHandler: 通用的异常处理</strong></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(LyException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">ExceptionResult</span>&gt; <span class="title">handleException</span>(<span class="title">LyException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getExceptionEnum().getCode()).body(<span class="keyword">new</span> ExceptionResult(e.getExceptionEnum()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItemController:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">//校验价格是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (item.getPrice()==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.PRICE_CANNOT_BE_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(itemService.saveItem(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-商品分类查询"><a href="#2-商品分类查询" class="headerlink" title="2.商品分类查询"></a>2.商品分类查询</h4><h5 id="2-1-需求实现"><a href="#2-1-需求实现" class="headerlink" title="2.1 需求实现"></a>2.1 需求实现</h5><p>导入通用mapper依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ly-item-interface</code>中添加category实体类：</p><p><strong>Category</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_category"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys=<span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> Boolean isParent; <span class="comment">// 注意isParent生成的getter和setter方法需要手动加上Is</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用通用mapper来简化开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，我们并没有在mapper接口上声明@Mapper注解，那么mybatis如何才能找到接口呢？</p><p>我们在启动类上添加一个扫描包功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"lwy.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CategoryService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryCategoryListByPid</span><span class="params">(Long pid)</span> </span>&#123;</span><br><span class="line">        Category category=<span class="keyword">new</span> Category();</span><br><span class="line">        category.setParentId(pid);</span><br><span class="line">        List&lt;Category&gt; list = categoryMapper.select(category);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ExceptionEnum</code>中定义<code>CATEGORY_NOT_FOND</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    CATEGORY_NOT_FOND(<span class="number">404</span>,<span class="string">"暂时没有分类信息"</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CategoryController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryCategoryListByPid(<span class="meta">@RequestParam</span>(value = <span class="string">"pid"</span>,defaultValue = <span class="string">"0"</span>)Long pid)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(categoryService.queryCategoryListByPid(pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器直接访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgxL2NhdGVnb3J5L2xpc3TmiJDlip/vvIzkvYbmmK/pgJrov4dodHRwOi8vbWFuYWdlLmxleW91LmNvbS8jL2l0ZW0vY2F0ZWdvcnnorr/pl67ljbTmiqXplJnvvIzku4DkuYjljp/lm6DvvJ8=">http://localhost:8081/category/list成功，但是通过http://manage.leyou.com/#/item/category访问却报错，什么原因？<i class="fa fa-external-link-alt"></i></span></p><h4 id="3-跨域问题"><a href="#3-跨域问题" class="headerlink" title="3.跨域问题"></a>3.跨域问题</h4><p>跨域：浏览器对于javascript的同源策略的限制 。</p><p>以下情况都属于跨域：</p><table><thead><tr><th>跨域原因说明</th><th>示例</th></tr></thead><tbody><tr><td>域名不同</td><td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td></tr><tr><td>域名相同，端口不同</td><td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td></tr><tr><td>二级域名不同</td><td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td></tr></tbody></table><p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域，如：</p><p><code>www.jd.com/item</code> </p><p><code>www.jd.com/goods</code></p><p>而我们刚才是从<code>manage.leyou.com</code>去访问<code>api.leyou.com</code>，这属于二级域名不同，跨域了。</p><h5 id="3-1-为什么有跨域问题？"><a href="#3-1-为什么有跨域问题？" class="headerlink" title="3.1 为什么有跨域问题？"></a>3.1 为什么有跨域问题？</h5><p>跨域不一定会有跨域问题。</p><p>因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是与当前页域名相同的路径</strong>，这能有效的阻止跨站攻击。</p><p>因此：<strong>跨域问题 是针对ajax的一种限制</strong>。</p><p>但是这却给我们的开发带来了不便，而且在实际生产环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，怎么办？</p><h5 id="3-2-解决跨域问题的方案"><a href="#3-2-解决跨域问题的方案" class="headerlink" title="3.2 解决跨域问题的方案"></a>3.2 解决跨域问题的方案</h5><p>目前比较常用的跨域解决方案有3种：</p><ul><li><p>Jsonp</p><p>最早的解决方案，利用script标签可以跨域的原理实现。</p><p>限制：</p><ul><li>需要服务的支持</li><li>只能发起GET请求</li></ul></li><li><p>nginx反向代理</p><p>思路是：利用nginx把跨域反向代理为不跨域，支持各种请求方式</p><p>缺点：需要在nginx进行额外配置，语义不清晰</p></li><li><p>CORS</p><p>规范化的跨域请求解决方案，安全可靠。</p><p>优势：</p><ul><li>在服务端进行控制是否允许跨域，可自定义规则</li><li>支持各种请求方式</li></ul><p>缺点：</p><ul><li>会产生额外的请求</li></ul></li></ul><h5 id="3-3-采用cors的跨域方案"><a href="#3-3-采用cors的跨域方案" class="headerlink" title="3.3 采用cors的跨域方案"></a>3.3 采用cors的跨域方案</h5><ul><li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li><li>Access-Control-Request-Headers：会额外用到的头信息</li></ul><blockquote><p>预检请求的响应</p></blockquote><p>服务的收到预检请求，如果许可跨域，会发出响应：</p><p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p><ul><li>Access-Control-Allow-Methods：允许访问的方式</li><li>Access-Control-Allow-Headers：允许携带的头</li><li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，<strong>过期之前的ajax请求就无需再次进行预检了</strong></li></ul><h5 id="3-4-解决跨域问题"><a href="#3-4-解决跨域问题" class="headerlink" title="3.4 解决跨域问题"></a>3.4 解决跨域问题</h5><p>在<code>leyou-gateway</code>中编写一个配置类，并且注册CorsFilter：</p><p><strong>GlobalCorsConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 5) 设置有效时长</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果增加zuul前缀后会导致header中出现Access-Control-Allow-Credentials等属性重复的异常，需要在zuul中设置header忽略。参数配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">sensitiveHeaders:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="attr">ignored-headers:</span> <span class="string">Access-Control-Allow-Credentials,Access-Control-Allow-Origin,Vary,X-Frame-Options</span></span><br></pre></td></tr></table></figure><h4 id="4-品牌查询"><a href="#4-品牌查询" class="headerlink" title="4.品牌查询"></a>4.品牌查询</h4><p><strong>Brand</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller先思考四个问题，这次没有前端代码，需要我们自己来设定</p><ul><li>请求方式：查询，肯定是Get</li><li>请求路径：分页查询，/brand/page</li><li>请求参数：根据我们刚才编写的页面，有分页功能，有排序功能，有搜索过滤功能，因此至少要有5个参数：<ul><li>page：当前页，int</li><li>rows：每页大小，int</li><li>sortBy：排序字段，String</li><li>desc：是否为降序，boolean</li><li>key：搜索关键词，String</li></ul></li><li>响应结果：分页结果一般至少需要两个数据<ul><li>total：总条数</li><li>items：当前页数据</li><li>totalPage：有些还需要总页数</li></ul></li></ul><p>这里我们封装一个类，来表示分页结果, 这个PageResult以后可能在其它项目中也有需求，因此我们将其抽取到<code>leyou-common</code>中，提高复用性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, Long totalPage, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Long totalPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们编写Controller</p><p><strong>BrandController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Brand&gt;&gt; queryBrandByPage(</span><br><span class="line">         <span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)Integer page,</span><br><span class="line">         <span class="meta">@RequestParam</span>(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"5"</span>)Integer rows,</span><br><span class="line">         <span class="meta">@RequestParam</span>(value = <span class="string">"sortBy"</span>,required = <span class="keyword">false</span>)String sortBy,</span><br><span class="line">         <span class="meta">@RequestParam</span>(value = <span class="string">"desc"</span>,defaultValue = <span class="string">"false"</span>)Boolean desc,</span><br><span class="line">         <span class="meta">@RequestParam</span>(value = <span class="string">"key"</span>,required = <span class="keyword">false</span>)String key</span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(brandService.queryBrandByPageAndSort(page, rows, sortBy, desc, key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BrandService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Brand&gt; <span class="title">queryBrandByPageAndSort</span><span class="params">(Integer page,Integer rows,String sortBy, Boolean desc, String key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//开始分页</span></span><br><span class="line">        PageHelper.startPage(page,rows);</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        Example example=<span class="keyword">new</span> Example(Brand<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneBlank(key))&#123;</span><br><span class="line">            <span class="comment">//过滤条件</span></span><br><span class="line">            example.createCriteria().orLike(<span class="string">"name"</span>,<span class="string">"%"</span>+key+<span class="string">"%"</span>)</span><br><span class="line">                    .orEqualTo(<span class="string">"letter"</span>,key.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortBy))&#123;</span><br><span class="line">            String orderByClause=sortBy+(desc ? <span class="string">" DESC"</span>:<span class="string">" ASC"</span>);    <span class="comment">//DESC ASC前要加空格</span></span><br><span class="line">            example.setOrderByClause(orderByClause);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        List&lt;Brand&gt; list=brandMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.BRAND_NOT_FOND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析分页结果</span></span><br><span class="line">        PageInfo&lt;Brand&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(pageInfo.getTotal(),list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-通用异常处理&quot;&gt;&lt;a href=&quot;#1-通用异常处理&quot; class=&quot;headerlink&quot; title=&quot;1.通用异常处理&quot;&gt;&lt;/a&gt;1.通用异常处理&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;场景模拟&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;加入我们做新增商品，需要接收下面的参数：&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;price：价格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name：名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后对数据做简单校验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格不能为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新增时，自动生成 ID ，然后随商品对象一起返回&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://tonymua.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发(四)处理语音消息</title>
    <link href="http://tonymua.top/35386/"/>
    <id>http://tonymua.top/35386/</id>
    <published>2021-05-08T13:19:59.224Z</published>
    <updated>2020-04-29T02:44:38.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-语音识别接口"><a href="#1-语音识别接口" class="headerlink" title="1.语音识别接口"></a>1.语音识别接口</h3><p>为了实现微信公众号与用户的多样化交互, 本章进行处理用户语音消息的开发.</p><p>开发者进入微信公众平台 <span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tLw==">https://mp.weixin.qq.com/<i class="fa fa-external-link-alt"></i></span> —接口权限—对话服务—接受消息—打开接收语音识别结果接口权限</p><a id="more"></a><p><img data-src="../../../../assets/img/162311.jpg" alt></p><p><img data-src="../../../../assets/img/162403.jpg" alt></p><h3 id="2-获取语音识别结果"><a href="#2-获取语音识别结果" class="headerlink" title="2.获取语音识别结果"></a>2.获取语音识别结果</h3><p>请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个<strong>Recognition</strong>字段（注：<code>由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试</code>）。</p><p>开启语音识别后的语音XML数据包如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[<span class="attr">toUser</span>] ]&gt;</span><span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[<span class="attr">fromUser</span>] ]&gt;</span><span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1357290913<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[<span class="attr">voice</span>] ]&gt;</span><span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[<span class="attr">media_id</span>] ]&gt;</span><span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Format</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[<span class="attr">Format</span>] ]&gt;</span><span class="tag">&lt;/<span class="name">Format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Recognition</span>&gt;</span><span class="tag">&lt; ![<span class="attr">CDATA</span>[腾讯微信团队] ]&gt;</span><span class="tag">&lt;/<span class="name">Recognition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>语音消息参数说明</strong></p><p><img data-src="../../../../assets/img/161521.jpg" alt></p><p>开通语音识别功能以后，用户每次发送语音给微信公众号，微信会在推送语音消息XML数据包中添加一个<code>Recongnition</code>字段，该字段为语音识别出的文本内容.</p><h3 id="3-功能实现"><a href="#3-功能实现" class="headerlink" title="3.功能实现"></a>3.功能实现</h3><p><strong>实体类VoiceMessage</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoiceMessage</span> <span class="keyword">extends</span> <span class="title">BaseMessage</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Recognition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MessageUtil</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">voiceMessageToXml</span><span class="params">(VoiceMessage voiceMessage)</span> </span>&#123;</span><br><span class="line">    xstream.alias(<span class="string">"xml"</span>, voiceMessage.getClass());</span><br><span class="line">    <span class="keyword">return</span> xstream.toXML(voiceMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MsgService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MsgService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String respMessage = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// xml请求解析</span></span><br><span class="line">            Map&lt;String, String&gt; requestMap = MessageUtil.xmlToMap(request);</span><br><span class="line">            <span class="comment">// 发送方帐号（open_id）</span></span><br><span class="line">            String fromUserName = requestMap.get(<span class="string">"FromUserName"</span>);</span><br><span class="line">            <span class="comment">// 公众帐号</span></span><br><span class="line">            String toUserName = requestMap.get(<span class="string">"ToUserName"</span>);</span><br><span class="line">            <span class="comment">// 消息类型</span></span><br><span class="line">            String msgType = requestMap.get(<span class="string">"MsgType"</span>);</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String content = requestMap.get(<span class="string">"Content"</span>);</span><br><span class="line"></span><br><span class="line">            String recognition = requestMap.get(<span class="string">"Recognition"</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"FromUserName is:"</span> + fromUserName + <span class="string">", ToUserName is:"</span> + toUserName + <span class="string">", MsgType is:"</span> + msgType);</span><br><span class="line">            <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE))&#123;</span><br><span class="line">                System.out.println(recognition);</span><br><span class="line">                <span class="keyword">if</span>(recognition.indexOf(<span class="string">"环境信息"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    Map map = IoTPopApiUtil.IoTpop();</span><br><span class="line">                    Map ioTpop = JSON.parseObject(JSONObject.toJSONString(map), Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    Object data = ioTpop.get(<span class="string">"data"</span>);</span><br><span class="line">                    String str = data.toString();</span><br><span class="line">                    <span class="keyword">int</span> index=str.indexOf(<span class="string">"["</span>);</span><br><span class="line">                    String result=str.substring(index);</span><br><span class="line">                    String jsonStr = result.substring(<span class="number">0</span>, result.length() - <span class="number">1</span>);</span><br><span class="line">                    JSONArray array = JSONArray.parseArray(jsonStr);</span><br><span class="line">                    List&lt;Pi&gt; pi = JSONObject.parseArray(array.toJSONString(),Pi<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String returnText=<span class="string">"当前温度:"</span>+pi.get(<span class="number">3</span>).getValue()+<span class="string">"°C"</span>+<span class="string">"\n"</span></span><br><span class="line">                            +<span class="string">"当前湿度:"</span>+pi.get(<span class="number">2</span>).getValue()+<span class="string">"%"</span>+<span class="string">"\n"</span></span><br><span class="line">                            +<span class="string">"当前光照强度:"</span>+pi.get(<span class="number">4</span>).getValue()+<span class="string">"Lux"</span>+<span class="string">"\n"</span></span><br><span class="line">                            +<span class="string">"当前气压:"</span>+pi.get(<span class="number">1</span>).getValue()+<span class="string">"hPa"</span>+<span class="string">"\n"</span></span><br><span class="line">                            +<span class="string">"当前海拔:"</span>+pi.get(<span class="number">0</span>).getValue()+<span class="string">"m"</span>+<span class="string">"\n"</span></span><br><span class="line">                            +<span class="string">"降雨情况:"</span>+(pi.get(<span class="number">5</span>).getValue()==<span class="number">1</span>?<span class="string">"降雨"</span>:<span class="string">"未降雨"</span>);</span><br><span class="line">                    <span class="comment">//文本消息</span></span><br><span class="line">                    TextMessage text = <span class="keyword">new</span> TextMessage();</span><br><span class="line">                    text.setContent(returnText);</span><br><span class="line">                    text.setToUserName(fromUserName);</span><br><span class="line">                    text.setFromUserName(toUserName);</span><br><span class="line">                    text.setCreateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)));</span><br><span class="line">                    text.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);</span><br><span class="line">                    respMessage = MessageUtil.textMessageToXml(text);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(recognition.indexOf(<span class="string">"天气"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//自动回复</span></span><br><span class="line">                    NewsMessage newmsg = <span class="keyword">new</span> NewsMessage();</span><br><span class="line">                    newmsg.setToUserName(fromUserName);</span><br><span class="line">                    newmsg.setFromUserName(toUserName);</span><br><span class="line">                    newmsg.setCreateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)));</span><br><span class="line">                    newmsg.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_NEWS);</span><br><span class="line">                    newmsg.setFuncFlag(<span class="number">0</span>);</span><br><span class="line">                    List&lt;Article&gt; articleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">                    article.setTitle(<span class="string">"天气预报"</span>);</span><br><span class="line">                    article.setDescription(<span class="string">"点击了解未来天气详情..."</span>);</span><br><span class="line">                    article.setPicUrl(<span class="string">"https://xxxx.oss-cn-beijing.aliyuncs.com/ep.png"</span>);</span><br><span class="line">                    article.setUrl(<span class="string">"https://widget-page.heweather.net/h5/index.html?bg=1&amp;md=0123456&amp;lc=accu&amp;key=4bdfe35a67bb4b53bee844f6ce7a4b5c"</span>);</span><br><span class="line">                    articleList.add(article);</span><br><span class="line">                    <span class="comment">// 设置图文消息个数</span></span><br><span class="line">                    newmsg.setArticleCount(articleList.size());</span><br><span class="line">                    <span class="comment">// 设置图文消息包含的图文集合</span></span><br><span class="line">                    newmsg.setArticles(articleList);</span><br><span class="line">                    <span class="comment">// 将图文消息对象转换成xml字符串</span></span><br><span class="line">                    respMessage = MessageUtil.newsMessageToXml(newmsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"error......"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> respMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p><img data-src="../../../../assets/img/163205.jpg" alt></p><p><img data-src="../../../../assets/img/163500.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-语音识别接口&quot;&gt;&lt;a href=&quot;#1-语音识别接口&quot; class=&quot;headerlink&quot; title=&quot;1.语音识别接口&quot;&gt;&lt;/a&gt;1.语音识别接口&lt;/h3&gt;&lt;p&gt;为了实现微信公众号与用户的多样化交互, 本章进行处理用户语音消息的开发.&lt;/p&gt;
&lt;p&gt;开发者进入微信公众平台 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tLw==&quot;&gt;https://mp.weixin.qq.com/&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; —接口权限—对话服务—接受消息—打开接收语音识别结果接口权限&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="tool" scheme="http://tonymua.top/tags/tool/"/>
    
  </entry>
  
</feed>
